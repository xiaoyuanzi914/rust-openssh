/* automatically generated by rust-bindgen 0.59.2 */

pub const KRB5_DEPRECATED: u32 = 0;
pub const _FEATURES_H: u32 = 1;
pub const _DEFAULT_SOURCE: u32 = 1;
pub const __GLIBC_USE_ISOC2X: u32 = 0;
pub const __USE_ISOC11: u32 = 1;
pub const __USE_ISOC99: u32 = 1;
pub const __USE_ISOC95: u32 = 1;
pub const __USE_POSIX_IMPLICITLY: u32 = 1;
pub const _POSIX_SOURCE: u32 = 1;
pub const _POSIX_C_SOURCE: u32 = 200809;
pub const __USE_POSIX: u32 = 1;
pub const __USE_POSIX2: u32 = 1;
pub const __USE_POSIX199309: u32 = 1;
pub const __USE_POSIX199506: u32 = 1;
pub const __USE_XOPEN2K: u32 = 1;
pub const __USE_XOPEN2K8: u32 = 1;
pub const _ATFILE_SOURCE: u32 = 1;
pub const __WORDSIZE: u32 = 64;
pub const __WORDSIZE_TIME64_COMPAT32: u32 = 1;
pub const __SYSCALL_WORDSIZE: u32 = 64;
pub const __TIMESIZE: u32 = 64;
pub const __USE_MISC: u32 = 1;
pub const __USE_ATFILE: u32 = 1;
pub const __USE_FORTIFY_LEVEL: u32 = 0;
pub const __GLIBC_USE_DEPRECATED_GETS: u32 = 0;
pub const __GLIBC_USE_DEPRECATED_SCANF: u32 = 0;
pub const _STDC_PREDEF_H: u32 = 1;
pub const __STDC_IEC_559__: u32 = 1;
pub const __STDC_IEC_60559_BFP__: u32 = 201404;
pub const __STDC_IEC_559_COMPLEX__: u32 = 1;
pub const __STDC_IEC_60559_COMPLEX__: u32 = 201404;
pub const __STDC_ISO_10646__: u32 = 201706;
pub const __GNU_LIBRARY__: u32 = 6;
pub const __GLIBC__: u32 = 2;
pub const __GLIBC_MINOR__: u32 = 35;
pub const _SYS_CDEFS_H: u32 = 1;
pub const __glibc_c99_flexarr_available: u32 = 1;
pub const __LDOUBLE_REDIRECTS_TO_FLOAT128_ABI: u32 = 0;
pub const __HAVE_GENERIC_SELECTION: u32 = 1;
pub const __GLIBC_USE_LIB_EXT2: u32 = 0;
pub const __GLIBC_USE_IEC_60559_BFP_EXT: u32 = 0;
pub const __GLIBC_USE_IEC_60559_BFP_EXT_C2X: u32 = 0;
pub const __GLIBC_USE_IEC_60559_EXT: u32 = 0;
pub const __GLIBC_USE_IEC_60559_FUNCS_EXT: u32 = 0;
pub const __GLIBC_USE_IEC_60559_FUNCS_EXT_C2X: u32 = 0;
pub const __GLIBC_USE_IEC_60559_TYPES_EXT: u32 = 0;
pub const _STDLIB_H: u32 = 1;
pub const WNOHANG: u32 = 1;
pub const WUNTRACED: u32 = 2;
pub const WSTOPPED: u32 = 2;
pub const WEXITED: u32 = 4;
pub const WCONTINUED: u32 = 8;
pub const WNOWAIT: u32 = 16777216;
pub const __WNOTHREAD: u32 = 536870912;
pub const __WALL: u32 = 1073741824;
pub const __WCLONE: u32 = 2147483648;
pub const __W_CONTINUED: u32 = 65535;
pub const __WCOREFLAG: u32 = 128;
pub const __HAVE_FLOAT128: u32 = 0;
pub const __HAVE_DISTINCT_FLOAT128: u32 = 0;
pub const __HAVE_FLOAT64X: u32 = 1;
pub const __HAVE_FLOAT64X_LONG_DOUBLE: u32 = 1;
pub const __HAVE_FLOAT16: u32 = 0;
pub const __HAVE_FLOAT32: u32 = 1;
pub const __HAVE_FLOAT64: u32 = 1;
pub const __HAVE_FLOAT32X: u32 = 1;
pub const __HAVE_FLOAT128X: u32 = 0;
pub const __HAVE_DISTINCT_FLOAT16: u32 = 0;
pub const __HAVE_DISTINCT_FLOAT32: u32 = 0;
pub const __HAVE_DISTINCT_FLOAT64: u32 = 0;
pub const __HAVE_DISTINCT_FLOAT32X: u32 = 0;
pub const __HAVE_DISTINCT_FLOAT64X: u32 = 0;
pub const __HAVE_DISTINCT_FLOAT128X: u32 = 0;
pub const __HAVE_FLOATN_NOT_TYPEDEF: u32 = 0;
pub const __ldiv_t_defined: u32 = 1;
pub const __lldiv_t_defined: u32 = 1;
pub const RAND_MAX: u32 = 2147483647;
pub const EXIT_FAILURE: u32 = 1;
pub const EXIT_SUCCESS: u32 = 0;
pub const _SYS_TYPES_H: u32 = 1;
pub const _BITS_TYPES_H: u32 = 1;
pub const _BITS_TYPESIZES_H: u32 = 1;
pub const __OFF_T_MATCHES_OFF64_T: u32 = 1;
pub const __INO_T_MATCHES_INO64_T: u32 = 1;
pub const __RLIM_T_MATCHES_RLIM64_T: u32 = 1;
pub const __STATFS_MATCHES_STATFS64: u32 = 1;
pub const __KERNEL_OLD_TIMEVAL_MATCHES_TIMEVAL64: u32 = 1;
pub const __FD_SETSIZE: u32 = 1024;
pub const _BITS_TIME64_H: u32 = 1;
pub const __clock_t_defined: u32 = 1;
pub const __clockid_t_defined: u32 = 1;
pub const __time_t_defined: u32 = 1;
pub const __timer_t_defined: u32 = 1;
pub const _BITS_STDINT_INTN_H: u32 = 1;
pub const __BIT_TYPES_DEFINED__: u32 = 1;
pub const _ENDIAN_H: u32 = 1;
pub const _BITS_ENDIAN_H: u32 = 1;
pub const __LITTLE_ENDIAN: u32 = 1234;
pub const __BIG_ENDIAN: u32 = 4321;
pub const __PDP_ENDIAN: u32 = 3412;
pub const _BITS_ENDIANNESS_H: u32 = 1;
pub const __BYTE_ORDER: u32 = 1234;
pub const __FLOAT_WORD_ORDER: u32 = 1234;
pub const LITTLE_ENDIAN: u32 = 1234;
pub const BIG_ENDIAN: u32 = 4321;
pub const PDP_ENDIAN: u32 = 3412;
pub const BYTE_ORDER: u32 = 1234;
pub const _BITS_BYTESWAP_H: u32 = 1;
pub const _BITS_UINTN_IDENTITY_H: u32 = 1;
pub const _SYS_SELECT_H: u32 = 1;
pub const __sigset_t_defined: u32 = 1;
pub const __timeval_defined: u32 = 1;
pub const _STRUCT_TIMESPEC: u32 = 1;
pub const FD_SETSIZE: u32 = 1024;
pub const _BITS_PTHREADTYPES_COMMON_H: u32 = 1;
pub const _THREAD_SHARED_TYPES_H: u32 = 1;
pub const _BITS_PTHREADTYPES_ARCH_H: u32 = 1;
pub const __SIZEOF_PTHREAD_MUTEX_T: u32 = 40;
pub const __SIZEOF_PTHREAD_ATTR_T: u32 = 56;
pub const __SIZEOF_PTHREAD_RWLOCK_T: u32 = 56;
pub const __SIZEOF_PTHREAD_BARRIER_T: u32 = 32;
pub const __SIZEOF_PTHREAD_MUTEXATTR_T: u32 = 4;
pub const __SIZEOF_PTHREAD_COND_T: u32 = 48;
pub const __SIZEOF_PTHREAD_CONDATTR_T: u32 = 4;
pub const __SIZEOF_PTHREAD_RWLOCKATTR_T: u32 = 8;
pub const __SIZEOF_PTHREAD_BARRIERATTR_T: u32 = 4;
pub const _THREAD_MUTEX_INTERNAL_H: u32 = 1;
pub const __PTHREAD_MUTEX_HAVE_PREV: u32 = 1;
pub const __have_pthread_attr_t: u32 = 1;
pub const _ALLOCA_H: u32 = 1;
pub const _LIBC_LIMITS_H_: u32 = 1;
pub const MB_LEN_MAX: u32 = 16;
pub const _BITS_POSIX1_LIM_H: u32 = 1;
pub const _POSIX_AIO_LISTIO_MAX: u32 = 2;
pub const _POSIX_AIO_MAX: u32 = 1;
pub const _POSIX_ARG_MAX: u32 = 4096;
pub const _POSIX_CHILD_MAX: u32 = 25;
pub const _POSIX_DELAYTIMER_MAX: u32 = 32;
pub const _POSIX_HOST_NAME_MAX: u32 = 255;
pub const _POSIX_LINK_MAX: u32 = 8;
pub const _POSIX_LOGIN_NAME_MAX: u32 = 9;
pub const _POSIX_MAX_CANON: u32 = 255;
pub const _POSIX_MAX_INPUT: u32 = 255;
pub const _POSIX_MQ_OPEN_MAX: u32 = 8;
pub const _POSIX_MQ_PRIO_MAX: u32 = 32;
pub const _POSIX_NAME_MAX: u32 = 14;
pub const _POSIX_NGROUPS_MAX: u32 = 8;
pub const _POSIX_OPEN_MAX: u32 = 20;
pub const _POSIX_PATH_MAX: u32 = 256;
pub const _POSIX_PIPE_BUF: u32 = 512;
pub const _POSIX_RE_DUP_MAX: u32 = 255;
pub const _POSIX_RTSIG_MAX: u32 = 8;
pub const _POSIX_SEM_NSEMS_MAX: u32 = 256;
pub const _POSIX_SEM_VALUE_MAX: u32 = 32767;
pub const _POSIX_SIGQUEUE_MAX: u32 = 32;
pub const _POSIX_SSIZE_MAX: u32 = 32767;
pub const _POSIX_STREAM_MAX: u32 = 8;
pub const _POSIX_SYMLINK_MAX: u32 = 255;
pub const _POSIX_SYMLOOP_MAX: u32 = 8;
pub const _POSIX_TIMER_MAX: u32 = 32;
pub const _POSIX_TTY_NAME_MAX: u32 = 9;
pub const _POSIX_TZNAME_MAX: u32 = 6;
pub const _POSIX_CLOCKRES_MIN: u32 = 20000000;
pub const NR_OPEN: u32 = 1024;
pub const NGROUPS_MAX: u32 = 65536;
pub const ARG_MAX: u32 = 131072;
pub const LINK_MAX: u32 = 127;
pub const MAX_CANON: u32 = 255;
pub const MAX_INPUT: u32 = 255;
pub const NAME_MAX: u32 = 255;
pub const PATH_MAX: u32 = 4096;
pub const PIPE_BUF: u32 = 4096;
pub const XATTR_NAME_MAX: u32 = 255;
pub const XATTR_SIZE_MAX: u32 = 65536;
pub const XATTR_LIST_MAX: u32 = 65536;
pub const RTSIG_MAX: u32 = 32;
pub const _POSIX_THREAD_KEYS_MAX: u32 = 128;
pub const PTHREAD_KEYS_MAX: u32 = 1024;
pub const _POSIX_THREAD_DESTRUCTOR_ITERATIONS: u32 = 4;
pub const PTHREAD_DESTRUCTOR_ITERATIONS: u32 = 4;
pub const _POSIX_THREAD_THREADS_MAX: u32 = 64;
pub const AIO_PRIO_DELTA_MAX: u32 = 20;
pub const PTHREAD_STACK_MIN: u32 = 16384;
pub const DELAYTIMER_MAX: u32 = 2147483647;
pub const TTY_NAME_MAX: u32 = 32;
pub const LOGIN_NAME_MAX: u32 = 256;
pub const HOST_NAME_MAX: u32 = 64;
pub const MQ_PRIO_MAX: u32 = 32768;
pub const SEM_VALUE_MAX: u32 = 2147483647;
pub const _BITS_POSIX2_LIM_H: u32 = 1;
pub const _POSIX2_BC_BASE_MAX: u32 = 99;
pub const _POSIX2_BC_DIM_MAX: u32 = 2048;
pub const _POSIX2_BC_SCALE_MAX: u32 = 99;
pub const _POSIX2_BC_STRING_MAX: u32 = 1000;
pub const _POSIX2_COLL_WEIGHTS_MAX: u32 = 2;
pub const _POSIX2_EXPR_NEST_MAX: u32 = 32;
pub const _POSIX2_LINE_MAX: u32 = 2048;
pub const _POSIX2_RE_DUP_MAX: u32 = 255;
pub const _POSIX2_CHARCLASS_NAME_MAX: u32 = 14;
pub const BC_BASE_MAX: u32 = 99;
pub const BC_DIM_MAX: u32 = 2048;
pub const BC_SCALE_MAX: u32 = 99;
pub const BC_STRING_MAX: u32 = 1000;
pub const COLL_WEIGHTS_MAX: u32 = 255;
pub const EXPR_NEST_MAX: u32 = 32;
pub const LINE_MAX: u32 = 2048;
pub const CHARCLASS_NAME_MAX: u32 = 2048;
pub const RE_DUP_MAX: u32 = 32767;
pub const __GNUC_VA_LIST: u32 = 1;
pub const _STDINT_H: u32 = 1;
pub const _BITS_WCHAR_H: u32 = 1;
pub const _BITS_STDINT_UINTN_H: u32 = 1;
pub const INT8_MIN: i32 = -128;
pub const INT16_MIN: i32 = -32768;
pub const INT32_MIN: i32 = -2147483648;
pub const INT8_MAX: u32 = 127;
pub const INT16_MAX: u32 = 32767;
pub const INT32_MAX: u32 = 2147483647;
pub const UINT8_MAX: u32 = 255;
pub const UINT16_MAX: u32 = 65535;
pub const UINT32_MAX: u32 = 4294967295;
pub const INT_LEAST8_MIN: i32 = -128;
pub const INT_LEAST16_MIN: i32 = -32768;
pub const INT_LEAST32_MIN: i32 = -2147483648;
pub const INT_LEAST8_MAX: u32 = 127;
pub const INT_LEAST16_MAX: u32 = 32767;
pub const INT_LEAST32_MAX: u32 = 2147483647;
pub const UINT_LEAST8_MAX: u32 = 255;
pub const UINT_LEAST16_MAX: u32 = 65535;
pub const UINT_LEAST32_MAX: u32 = 4294967295;
pub const INT_FAST8_MIN: i32 = -128;
pub const INT_FAST16_MIN: i64 = -9223372036854775808;
pub const INT_FAST32_MIN: i64 = -9223372036854775808;
pub const INT_FAST8_MAX: u32 = 127;
pub const INT_FAST16_MAX: u64 = 9223372036854775807;
pub const INT_FAST32_MAX: u64 = 9223372036854775807;
pub const UINT_FAST8_MAX: u32 = 255;
pub const UINT_FAST16_MAX: i32 = -1;
pub const UINT_FAST32_MAX: i32 = -1;
pub const INTPTR_MIN: i64 = -9223372036854775808;
pub const INTPTR_MAX: u64 = 9223372036854775807;
pub const UINTPTR_MAX: i32 = -1;
pub const PTRDIFF_MIN: i64 = -9223372036854775808;
pub const PTRDIFF_MAX: u64 = 9223372036854775807;
pub const SIG_ATOMIC_MIN: i32 = -2147483648;
pub const SIG_ATOMIC_MAX: u32 = 2147483647;
pub const SIZE_MAX: i32 = -1;
pub const WINT_MIN: u32 = 0;
pub const WINT_MAX: u32 = 4294967295;
pub const KRB5_INT32_MAX: u32 = 2147483647;
pub const KRB5_INT32_MIN: i32 = -2147483648;
pub const KRB5_INT16_MAX: u32 = 65535;
pub const KRB5_INT16_MIN: i32 = -65536;
pub const FALSE: u32 = 0;
pub const TRUE: u32 = 1;
pub const KRB5_NT_UNKNOWN: u32 = 0;
pub const KRB5_NT_PRINCIPAL: u32 = 1;
pub const KRB5_NT_SRV_INST: u32 = 2;
pub const KRB5_NT_SRV_HST: u32 = 3;
pub const KRB5_NT_SRV_XHST: u32 = 4;
pub const KRB5_NT_UID: u32 = 5;
pub const KRB5_NT_X500_PRINCIPAL: u32 = 6;
pub const KRB5_NT_SMTP_NAME: u32 = 7;
pub const KRB5_NT_ENTERPRISE_PRINCIPAL: u32 = 10;
pub const KRB5_NT_WELLKNOWN: u32 = 11;
pub const KRB5_WELLKNOWN_NAMESTR: &[u8; 10usize] = b"WELLKNOWN\0";
pub const KRB5_NT_MS_PRINCIPAL: i32 = -128;
pub const KRB5_NT_MS_PRINCIPAL_AND_ID: i32 = -129;
pub const KRB5_NT_ENT_PRINCIPAL_AND_ID: i32 = -130;
pub const KRB5_REFERRAL_REALM: &[u8; 1usize] = b"\0";
pub const KRB5_ANONYMOUS_REALMSTR: &[u8; 20usize] = b"WELLKNOWN:ANONYMOUS\0";
pub const KRB5_ANONYMOUS_PRINCSTR: &[u8; 10usize] = b"ANONYMOUS\0";
pub const ADDRTYPE_INET: u32 = 2;
pub const ADDRTYPE_CHAOS: u32 = 5;
pub const ADDRTYPE_XNS: u32 = 6;
pub const ADDRTYPE_ISO: u32 = 7;
pub const ADDRTYPE_DDP: u32 = 16;
pub const ADDRTYPE_NETBIOS: u32 = 20;
pub const ADDRTYPE_INET6: u32 = 24;
pub const ADDRTYPE_ADDRPORT: u32 = 256;
pub const ADDRTYPE_IPPORT: u32 = 257;
pub const ENCTYPE_NULL: u32 = 0;
pub const ENCTYPE_DES_CBC_CRC: u32 = 1;
pub const ENCTYPE_DES_CBC_MD4: u32 = 2;
pub const ENCTYPE_DES_CBC_MD5: u32 = 3;
pub const ENCTYPE_DES_CBC_RAW: u32 = 4;
pub const ENCTYPE_DES3_CBC_SHA: u32 = 5;
pub const ENCTYPE_DES3_CBC_RAW: u32 = 6;
pub const ENCTYPE_DES_HMAC_SHA1: u32 = 8;
pub const ENCTYPE_DSA_SHA1_CMS: u32 = 9;
pub const ENCTYPE_MD5_RSA_CMS: u32 = 10;
pub const ENCTYPE_SHA1_RSA_CMS: u32 = 11;
pub const ENCTYPE_RC2_CBC_ENV: u32 = 12;
pub const ENCTYPE_RSA_ENV: u32 = 13;
pub const ENCTYPE_RSA_ES_OAEP_ENV: u32 = 14;
pub const ENCTYPE_DES3_CBC_ENV: u32 = 15;
pub const ENCTYPE_DES3_CBC_SHA1: u32 = 16;
pub const ENCTYPE_AES128_CTS_HMAC_SHA1_96: u32 = 17;
pub const ENCTYPE_AES256_CTS_HMAC_SHA1_96: u32 = 18;
pub const ENCTYPE_AES128_CTS_HMAC_SHA256_128: u32 = 19;
pub const ENCTYPE_AES256_CTS_HMAC_SHA384_192: u32 = 20;
pub const ENCTYPE_ARCFOUR_HMAC: u32 = 23;
pub const ENCTYPE_ARCFOUR_HMAC_EXP: u32 = 24;
pub const ENCTYPE_CAMELLIA128_CTS_CMAC: u32 = 25;
pub const ENCTYPE_CAMELLIA256_CTS_CMAC: u32 = 26;
pub const ENCTYPE_UNKNOWN: u32 = 511;
pub const CKSUMTYPE_CRC32: u32 = 1;
pub const CKSUMTYPE_RSA_MD4: u32 = 2;
pub const CKSUMTYPE_RSA_MD4_DES: u32 = 3;
pub const CKSUMTYPE_DESCBC: u32 = 4;
pub const CKSUMTYPE_RSA_MD5: u32 = 7;
pub const CKSUMTYPE_RSA_MD5_DES: u32 = 8;
pub const CKSUMTYPE_NIST_SHA: u32 = 9;
pub const CKSUMTYPE_HMAC_SHA1_DES3: u32 = 12;
pub const CKSUMTYPE_HMAC_SHA1_96_AES128: u32 = 15;
pub const CKSUMTYPE_HMAC_SHA1_96_AES256: u32 = 16;
pub const CKSUMTYPE_HMAC_SHA256_128_AES128: u32 = 19;
pub const CKSUMTYPE_HMAC_SHA384_192_AES256: u32 = 20;
pub const CKSUMTYPE_CMAC_CAMELLIA128: u32 = 17;
pub const CKSUMTYPE_CMAC_CAMELLIA256: u32 = 18;
pub const CKSUMTYPE_MD5_HMAC_ARCFOUR: i32 = -137;
pub const CKSUMTYPE_HMAC_MD5_ARCFOUR: i32 = -138;
pub const KRB5_KEYUSAGE_AS_REQ_PA_ENC_TS: u32 = 1;
pub const KRB5_KEYUSAGE_KDC_REP_TICKET: u32 = 2;
pub const KRB5_KEYUSAGE_AS_REP_ENCPART: u32 = 3;
pub const KRB5_KEYUSAGE_TGS_REQ_AD_SESSKEY: u32 = 4;
pub const KRB5_KEYUSAGE_TGS_REQ_AD_SUBKEY: u32 = 5;
pub const KRB5_KEYUSAGE_TGS_REQ_AUTH_CKSUM: u32 = 6;
pub const KRB5_KEYUSAGE_TGS_REQ_AUTH: u32 = 7;
pub const KRB5_KEYUSAGE_TGS_REP_ENCPART_SESSKEY: u32 = 8;
pub const KRB5_KEYUSAGE_TGS_REP_ENCPART_SUBKEY: u32 = 9;
pub const KRB5_KEYUSAGE_AP_REQ_AUTH_CKSUM: u32 = 10;
pub const KRB5_KEYUSAGE_AP_REQ_AUTH: u32 = 11;
pub const KRB5_KEYUSAGE_AP_REP_ENCPART: u32 = 12;
pub const KRB5_KEYUSAGE_KRB_PRIV_ENCPART: u32 = 13;
pub const KRB5_KEYUSAGE_KRB_CRED_ENCPART: u32 = 14;
pub const KRB5_KEYUSAGE_KRB_SAFE_CKSUM: u32 = 15;
pub const KRB5_KEYUSAGE_APP_DATA_ENCRYPT: u32 = 16;
pub const KRB5_KEYUSAGE_APP_DATA_CKSUM: u32 = 17;
pub const KRB5_KEYUSAGE_KRB_ERROR_CKSUM: u32 = 18;
pub const KRB5_KEYUSAGE_AD_KDCISSUED_CKSUM: u32 = 19;
pub const KRB5_KEYUSAGE_AD_MTE: u32 = 20;
pub const KRB5_KEYUSAGE_AD_ITE: u32 = 21;
pub const KRB5_KEYUSAGE_GSS_TOK_MIC: u32 = 22;
pub const KRB5_KEYUSAGE_GSS_TOK_WRAP_INTEG: u32 = 23;
pub const KRB5_KEYUSAGE_GSS_TOK_WRAP_PRIV: u32 = 24;
pub const KRB5_KEYUSAGE_PA_SAM_CHALLENGE_CKSUM: u32 = 25;
pub const KRB5_KEYUSAGE_PA_SAM_CHALLENGE_TRACKID: u32 = 26;
pub const KRB5_KEYUSAGE_PA_SAM_RESPONSE: u32 = 27;
pub const KRB5_KEYUSAGE_PA_S4U_X509_USER_REQUEST: u32 = 26;
pub const KRB5_KEYUSAGE_PA_S4U_X509_USER_REPLY: u32 = 27;
pub const KRB5_KEYUSAGE_PA_REFERRAL: u32 = 26;
pub const KRB5_KEYUSAGE_AD_SIGNEDPATH: i32 = -21;
pub const KRB5_KEYUSAGE_IAKERB_FINISHED: u32 = 42;
pub const KRB5_KEYUSAGE_PA_PKINIT_KX: u32 = 44;
pub const KRB5_KEYUSAGE_PA_OTP_REQUEST: u32 = 45;
pub const KRB5_KEYUSAGE_FAST_REQ_CHKSUM: u32 = 50;
pub const KRB5_KEYUSAGE_FAST_ENC: u32 = 51;
pub const KRB5_KEYUSAGE_FAST_REP: u32 = 52;
pub const KRB5_KEYUSAGE_FAST_FINISHED: u32 = 53;
pub const KRB5_KEYUSAGE_ENC_CHALLENGE_CLIENT: u32 = 54;
pub const KRB5_KEYUSAGE_ENC_CHALLENGE_KDC: u32 = 55;
pub const KRB5_KEYUSAGE_AS_REQ: u32 = 56;
pub const KRB5_KEYUSAGE_CAMMAC: u32 = 64;
pub const KRB5_KEYUSAGE_SPAKE: u32 = 65;
pub const KRB5_KEYUSAGE_PA_FX_COOKIE: u32 = 513;
pub const KRB5_KEYUSAGE_PA_AS_FRESHNESS: u32 = 514;
pub const KRB5_CRYPTO_TYPE_EMPTY: u32 = 0;
pub const KRB5_CRYPTO_TYPE_HEADER: u32 = 1;
pub const KRB5_CRYPTO_TYPE_DATA: u32 = 2;
pub const KRB5_CRYPTO_TYPE_SIGN_ONLY: u32 = 3;
pub const KRB5_CRYPTO_TYPE_PADDING: u32 = 4;
pub const KRB5_CRYPTO_TYPE_TRAILER: u32 = 5;
pub const KRB5_CRYPTO_TYPE_CHECKSUM: u32 = 6;
pub const KRB5_CRYPTO_TYPE_STREAM: u32 = 7;
pub const KDC_OPT_FORWARDABLE: u32 = 1073741824;
pub const KDC_OPT_FORWARDED: u32 = 536870912;
pub const KDC_OPT_PROXIABLE: u32 = 268435456;
pub const KDC_OPT_PROXY: u32 = 134217728;
pub const KDC_OPT_ALLOW_POSTDATE: u32 = 67108864;
pub const KDC_OPT_POSTDATED: u32 = 33554432;
pub const KDC_OPT_RENEWABLE: u32 = 8388608;
pub const KDC_OPT_CNAME_IN_ADDL_TKT: u32 = 131072;
pub const KDC_OPT_CANONICALIZE: u32 = 65536;
pub const KDC_OPT_REQUEST_ANONYMOUS: u32 = 32768;
pub const KDC_OPT_DISABLE_TRANSITED_CHECK: u32 = 32;
pub const KDC_OPT_RENEWABLE_OK: u32 = 16;
pub const KDC_OPT_ENC_TKT_IN_SKEY: u32 = 8;
pub const KDC_OPT_RENEW: u32 = 2;
pub const KDC_OPT_VALIDATE: u32 = 1;
pub const KDC_TKT_COMMON_MASK: u32 = 1417674752;
pub const AP_OPTS_RESERVED: u32 = 2147483648;
pub const AP_OPTS_USE_SESSION_KEY: u32 = 1073741824;
pub const AP_OPTS_MUTUAL_REQUIRED: u32 = 536870912;
pub const AP_OPTS_ETYPE_NEGOTIATION: u32 = 2;
pub const AP_OPTS_USE_SUBKEY: u32 = 1;
pub const AP_OPTS_WIRE_MASK: u32 = 4294967280;
pub const AD_TYPE_RESERVED: u32 = 32768;
pub const AD_TYPE_EXTERNAL: u32 = 16384;
pub const AD_TYPE_REGISTERED: u32 = 8192;
pub const AD_TYPE_FIELD_TYPE_MASK: u32 = 8191;
pub const TKT_FLG_FORWARDABLE: u32 = 1073741824;
pub const TKT_FLG_FORWARDED: u32 = 536870912;
pub const TKT_FLG_PROXIABLE: u32 = 268435456;
pub const TKT_FLG_PROXY: u32 = 134217728;
pub const TKT_FLG_MAY_POSTDATE: u32 = 67108864;
pub const TKT_FLG_POSTDATED: u32 = 33554432;
pub const TKT_FLG_INVALID: u32 = 16777216;
pub const TKT_FLG_RENEWABLE: u32 = 8388608;
pub const TKT_FLG_INITIAL: u32 = 4194304;
pub const TKT_FLG_PRE_AUTH: u32 = 2097152;
pub const TKT_FLG_HW_AUTH: u32 = 1048576;
pub const TKT_FLG_TRANSIT_POLICY_CHECKED: u32 = 524288;
pub const TKT_FLG_OK_AS_DELEGATE: u32 = 262144;
pub const TKT_FLG_ENC_PA_REP: u32 = 65536;
pub const TKT_FLG_ANONYMOUS: u32 = 32768;
pub const LR_TYPE_THIS_SERVER_ONLY: u32 = 32768;
pub const LR_TYPE_INTERPRETATION_MASK: u32 = 32767;
pub const MSEC_DIRBIT: u32 = 32768;
pub const MSEC_VAL_MASK: u32 = 32767;
pub const KRB5_PVNO: u32 = 5;
pub const KRB5_LRQ_NONE: u32 = 0;
pub const KRB5_LRQ_ALL_LAST_TGT: u32 = 1;
pub const KRB5_LRQ_ONE_LAST_TGT: i32 = -1;
pub const KRB5_LRQ_ALL_LAST_INITIAL: u32 = 2;
pub const KRB5_LRQ_ONE_LAST_INITIAL: i32 = -2;
pub const KRB5_LRQ_ALL_LAST_TGT_ISSUED: u32 = 3;
pub const KRB5_LRQ_ONE_LAST_TGT_ISSUED: i32 = -3;
pub const KRB5_LRQ_ALL_LAST_RENEWAL: u32 = 4;
pub const KRB5_LRQ_ONE_LAST_RENEWAL: i32 = -4;
pub const KRB5_LRQ_ALL_LAST_REQ: u32 = 5;
pub const KRB5_LRQ_ONE_LAST_REQ: i32 = -5;
pub const KRB5_LRQ_ALL_PW_EXPTIME: u32 = 6;
pub const KRB5_LRQ_ONE_PW_EXPTIME: i32 = -6;
pub const KRB5_LRQ_ALL_ACCT_EXPTIME: u32 = 7;
pub const KRB5_LRQ_ONE_ACCT_EXPTIME: i32 = -7;
pub const KRB5_PADATA_NONE: u32 = 0;
pub const KRB5_PADATA_AP_REQ: u32 = 1;
pub const KRB5_PADATA_TGS_REQ: u32 = 1;
pub const KRB5_PADATA_ENC_TIMESTAMP: u32 = 2;
pub const KRB5_PADATA_PW_SALT: u32 = 3;
pub const KRB5_PADATA_ENC_UNIX_TIME: u32 = 5;
pub const KRB5_PADATA_ENC_SANDIA_SECURID: u32 = 6;
pub const KRB5_PADATA_SESAME: u32 = 7;
pub const KRB5_PADATA_OSF_DCE: u32 = 8;
pub const KRB5_CYBERSAFE_SECUREID: u32 = 9;
pub const KRB5_PADATA_AFS3_SALT: u32 = 10;
pub const KRB5_PADATA_ETYPE_INFO: u32 = 11;
pub const KRB5_PADATA_SAM_CHALLENGE: u32 = 12;
pub const KRB5_PADATA_SAM_RESPONSE: u32 = 13;
pub const KRB5_PADATA_PK_AS_REQ_OLD: u32 = 14;
pub const KRB5_PADATA_PK_AS_REP_OLD: u32 = 15;
pub const KRB5_PADATA_PK_AS_REQ: u32 = 16;
pub const KRB5_PADATA_PK_AS_REP: u32 = 17;
pub const KRB5_PADATA_ETYPE_INFO2: u32 = 19;
pub const KRB5_PADATA_USE_SPECIFIED_KVNO: u32 = 20;
pub const KRB5_PADATA_SVR_REFERRAL_INFO: u32 = 20;
pub const KRB5_PADATA_SAM_REDIRECT: u32 = 21;
pub const KRB5_PADATA_GET_FROM_TYPED_DATA: u32 = 22;
pub const KRB5_PADATA_REFERRAL: u32 = 25;
pub const KRB5_PADATA_SAM_CHALLENGE_2: u32 = 30;
pub const KRB5_PADATA_SAM_RESPONSE_2: u32 = 31;
pub const KRB5_PADATA_PAC_REQUEST: u32 = 128;
pub const KRB5_PADATA_FOR_USER: u32 = 129;
pub const KRB5_PADATA_S4U_X509_USER: u32 = 130;
pub const KRB5_PADATA_AS_CHECKSUM: u32 = 132;
pub const KRB5_PADATA_FX_COOKIE: u32 = 133;
pub const KRB5_PADATA_FX_FAST: u32 = 136;
pub const KRB5_PADATA_FX_ERROR: u32 = 137;
pub const KRB5_PADATA_ENCRYPTED_CHALLENGE: u32 = 138;
pub const KRB5_PADATA_OTP_CHALLENGE: u32 = 141;
pub const KRB5_PADATA_OTP_REQUEST: u32 = 142;
pub const KRB5_PADATA_OTP_PIN_CHANGE: u32 = 144;
pub const KRB5_PADATA_PKINIT_KX: u32 = 147;
pub const KRB5_ENCPADATA_REQ_ENC_PA_REP: u32 = 149;
pub const KRB5_PADATA_AS_FRESHNESS: u32 = 150;
pub const KRB5_PADATA_SPAKE: u32 = 151;
pub const KRB5_PADATA_PAC_OPTIONS: u32 = 167;
pub const KRB5_SAM_USE_SAD_AS_KEY: u32 = 2147483648;
pub const KRB5_SAM_SEND_ENCRYPTED_SAD: u32 = 1073741824;
pub const KRB5_SAM_MUST_PK_ENCRYPT_SAD: u32 = 536870912;
pub const KRB5_DOMAIN_X500_COMPRESS: u32 = 1;
pub const KRB5_ALTAUTH_ATT_CHALLENGE_RESPONSE: u32 = 64;
pub const KRB5_AUTHDATA_IF_RELEVANT: u32 = 1;
pub const KRB5_AUTHDATA_KDC_ISSUED: u32 = 4;
pub const KRB5_AUTHDATA_AND_OR: u32 = 5;
pub const KRB5_AUTHDATA_MANDATORY_FOR_KDC: u32 = 8;
pub const KRB5_AUTHDATA_INITIAL_VERIFIED_CAS: u32 = 9;
pub const KRB5_AUTHDATA_OSF_DCE: u32 = 64;
pub const KRB5_AUTHDATA_SESAME: u32 = 65;
pub const KRB5_AUTHDATA_CAMMAC: u32 = 96;
pub const KRB5_AUTHDATA_WIN2K_PAC: u32 = 128;
pub const KRB5_AUTHDATA_ETYPE_NEGOTIATION: u32 = 129;
pub const KRB5_AUTHDATA_SIGNTICKET: u32 = 512;
pub const KRB5_AUTHDATA_FX_ARMOR: u32 = 71;
pub const KRB5_AUTHDATA_AUTH_INDICATOR: u32 = 97;
pub const KRB5_AUTHDATA_AP_OPTIONS: u32 = 143;
pub const KRB5_KPASSWD_SUCCESS: u32 = 0;
pub const KRB5_KPASSWD_MALFORMED: u32 = 1;
pub const KRB5_KPASSWD_HARDERROR: u32 = 2;
pub const KRB5_KPASSWD_AUTHERROR: u32 = 3;
pub const KRB5_KPASSWD_SOFTERROR: u32 = 4;
pub const KRB5_KPASSWD_ACCESSDENIED: u32 = 5;
pub const KRB5_KPASSWD_BAD_VERSION: u32 = 6;
pub const KRB5_KPASSWD_INITIAL_FLAG_NEEDED: u32 = 7;
pub const KRB5_AUTH_CONTEXT_DO_TIME: u32 = 1;
pub const KRB5_AUTH_CONTEXT_RET_TIME: u32 = 2;
pub const KRB5_AUTH_CONTEXT_DO_SEQUENCE: u32 = 4;
pub const KRB5_AUTH_CONTEXT_RET_SEQUENCE: u32 = 8;
pub const KRB5_AUTH_CONTEXT_PERMIT_ALL: u32 = 16;
pub const KRB5_AUTH_CONTEXT_USE_SUBKEY: u32 = 32;
pub const KRB5_AUTH_CONTEXT_GENERATE_LOCAL_ADDR: u32 = 1;
pub const KRB5_AUTH_CONTEXT_GENERATE_REMOTE_ADDR: u32 = 2;
pub const KRB5_AUTH_CONTEXT_GENERATE_LOCAL_FULL_ADDR: u32 = 4;
pub const KRB5_AUTH_CONTEXT_GENERATE_REMOTE_FULL_ADDR: u32 = 8;
pub const KRB5_TC_MATCH_TIMES: u32 = 1;
pub const KRB5_TC_MATCH_IS_SKEY: u32 = 2;
pub const KRB5_TC_MATCH_FLAGS: u32 = 4;
pub const KRB5_TC_MATCH_TIMES_EXACT: u32 = 8;
pub const KRB5_TC_MATCH_FLAGS_EXACT: u32 = 16;
pub const KRB5_TC_MATCH_AUTHDATA: u32 = 32;
pub const KRB5_TC_MATCH_SRV_NAMEONLY: u32 = 64;
pub const KRB5_TC_MATCH_2ND_TKT: u32 = 128;
pub const KRB5_TC_MATCH_KTYPE: u32 = 256;
pub const KRB5_TC_SUPPORTED_KTYPES: u32 = 512;
pub const KRB5_TC_OPENCLOSE: u32 = 1;
pub const KRB5_TC_NOTICKET: u32 = 2;
pub const MAX_KEYTAB_NAME_LEN: u32 = 1100;
pub const KRB5_INIT_CONTEXT_SECURE: u32 = 1;
pub const KRB5_INIT_CONTEXT_KDC: u32 = 2;
pub const KRB5_GC_USER_USER: u32 = 1;
pub const KRB5_GC_CACHED: u32 = 2;
pub const KRB5_GC_CANONICALIZE: u32 = 4;
pub const KRB5_GC_NO_STORE: u32 = 8;
pub const KRB5_GC_FORWARDABLE: u32 = 16;
pub const KRB5_GC_NO_TRANSIT_CHECK: u32 = 32;
pub const KRB5_GC_CONSTRAINED_DELEGATION: u32 = 64;
pub const KRB5_PRINCIPAL_PARSE_NO_REALM: u32 = 1;
pub const KRB5_PRINCIPAL_PARSE_REQUIRE_REALM: u32 = 2;
pub const KRB5_PRINCIPAL_PARSE_ENTERPRISE: u32 = 4;
pub const KRB5_PRINCIPAL_PARSE_IGNORE_REALM: u32 = 8;
pub const KRB5_PRINCIPAL_PARSE_NO_DEF_REALM: u32 = 16;
pub const KRB5_PRINCIPAL_UNPARSE_SHORT: u32 = 1;
pub const KRB5_PRINCIPAL_UNPARSE_NO_REALM: u32 = 2;
pub const KRB5_PRINCIPAL_UNPARSE_DISPLAY: u32 = 4;
pub const KRB5_PRINCIPAL_COMPARE_IGNORE_REALM: u32 = 1;
pub const KRB5_PRINCIPAL_COMPARE_ENTERPRISE: u32 = 2;
pub const KRB5_PRINCIPAL_COMPARE_CASEFOLD: u32 = 4;
pub const KRB5_PRINCIPAL_COMPARE_UTF8: u32 = 8;
pub const KRB5_REALM_BRANCH_CHAR: u8 = 46u8;
pub const KRB5_TGS_NAME: &[u8; 7usize] = b"krbtgt\0";
pub const KRB5_TGS_NAME_SIZE: u32 = 6;
pub const KRB5_RECVAUTH_SKIP_VERSION: u32 = 1;
pub const KRB5_RECVAUTH_BADAUTHVERS: u32 = 2;
pub const KRB5_RESPONDER_QUESTION_PASSWORD: &[u8; 9usize] = b"password\0";
pub const KRB5_RESPONDER_QUESTION_OTP: &[u8; 4usize] = b"otp\0";
pub const KRB5_RESPONDER_OTP_FORMAT_DECIMAL: u32 = 0;
pub const KRB5_RESPONDER_OTP_FORMAT_HEXADECIMAL: u32 = 1;
pub const KRB5_RESPONDER_OTP_FORMAT_ALPHANUMERIC: u32 = 2;
pub const KRB5_RESPONDER_OTP_FLAGS_COLLECT_TOKEN: u32 = 1;
pub const KRB5_RESPONDER_OTP_FLAGS_COLLECT_PIN: u32 = 2;
pub const KRB5_RESPONDER_OTP_FLAGS_NEXTOTP: u32 = 4;
pub const KRB5_RESPONDER_OTP_FLAGS_SEPARATE_PIN: u32 = 8;
pub const KRB5_RESPONDER_QUESTION_PKINIT: &[u8; 7usize] = b"pkinit\0";
pub const KRB5_RESPONDER_PKINIT_FLAGS_TOKEN_USER_PIN_COUNT_LOW: u32 = 1;
pub const KRB5_RESPONDER_PKINIT_FLAGS_TOKEN_USER_PIN_FINAL_TRY: u32 = 2;
pub const KRB5_RESPONDER_PKINIT_FLAGS_TOKEN_USER_PIN_LOCKED: u32 = 4;
pub const KRB5_GET_INIT_CREDS_OPT_TKT_LIFE: u32 = 1;
pub const KRB5_GET_INIT_CREDS_OPT_RENEW_LIFE: u32 = 2;
pub const KRB5_GET_INIT_CREDS_OPT_FORWARDABLE: u32 = 4;
pub const KRB5_GET_INIT_CREDS_OPT_PROXIABLE: u32 = 8;
pub const KRB5_GET_INIT_CREDS_OPT_ETYPE_LIST: u32 = 16;
pub const KRB5_GET_INIT_CREDS_OPT_ADDRESS_LIST: u32 = 32;
pub const KRB5_GET_INIT_CREDS_OPT_PREAUTH_LIST: u32 = 64;
pub const KRB5_GET_INIT_CREDS_OPT_SALT: u32 = 128;
pub const KRB5_GET_INIT_CREDS_OPT_CHG_PWD_PRMPT: u32 = 256;
pub const KRB5_GET_INIT_CREDS_OPT_CANONICALIZE: u32 = 512;
pub const KRB5_GET_INIT_CREDS_OPT_ANONYMOUS: u32 = 1024;
pub const KRB5_FAST_REQUIRED: u32 = 1;
pub const KRB5_INIT_CREDS_STEP_FLAG_CONTINUE: u32 = 1;
pub const KRB5_TKT_CREDS_STEP_FLAG_CONTINUE: u32 = 1;
pub const KRB5_VERIFY_INIT_CREDS_OPT_AP_REQ_NOFAIL: u32 = 1;
pub const KRB5_PROMPT_TYPE_PASSWORD: u32 = 1;
pub const KRB5_PROMPT_TYPE_NEW_PASSWORD: u32 = 2;
pub const KRB5_PROMPT_TYPE_NEW_PASSWORD_AGAIN: u32 = 3;
pub const KRB5_PROMPT_TYPE_PREAUTH: u32 = 4;
pub const KRB5_PAC_LOGON_INFO: u32 = 1;
pub const KRB5_PAC_CREDENTIALS_INFO: u32 = 2;
pub const KRB5_PAC_SERVER_CHECKSUM: u32 = 6;
pub const KRB5_PAC_PRIVSVR_CHECKSUM: u32 = 7;
pub const KRB5_PAC_CLIENT_INFO: u32 = 10;
pub const KRB5_PAC_DELEGATION_INFO: u32 = 11;
pub const KRB5_PAC_UPN_DNS_INFO: u32 = 12;
pub const KRB5KDC_ERR_NONE: i32 = -1765328384;
pub const KRB5KDC_ERR_NAME_EXP: i32 = -1765328383;
pub const KRB5KDC_ERR_SERVICE_EXP: i32 = -1765328382;
pub const KRB5KDC_ERR_BAD_PVNO: i32 = -1765328381;
pub const KRB5KDC_ERR_C_OLD_MAST_KVNO: i32 = -1765328380;
pub const KRB5KDC_ERR_S_OLD_MAST_KVNO: i32 = -1765328379;
pub const KRB5KDC_ERR_C_PRINCIPAL_UNKNOWN: i32 = -1765328378;
pub const KRB5KDC_ERR_S_PRINCIPAL_UNKNOWN: i32 = -1765328377;
pub const KRB5KDC_ERR_PRINCIPAL_NOT_UNIQUE: i32 = -1765328376;
pub const KRB5KDC_ERR_NULL_KEY: i32 = -1765328375;
pub const KRB5KDC_ERR_CANNOT_POSTDATE: i32 = -1765328374;
pub const KRB5KDC_ERR_NEVER_VALID: i32 = -1765328373;
pub const KRB5KDC_ERR_POLICY: i32 = -1765328372;
pub const KRB5KDC_ERR_BADOPTION: i32 = -1765328371;
pub const KRB5KDC_ERR_ETYPE_NOSUPP: i32 = -1765328370;
pub const KRB5KDC_ERR_SUMTYPE_NOSUPP: i32 = -1765328369;
pub const KRB5KDC_ERR_PADATA_TYPE_NOSUPP: i32 = -1765328368;
pub const KRB5KDC_ERR_TRTYPE_NOSUPP: i32 = -1765328367;
pub const KRB5KDC_ERR_CLIENT_REVOKED: i32 = -1765328366;
pub const KRB5KDC_ERR_SERVICE_REVOKED: i32 = -1765328365;
pub const KRB5KDC_ERR_TGT_REVOKED: i32 = -1765328364;
pub const KRB5KDC_ERR_CLIENT_NOTYET: i32 = -1765328363;
pub const KRB5KDC_ERR_SERVICE_NOTYET: i32 = -1765328362;
pub const KRB5KDC_ERR_KEY_EXP: i32 = -1765328361;
pub const KRB5KDC_ERR_PREAUTH_FAILED: i32 = -1765328360;
pub const KRB5KDC_ERR_PREAUTH_REQUIRED: i32 = -1765328359;
pub const KRB5KDC_ERR_SERVER_NOMATCH: i32 = -1765328358;
pub const KRB5KDC_ERR_MUST_USE_USER2USER: i32 = -1765328357;
pub const KRB5KDC_ERR_PATH_NOT_ACCEPTED: i32 = -1765328356;
pub const KRB5KDC_ERR_SVC_UNAVAILABLE: i32 = -1765328355;
pub const KRB5PLACEHOLD_30: i32 = -1765328354;
pub const KRB5KRB_AP_ERR_BAD_INTEGRITY: i32 = -1765328353;
pub const KRB5KRB_AP_ERR_TKT_EXPIRED: i32 = -1765328352;
pub const KRB5KRB_AP_ERR_TKT_NYV: i32 = -1765328351;
pub const KRB5KRB_AP_ERR_REPEAT: i32 = -1765328350;
pub const KRB5KRB_AP_ERR_NOT_US: i32 = -1765328349;
pub const KRB5KRB_AP_ERR_BADMATCH: i32 = -1765328348;
pub const KRB5KRB_AP_ERR_SKEW: i32 = -1765328347;
pub const KRB5KRB_AP_ERR_BADADDR: i32 = -1765328346;
pub const KRB5KRB_AP_ERR_BADVERSION: i32 = -1765328345;
pub const KRB5KRB_AP_ERR_MSG_TYPE: i32 = -1765328344;
pub const KRB5KRB_AP_ERR_MODIFIED: i32 = -1765328343;
pub const KRB5KRB_AP_ERR_BADORDER: i32 = -1765328342;
pub const KRB5KRB_AP_ERR_ILL_CR_TKT: i32 = -1765328341;
pub const KRB5KRB_AP_ERR_BADKEYVER: i32 = -1765328340;
pub const KRB5KRB_AP_ERR_NOKEY: i32 = -1765328339;
pub const KRB5KRB_AP_ERR_MUT_FAIL: i32 = -1765328338;
pub const KRB5KRB_AP_ERR_BADDIRECTION: i32 = -1765328337;
pub const KRB5KRB_AP_ERR_METHOD: i32 = -1765328336;
pub const KRB5KRB_AP_ERR_BADSEQ: i32 = -1765328335;
pub const KRB5KRB_AP_ERR_INAPP_CKSUM: i32 = -1765328334;
pub const KRB5KRB_AP_PATH_NOT_ACCEPTED: i32 = -1765328333;
pub const KRB5KRB_ERR_RESPONSE_TOO_BIG: i32 = -1765328332;
pub const KRB5PLACEHOLD_53: i32 = -1765328331;
pub const KRB5PLACEHOLD_54: i32 = -1765328330;
pub const KRB5PLACEHOLD_55: i32 = -1765328329;
pub const KRB5PLACEHOLD_56: i32 = -1765328328;
pub const KRB5PLACEHOLD_57: i32 = -1765328327;
pub const KRB5PLACEHOLD_58: i32 = -1765328326;
pub const KRB5PLACEHOLD_59: i32 = -1765328325;
pub const KRB5KRB_ERR_GENERIC: i32 = -1765328324;
pub const KRB5KRB_ERR_FIELD_TOOLONG: i32 = -1765328323;
pub const KRB5KDC_ERR_CLIENT_NOT_TRUSTED: i32 = -1765328322;
pub const KRB5KDC_ERR_KDC_NOT_TRUSTED: i32 = -1765328321;
pub const KRB5KDC_ERR_INVALID_SIG: i32 = -1765328320;
pub const KRB5KDC_ERR_DH_KEY_PARAMETERS_NOT_ACCEPTED: i32 = -1765328319;
pub const KRB5KDC_ERR_CERTIFICATE_MISMATCH: i32 = -1765328318;
pub const KRB5KRB_AP_ERR_NO_TGT: i32 = -1765328317;
pub const KRB5KDC_ERR_WRONG_REALM: i32 = -1765328316;
pub const KRB5KRB_AP_ERR_USER_TO_USER_REQUIRED: i32 = -1765328315;
pub const KRB5KDC_ERR_CANT_VERIFY_CERTIFICATE: i32 = -1765328314;
pub const KRB5KDC_ERR_INVALID_CERTIFICATE: i32 = -1765328313;
pub const KRB5KDC_ERR_REVOKED_CERTIFICATE: i32 = -1765328312;
pub const KRB5KDC_ERR_REVOCATION_STATUS_UNKNOWN: i32 = -1765328311;
pub const KRB5KDC_ERR_REVOCATION_STATUS_UNAVAILABLE: i32 = -1765328310;
pub const KRB5KDC_ERR_CLIENT_NAME_MISMATCH: i32 = -1765328309;
pub const KRB5KDC_ERR_KDC_NAME_MISMATCH: i32 = -1765328308;
pub const KRB5KDC_ERR_INCONSISTENT_KEY_PURPOSE: i32 = -1765328307;
pub const KRB5KDC_ERR_DIGEST_IN_CERT_NOT_ACCEPTED: i32 = -1765328306;
pub const KRB5KDC_ERR_PA_CHECKSUM_MUST_BE_INCLUDED: i32 = -1765328305;
pub const KRB5KDC_ERR_DIGEST_IN_SIGNED_DATA_NOT_ACCEPTED: i32 = -1765328304;
pub const KRB5KDC_ERR_PUBLIC_KEY_ENCRYPTION_NOT_SUPPORTED: i32 = -1765328303;
pub const KRB5PLACEHOLD_82: i32 = -1765328302;
pub const KRB5PLACEHOLD_83: i32 = -1765328301;
pub const KRB5PLACEHOLD_84: i32 = -1765328300;
pub const KRB5KRB_AP_ERR_IAKERB_KDC_NOT_FOUND: i32 = -1765328299;
pub const KRB5KRB_AP_ERR_IAKERB_KDC_NO_RESPONSE: i32 = -1765328298;
pub const KRB5PLACEHOLD_87: i32 = -1765328297;
pub const KRB5PLACEHOLD_88: i32 = -1765328296;
pub const KRB5PLACEHOLD_89: i32 = -1765328295;
pub const KRB5KDC_ERR_PREAUTH_EXPIRED: i32 = -1765328294;
pub const KRB5KDC_ERR_MORE_PREAUTH_DATA_REQUIRED: i32 = -1765328293;
pub const KRB5PLACEHOLD_92: i32 = -1765328292;
pub const KRB5KDC_ERR_UNKNOWN_CRITICAL_FAST_OPTION: i32 = -1765328291;
pub const KRB5PLACEHOLD_94: i32 = -1765328290;
pub const KRB5PLACEHOLD_95: i32 = -1765328289;
pub const KRB5PLACEHOLD_96: i32 = -1765328288;
pub const KRB5PLACEHOLD_97: i32 = -1765328287;
pub const KRB5PLACEHOLD_98: i32 = -1765328286;
pub const KRB5PLACEHOLD_99: i32 = -1765328285;
pub const KRB5KDC_ERR_NO_ACCEPTABLE_KDF: i32 = -1765328284;
pub const KRB5PLACEHOLD_101: i32 = -1765328283;
pub const KRB5PLACEHOLD_102: i32 = -1765328282;
pub const KRB5PLACEHOLD_103: i32 = -1765328281;
pub const KRB5PLACEHOLD_104: i32 = -1765328280;
pub const KRB5PLACEHOLD_105: i32 = -1765328279;
pub const KRB5PLACEHOLD_106: i32 = -1765328278;
pub const KRB5PLACEHOLD_107: i32 = -1765328277;
pub const KRB5PLACEHOLD_108: i32 = -1765328276;
pub const KRB5PLACEHOLD_109: i32 = -1765328275;
pub const KRB5PLACEHOLD_110: i32 = -1765328274;
pub const KRB5PLACEHOLD_111: i32 = -1765328273;
pub const KRB5PLACEHOLD_112: i32 = -1765328272;
pub const KRB5PLACEHOLD_113: i32 = -1765328271;
pub const KRB5PLACEHOLD_114: i32 = -1765328270;
pub const KRB5PLACEHOLD_115: i32 = -1765328269;
pub const KRB5PLACEHOLD_116: i32 = -1765328268;
pub const KRB5PLACEHOLD_117: i32 = -1765328267;
pub const KRB5PLACEHOLD_118: i32 = -1765328266;
pub const KRB5PLACEHOLD_119: i32 = -1765328265;
pub const KRB5PLACEHOLD_120: i32 = -1765328264;
pub const KRB5PLACEHOLD_121: i32 = -1765328263;
pub const KRB5PLACEHOLD_122: i32 = -1765328262;
pub const KRB5PLACEHOLD_123: i32 = -1765328261;
pub const KRB5PLACEHOLD_124: i32 = -1765328260;
pub const KRB5PLACEHOLD_125: i32 = -1765328259;
pub const KRB5PLACEHOLD_126: i32 = -1765328258;
pub const KRB5PLACEHOLD_127: i32 = -1765328257;
pub const KRB5_ERR_RCSID: i32 = -1765328256;
pub const KRB5_LIBOS_BADLOCKFLAG: i32 = -1765328255;
pub const KRB5_LIBOS_CANTREADPWD: i32 = -1765328254;
pub const KRB5_LIBOS_BADPWDMATCH: i32 = -1765328253;
pub const KRB5_LIBOS_PWDINTR: i32 = -1765328252;
pub const KRB5_PARSE_ILLCHAR: i32 = -1765328251;
pub const KRB5_PARSE_MALFORMED: i32 = -1765328250;
pub const KRB5_CONFIG_CANTOPEN: i32 = -1765328249;
pub const KRB5_CONFIG_BADFORMAT: i32 = -1765328248;
pub const KRB5_CONFIG_NOTENUFSPACE: i32 = -1765328247;
pub const KRB5_BADMSGTYPE: i32 = -1765328246;
pub const KRB5_CC_BADNAME: i32 = -1765328245;
pub const KRB5_CC_UNKNOWN_TYPE: i32 = -1765328244;
pub const KRB5_CC_NOTFOUND: i32 = -1765328243;
pub const KRB5_CC_END: i32 = -1765328242;
pub const KRB5_NO_TKT_SUPPLIED: i32 = -1765328241;
pub const KRB5KRB_AP_WRONG_PRINC: i32 = -1765328240;
pub const KRB5KRB_AP_ERR_TKT_INVALID: i32 = -1765328239;
pub const KRB5_PRINC_NOMATCH: i32 = -1765328238;
pub const KRB5_KDCREP_MODIFIED: i32 = -1765328237;
pub const KRB5_KDCREP_SKEW: i32 = -1765328236;
pub const KRB5_IN_TKT_REALM_MISMATCH: i32 = -1765328235;
pub const KRB5_PROG_ETYPE_NOSUPP: i32 = -1765328234;
pub const KRB5_PROG_KEYTYPE_NOSUPP: i32 = -1765328233;
pub const KRB5_WRONG_ETYPE: i32 = -1765328232;
pub const KRB5_PROG_SUMTYPE_NOSUPP: i32 = -1765328231;
pub const KRB5_REALM_UNKNOWN: i32 = -1765328230;
pub const KRB5_SERVICE_UNKNOWN: i32 = -1765328229;
pub const KRB5_KDC_UNREACH: i32 = -1765328228;
pub const KRB5_NO_LOCALNAME: i32 = -1765328227;
pub const KRB5_MUTUAL_FAILED: i32 = -1765328226;
pub const KRB5_RC_TYPE_EXISTS: i32 = -1765328225;
pub const KRB5_RC_MALLOC: i32 = -1765328224;
pub const KRB5_RC_TYPE_NOTFOUND: i32 = -1765328223;
pub const KRB5_RC_UNKNOWN: i32 = -1765328222;
pub const KRB5_RC_REPLAY: i32 = -1765328221;
pub const KRB5_RC_IO: i32 = -1765328220;
pub const KRB5_RC_NOIO: i32 = -1765328219;
pub const KRB5_RC_PARSE: i32 = -1765328218;
pub const KRB5_RC_IO_EOF: i32 = -1765328217;
pub const KRB5_RC_IO_MALLOC: i32 = -1765328216;
pub const KRB5_RC_IO_PERM: i32 = -1765328215;
pub const KRB5_RC_IO_IO: i32 = -1765328214;
pub const KRB5_RC_IO_UNKNOWN: i32 = -1765328213;
pub const KRB5_RC_IO_SPACE: i32 = -1765328212;
pub const KRB5_TRANS_CANTOPEN: i32 = -1765328211;
pub const KRB5_TRANS_BADFORMAT: i32 = -1765328210;
pub const KRB5_LNAME_CANTOPEN: i32 = -1765328209;
pub const KRB5_LNAME_NOTRANS: i32 = -1765328208;
pub const KRB5_LNAME_BADFORMAT: i32 = -1765328207;
pub const KRB5_CRYPTO_INTERNAL: i32 = -1765328206;
pub const KRB5_KT_BADNAME: i32 = -1765328205;
pub const KRB5_KT_UNKNOWN_TYPE: i32 = -1765328204;
pub const KRB5_KT_NOTFOUND: i32 = -1765328203;
pub const KRB5_KT_END: i32 = -1765328202;
pub const KRB5_KT_NOWRITE: i32 = -1765328201;
pub const KRB5_KT_IOERR: i32 = -1765328200;
pub const KRB5_NO_TKT_IN_RLM: i32 = -1765328199;
pub const KRB5DES_BAD_KEYPAR: i32 = -1765328198;
pub const KRB5DES_WEAK_KEY: i32 = -1765328197;
pub const KRB5_BAD_ENCTYPE: i32 = -1765328196;
pub const KRB5_BAD_KEYSIZE: i32 = -1765328195;
pub const KRB5_BAD_MSIZE: i32 = -1765328194;
pub const KRB5_CC_TYPE_EXISTS: i32 = -1765328193;
pub const KRB5_KT_TYPE_EXISTS: i32 = -1765328192;
pub const KRB5_CC_IO: i32 = -1765328191;
pub const KRB5_FCC_PERM: i32 = -1765328190;
pub const KRB5_FCC_NOFILE: i32 = -1765328189;
pub const KRB5_FCC_INTERNAL: i32 = -1765328188;
pub const KRB5_CC_WRITE: i32 = -1765328187;
pub const KRB5_CC_NOMEM: i32 = -1765328186;
pub const KRB5_CC_FORMAT: i32 = -1765328185;
pub const KRB5_CC_NOT_KTYPE: i32 = -1765328184;
pub const KRB5_INVALID_FLAGS: i32 = -1765328183;
pub const KRB5_NO_2ND_TKT: i32 = -1765328182;
pub const KRB5_NOCREDS_SUPPLIED: i32 = -1765328181;
pub const KRB5_SENDAUTH_BADAUTHVERS: i32 = -1765328180;
pub const KRB5_SENDAUTH_BADAPPLVERS: i32 = -1765328179;
pub const KRB5_SENDAUTH_BADRESPONSE: i32 = -1765328178;
pub const KRB5_SENDAUTH_REJECTED: i32 = -1765328177;
pub const KRB5_PREAUTH_BAD_TYPE: i32 = -1765328176;
pub const KRB5_PREAUTH_NO_KEY: i32 = -1765328175;
pub const KRB5_PREAUTH_FAILED: i32 = -1765328174;
pub const KRB5_RCACHE_BADVNO: i32 = -1765328173;
pub const KRB5_CCACHE_BADVNO: i32 = -1765328172;
pub const KRB5_KEYTAB_BADVNO: i32 = -1765328171;
pub const KRB5_PROG_ATYPE_NOSUPP: i32 = -1765328170;
pub const KRB5_RC_REQUIRED: i32 = -1765328169;
pub const KRB5_ERR_BAD_HOSTNAME: i32 = -1765328168;
pub const KRB5_ERR_HOST_REALM_UNKNOWN: i32 = -1765328167;
pub const KRB5_SNAME_UNSUPP_NAMETYPE: i32 = -1765328166;
pub const KRB5KRB_AP_ERR_V4_REPLY: i32 = -1765328165;
pub const KRB5_REALM_CANT_RESOLVE: i32 = -1765328164;
pub const KRB5_TKT_NOT_FORWARDABLE: i32 = -1765328163;
pub const KRB5_FWD_BAD_PRINCIPAL: i32 = -1765328162;
pub const KRB5_GET_IN_TKT_LOOP: i32 = -1765328161;
pub const KRB5_CONFIG_NODEFREALM: i32 = -1765328160;
pub const KRB5_SAM_UNSUPPORTED: i32 = -1765328159;
pub const KRB5_SAM_INVALID_ETYPE: i32 = -1765328158;
pub const KRB5_SAM_NO_CHECKSUM: i32 = -1765328157;
pub const KRB5_SAM_BAD_CHECKSUM: i32 = -1765328156;
pub const KRB5_KT_NAME_TOOLONG: i32 = -1765328155;
pub const KRB5_KT_KVNONOTFOUND: i32 = -1765328154;
pub const KRB5_APPL_EXPIRED: i32 = -1765328153;
pub const KRB5_LIB_EXPIRED: i32 = -1765328152;
pub const KRB5_CHPW_PWDNULL: i32 = -1765328151;
pub const KRB5_CHPW_FAIL: i32 = -1765328150;
pub const KRB5_KT_FORMAT: i32 = -1765328149;
pub const KRB5_NOPERM_ETYPE: i32 = -1765328148;
pub const KRB5_CONFIG_ETYPE_NOSUPP: i32 = -1765328147;
pub const KRB5_OBSOLETE_FN: i32 = -1765328146;
pub const KRB5_EAI_FAIL: i32 = -1765328145;
pub const KRB5_EAI_NODATA: i32 = -1765328144;
pub const KRB5_EAI_NONAME: i32 = -1765328143;
pub const KRB5_EAI_SERVICE: i32 = -1765328142;
pub const KRB5_ERR_NUMERIC_REALM: i32 = -1765328141;
pub const KRB5_ERR_BAD_S2K_PARAMS: i32 = -1765328140;
pub const KRB5_ERR_NO_SERVICE: i32 = -1765328139;
pub const KRB5_CC_READONLY: i32 = -1765328138;
pub const KRB5_CC_NOSUPP: i32 = -1765328137;
pub const KRB5_DELTAT_BADFORMAT: i32 = -1765328136;
pub const KRB5_PLUGIN_NO_HANDLE: i32 = -1765328135;
pub const KRB5_PLUGIN_OP_NOTSUPP: i32 = -1765328134;
pub const KRB5_ERR_INVALID_UTF8: i32 = -1765328133;
pub const KRB5_ERR_FAST_REQUIRED: i32 = -1765328132;
pub const KRB5_LOCAL_ADDR_REQUIRED: i32 = -1765328131;
pub const KRB5_REMOTE_ADDR_REQUIRED: i32 = -1765328130;
pub const KRB5_TRACE_NOSUPP: i32 = -1765328129;
pub const ERROR_TABLE_BASE_krb5: i32 = -1765328384;
pub const krb5_err_base: i32 = -1765328384;
pub const KRB5_PLUGIN_VER_NOTSUPP: i32 = -1750600192;
pub const KRB5_PLUGIN_BAD_MODULE_SPEC: i32 = -1750600191;
pub const KRB5_PLUGIN_NAME_NOTFOUND: i32 = -1750600190;
pub const KRB5KDC_ERR_DISCARD: i32 = -1750600189;
pub const KRB5_DCC_CANNOT_CREATE: i32 = -1750600188;
pub const KRB5_KCC_INVALID_ANCHOR: i32 = -1750600187;
pub const KRB5_KCC_UNKNOWN_VERSION: i32 = -1750600186;
pub const KRB5_KCC_INVALID_UID: i32 = -1750600185;
pub const KRB5_KCM_MALFORMED_REPLY: i32 = -1750600184;
pub const KRB5_KCM_RPC_ERROR: i32 = -1750600183;
pub const KRB5_KCM_REPLY_TOO_BIG: i32 = -1750600182;
pub const KRB5_KCM_NO_SERVER: i32 = -1750600181;
pub const KRB5_CERTAUTH_HWAUTH: i32 = -1750600180;
pub const ERROR_TABLE_BASE_k5e1: i32 = -1750600192;
pub const k5e1_err_base: i32 = -1750600192;
pub const KRB5_KDB_RCSID: i32 = -1780008448;
pub const KRB5_KDB_INUSE: i32 = -1780008447;
pub const KRB5_KDB_UK_SERROR: i32 = -1780008446;
pub const KRB5_KDB_UK_RERROR: i32 = -1780008445;
pub const KRB5_KDB_UNAUTH: i32 = -1780008444;
pub const KRB5_KDB_NOENTRY: i32 = -1780008443;
pub const KRB5_KDB_ILL_WILDCARD: i32 = -1780008442;
pub const KRB5_KDB_DB_INUSE: i32 = -1780008441;
pub const KRB5_KDB_DB_CHANGED: i32 = -1780008440;
pub const KRB5_KDB_TRUNCATED_RECORD: i32 = -1780008439;
pub const KRB5_KDB_RECURSIVELOCK: i32 = -1780008438;
pub const KRB5_KDB_NOTLOCKED: i32 = -1780008437;
pub const KRB5_KDB_BADLOCKMODE: i32 = -1780008436;
pub const KRB5_KDB_DBNOTINITED: i32 = -1780008435;
pub const KRB5_KDB_DBINITED: i32 = -1780008434;
pub const KRB5_KDB_ILLDIRECTION: i32 = -1780008433;
pub const KRB5_KDB_NOMASTERKEY: i32 = -1780008432;
pub const KRB5_KDB_BADMASTERKEY: i32 = -1780008431;
pub const KRB5_KDB_INVALIDKEYSIZE: i32 = -1780008430;
pub const KRB5_KDB_CANTREAD_STORED: i32 = -1780008429;
pub const KRB5_KDB_BADSTORED_MKEY: i32 = -1780008428;
pub const KRB5_KDB_NOACTMASTERKEY: i32 = -1780008427;
pub const KRB5_KDB_KVNONOMATCH: i32 = -1780008426;
pub const KRB5_KDB_STORED_MKEY_NOTCURRENT: i32 = -1780008425;
pub const KRB5_KDB_CANTLOCK_DB: i32 = -1780008424;
pub const KRB5_KDB_DB_CORRUPT: i32 = -1780008423;
pub const KRB5_KDB_BAD_VERSION: i32 = -1780008422;
pub const KRB5_KDB_BAD_SALTTYPE: i32 = -1780008421;
pub const KRB5_KDB_BAD_ENCTYPE: i32 = -1780008420;
pub const KRB5_KDB_BAD_CREATEFLAGS: i32 = -1780008419;
pub const KRB5_KDB_NO_PERMITTED_KEY: i32 = -1780008418;
pub const KRB5_KDB_NO_MATCHING_KEY: i32 = -1780008417;
pub const KRB5_KDB_DBTYPE_NOTFOUND: i32 = -1780008416;
pub const KRB5_KDB_DBTYPE_NOSUP: i32 = -1780008415;
pub const KRB5_KDB_DBTYPE_INIT: i32 = -1780008414;
pub const KRB5_KDB_SERVER_INTERNAL_ERR: i32 = -1780008413;
pub const KRB5_KDB_ACCESS_ERROR: i32 = -1780008412;
pub const KRB5_KDB_INTERNAL_ERROR: i32 = -1780008411;
pub const KRB5_KDB_CONSTRAINT_VIOLATION: i32 = -1780008410;
pub const KRB5_LOG_CONV: i32 = -1780008409;
pub const KRB5_LOG_UNSTABLE: i32 = -1780008408;
pub const KRB5_LOG_CORRUPT: i32 = -1780008407;
pub const KRB5_LOG_ERROR: i32 = -1780008406;
pub const KRB5_KDB_DBTYPE_MISMATCH: i32 = -1780008405;
pub const KRB5_KDB_POLICY_REF: i32 = -1780008404;
pub const KRB5_KDB_STRINGS_TOOLONG: i32 = -1780008403;
pub const ERROR_TABLE_BASE_kdb5: i32 = -1780008448;
pub const kdb5_err_base: i32 = -1780008448;
pub const KV5M_NONE: i32 = -1760647424;
pub const KV5M_PRINCIPAL: i32 = -1760647423;
pub const KV5M_DATA: i32 = -1760647422;
pub const KV5M_KEYBLOCK: i32 = -1760647421;
pub const KV5M_CHECKSUM: i32 = -1760647420;
pub const KV5M_ENCRYPT_BLOCK: i32 = -1760647419;
pub const KV5M_ENC_DATA: i32 = -1760647418;
pub const KV5M_CRYPTOSYSTEM_ENTRY: i32 = -1760647417;
pub const KV5M_CS_TABLE_ENTRY: i32 = -1760647416;
pub const KV5M_CHECKSUM_ENTRY: i32 = -1760647415;
pub const KV5M_AUTHDATA: i32 = -1760647414;
pub const KV5M_TRANSITED: i32 = -1760647413;
pub const KV5M_ENC_TKT_PART: i32 = -1760647412;
pub const KV5M_TICKET: i32 = -1760647411;
pub const KV5M_AUTHENTICATOR: i32 = -1760647410;
pub const KV5M_TKT_AUTHENT: i32 = -1760647409;
pub const KV5M_CREDS: i32 = -1760647408;
pub const KV5M_LAST_REQ_ENTRY: i32 = -1760647407;
pub const KV5M_PA_DATA: i32 = -1760647406;
pub const KV5M_KDC_REQ: i32 = -1760647405;
pub const KV5M_ENC_KDC_REP_PART: i32 = -1760647404;
pub const KV5M_KDC_REP: i32 = -1760647403;
pub const KV5M_ERROR: i32 = -1760647402;
pub const KV5M_AP_REQ: i32 = -1760647401;
pub const KV5M_AP_REP: i32 = -1760647400;
pub const KV5M_AP_REP_ENC_PART: i32 = -1760647399;
pub const KV5M_RESPONSE: i32 = -1760647398;
pub const KV5M_SAFE: i32 = -1760647397;
pub const KV5M_PRIV: i32 = -1760647396;
pub const KV5M_PRIV_ENC_PART: i32 = -1760647395;
pub const KV5M_CRED: i32 = -1760647394;
pub const KV5M_CRED_INFO: i32 = -1760647393;
pub const KV5M_CRED_ENC_PART: i32 = -1760647392;
pub const KV5M_PWD_DATA: i32 = -1760647391;
pub const KV5M_ADDRESS: i32 = -1760647390;
pub const KV5M_KEYTAB_ENTRY: i32 = -1760647389;
pub const KV5M_CONTEXT: i32 = -1760647388;
pub const KV5M_OS_CONTEXT: i32 = -1760647387;
pub const KV5M_ALT_METHOD: i32 = -1760647386;
pub const KV5M_ETYPE_INFO_ENTRY: i32 = -1760647385;
pub const KV5M_DB_CONTEXT: i32 = -1760647384;
pub const KV5M_AUTH_CONTEXT: i32 = -1760647383;
pub const KV5M_KEYTAB: i32 = -1760647382;
pub const KV5M_RCACHE: i32 = -1760647381;
pub const KV5M_CCACHE: i32 = -1760647380;
pub const KV5M_PREAUTH_OPS: i32 = -1760647379;
pub const KV5M_SAM_CHALLENGE: i32 = -1760647378;
pub const KV5M_SAM_CHALLENGE_2: i32 = -1760647377;
pub const KV5M_SAM_KEY: i32 = -1760647376;
pub const KV5M_ENC_SAM_RESPONSE_ENC: i32 = -1760647375;
pub const KV5M_ENC_SAM_RESPONSE_ENC_2: i32 = -1760647374;
pub const KV5M_SAM_RESPONSE: i32 = -1760647373;
pub const KV5M_SAM_RESPONSE_2: i32 = -1760647372;
pub const KV5M_PREDICTED_SAM_RESPONSE: i32 = -1760647371;
pub const KV5M_PASSWD_PHRASE_ELEMENT: i32 = -1760647370;
pub const KV5M_GSS_OID: i32 = -1760647369;
pub const KV5M_GSS_QUEUE: i32 = -1760647368;
pub const KV5M_FAST_ARMORED_REQ: i32 = -1760647367;
pub const KV5M_FAST_REQ: i32 = -1760647366;
pub const KV5M_FAST_RESPONSE: i32 = -1760647365;
pub const KV5M_AUTHDATA_CONTEXT: i32 = -1760647364;
pub const ERROR_TABLE_BASE_kv5m: i32 = -1760647424;
pub const kv5m_err_base: i32 = -1760647424;
pub const KRB524_BADKEY: i32 = -1750206208;
pub const KRB524_BADADDR: i32 = -1750206207;
pub const KRB524_BADPRINC: i32 = -1750206206;
pub const KRB524_BADREALM: i32 = -1750206205;
pub const KRB524_V4ERR: i32 = -1750206204;
pub const KRB524_ENCFULL: i32 = -1750206203;
pub const KRB524_DECEMPTY: i32 = -1750206202;
pub const KRB524_NOTRESP: i32 = -1750206201;
pub const KRB524_KRB4_DISABLED: i32 = -1750206200;
pub const ERROR_TABLE_BASE_k524: i32 = -1750206208;
pub const k524_err_base: i32 = -1750206208;
pub const ASN1_BAD_TIMEFORMAT: u32 = 1859794432;
pub const ASN1_MISSING_FIELD: u32 = 1859794433;
pub const ASN1_MISPLACED_FIELD: u32 = 1859794434;
pub const ASN1_TYPE_MISMATCH: u32 = 1859794435;
pub const ASN1_OVERFLOW: u32 = 1859794436;
pub const ASN1_OVERRUN: u32 = 1859794437;
pub const ASN1_BAD_ID: u32 = 1859794438;
pub const ASN1_BAD_LENGTH: u32 = 1859794439;
pub const ASN1_BAD_FORMAT: u32 = 1859794440;
pub const ASN1_PARSE_ERROR: u32 = 1859794441;
pub const ASN1_BAD_GMTIME: u32 = 1859794442;
pub const ASN1_INDEF: u32 = 1859794443;
pub const ASN1_MISSING_EOC: u32 = 1859794444;
pub const ASN1_OMITTED: u32 = 1859794445;
pub const ERROR_TABLE_BASE_asn1: u32 = 1859794432;
pub const asn1_err_base: u32 = 1859794432;
pub type size_t = ::std::os::raw::c_ulong;
pub type wchar_t = ::std::os::raw::c_int;
pub type _Float32 = f32;
pub type _Float64 = f64;
pub type _Float32x = f64;
pub type _Float64x = u128;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct div_t {
    pub quot: ::std::os::raw::c_int,
    pub rem: ::std::os::raw::c_int,
}
#[test]
fn bindgen_test_layout_div_t() {
    assert_eq!(
        ::std::mem::size_of::<div_t>(),
        8usize,
        concat!("Size of: ", stringify!(div_t))
    );
    assert_eq!(
        ::std::mem::align_of::<div_t>(),
        4usize,
        concat!("Alignment of ", stringify!(div_t))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<div_t>())).quot as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(div_t),
            "::",
            stringify!(quot)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<div_t>())).rem as *const _ as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(div_t),
            "::",
            stringify!(rem)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct ldiv_t {
    pub quot: ::std::os::raw::c_long,
    pub rem: ::std::os::raw::c_long,
}
#[test]
fn bindgen_test_layout_ldiv_t() {
    assert_eq!(
        ::std::mem::size_of::<ldiv_t>(),
        16usize,
        concat!("Size of: ", stringify!(ldiv_t))
    );
    assert_eq!(
        ::std::mem::align_of::<ldiv_t>(),
        8usize,
        concat!("Alignment of ", stringify!(ldiv_t))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ldiv_t>())).quot as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(ldiv_t),
            "::",
            stringify!(quot)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ldiv_t>())).rem as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(ldiv_t),
            "::",
            stringify!(rem)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct lldiv_t {
    pub quot: ::std::os::raw::c_longlong,
    pub rem: ::std::os::raw::c_longlong,
}
#[test]
fn bindgen_test_layout_lldiv_t() {
    assert_eq!(
        ::std::mem::size_of::<lldiv_t>(),
        16usize,
        concat!("Size of: ", stringify!(lldiv_t))
    );
    assert_eq!(
        ::std::mem::align_of::<lldiv_t>(),
        8usize,
        concat!("Alignment of ", stringify!(lldiv_t))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<lldiv_t>())).quot as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(lldiv_t),
            "::",
            stringify!(quot)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<lldiv_t>())).rem as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(lldiv_t),
            "::",
            stringify!(rem)
        )
    );
}
extern "C" {
    pub fn __ctype_get_mb_cur_max() -> size_t;
}
extern "C" {
    pub fn atof(__nptr: *const ::std::os::raw::c_char) -> f64;
}
extern "C" {
    pub fn atoi(__nptr: *const ::std::os::raw::c_char) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn atol(__nptr: *const ::std::os::raw::c_char) -> ::std::os::raw::c_long;
}
extern "C" {
    pub fn atoll(__nptr: *const ::std::os::raw::c_char) -> ::std::os::raw::c_longlong;
}
extern "C" {
    pub fn strtod(
        __nptr: *const ::std::os::raw::c_char,
        __endptr: *mut *mut ::std::os::raw::c_char,
    ) -> f64;
}
extern "C" {
    pub fn strtof(
        __nptr: *const ::std::os::raw::c_char,
        __endptr: *mut *mut ::std::os::raw::c_char,
    ) -> f32;
}
extern "C" {
    pub fn strtold(
        __nptr: *const ::std::os::raw::c_char,
        __endptr: *mut *mut ::std::os::raw::c_char,
    ) -> u128;
}
extern "C" {
    pub fn strtol(
        __nptr: *const ::std::os::raw::c_char,
        __endptr: *mut *mut ::std::os::raw::c_char,
        __base: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_long;
}
extern "C" {
    pub fn strtoul(
        __nptr: *const ::std::os::raw::c_char,
        __endptr: *mut *mut ::std::os::raw::c_char,
        __base: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_ulong;
}
extern "C" {
    pub fn strtoq(
        __nptr: *const ::std::os::raw::c_char,
        __endptr: *mut *mut ::std::os::raw::c_char,
        __base: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_longlong;
}
extern "C" {
    pub fn strtouq(
        __nptr: *const ::std::os::raw::c_char,
        __endptr: *mut *mut ::std::os::raw::c_char,
        __base: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_ulonglong;
}
extern "C" {
    pub fn strtoll(
        __nptr: *const ::std::os::raw::c_char,
        __endptr: *mut *mut ::std::os::raw::c_char,
        __base: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_longlong;
}
extern "C" {
    pub fn strtoull(
        __nptr: *const ::std::os::raw::c_char,
        __endptr: *mut *mut ::std::os::raw::c_char,
        __base: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_ulonglong;
}
extern "C" {
    pub fn l64a(__n: ::std::os::raw::c_long) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn a64l(__s: *const ::std::os::raw::c_char) -> ::std::os::raw::c_long;
}
pub type __u_char = ::std::os::raw::c_uchar;
pub type __u_short = ::std::os::raw::c_ushort;
pub type __u_int = ::std::os::raw::c_uint;
pub type __u_long = ::std::os::raw::c_ulong;
pub type __int8_t = ::std::os::raw::c_schar;
pub type __uint8_t = ::std::os::raw::c_uchar;
pub type __int16_t = ::std::os::raw::c_short;
pub type __uint16_t = ::std::os::raw::c_ushort;
pub type __int32_t = ::std::os::raw::c_int;
pub type __uint32_t = ::std::os::raw::c_uint;
pub type __int64_t = ::std::os::raw::c_long;
pub type __uint64_t = ::std::os::raw::c_ulong;
pub type __int_least8_t = __int8_t;
pub type __uint_least8_t = __uint8_t;
pub type __int_least16_t = __int16_t;
pub type __uint_least16_t = __uint16_t;
pub type __int_least32_t = __int32_t;
pub type __uint_least32_t = __uint32_t;
pub type __int_least64_t = __int64_t;
pub type __uint_least64_t = __uint64_t;
pub type __quad_t = ::std::os::raw::c_long;
pub type __u_quad_t = ::std::os::raw::c_ulong;
pub type __intmax_t = ::std::os::raw::c_long;
pub type __uintmax_t = ::std::os::raw::c_ulong;
pub type __dev_t = ::std::os::raw::c_ulong;
pub type __uid_t = ::std::os::raw::c_uint;
pub type __gid_t = ::std::os::raw::c_uint;
pub type __ino_t = ::std::os::raw::c_ulong;
pub type __ino64_t = ::std::os::raw::c_ulong;
pub type __mode_t = ::std::os::raw::c_uint;
pub type __nlink_t = ::std::os::raw::c_ulong;
pub type __off_t = ::std::os::raw::c_long;
pub type __off64_t = ::std::os::raw::c_long;
pub type __pid_t = ::std::os::raw::c_int;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __fsid_t {
    pub __val: [::std::os::raw::c_int; 2usize],
}
#[test]
fn bindgen_test_layout___fsid_t() {
    assert_eq!(
        ::std::mem::size_of::<__fsid_t>(),
        8usize,
        concat!("Size of: ", stringify!(__fsid_t))
    );
    assert_eq!(
        ::std::mem::align_of::<__fsid_t>(),
        4usize,
        concat!("Alignment of ", stringify!(__fsid_t))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<__fsid_t>())).__val as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__fsid_t),
            "::",
            stringify!(__val)
        )
    );
}
pub type __clock_t = ::std::os::raw::c_long;
pub type __rlim_t = ::std::os::raw::c_ulong;
pub type __rlim64_t = ::std::os::raw::c_ulong;
pub type __id_t = ::std::os::raw::c_uint;
pub type __time_t = ::std::os::raw::c_long;
pub type __useconds_t = ::std::os::raw::c_uint;
pub type __suseconds_t = ::std::os::raw::c_long;
pub type __suseconds64_t = ::std::os::raw::c_long;
pub type __daddr_t = ::std::os::raw::c_int;
pub type __key_t = ::std::os::raw::c_int;
pub type __clockid_t = ::std::os::raw::c_int;
pub type __timer_t = *mut ::std::os::raw::c_void;
pub type __blksize_t = ::std::os::raw::c_long;
pub type __blkcnt_t = ::std::os::raw::c_long;
pub type __blkcnt64_t = ::std::os::raw::c_long;
pub type __fsblkcnt_t = ::std::os::raw::c_ulong;
pub type __fsblkcnt64_t = ::std::os::raw::c_ulong;
pub type __fsfilcnt_t = ::std::os::raw::c_ulong;
pub type __fsfilcnt64_t = ::std::os::raw::c_ulong;
pub type __fsword_t = ::std::os::raw::c_long;
pub type __ssize_t = ::std::os::raw::c_long;
pub type __syscall_slong_t = ::std::os::raw::c_long;
pub type __syscall_ulong_t = ::std::os::raw::c_ulong;
pub type __loff_t = __off64_t;
pub type __caddr_t = *mut ::std::os::raw::c_char;
pub type __intptr_t = ::std::os::raw::c_long;
pub type __socklen_t = ::std::os::raw::c_uint;
pub type __sig_atomic_t = ::std::os::raw::c_int;
pub type u_char = __u_char;
pub type u_short = __u_short;
pub type u_int = __u_int;
pub type u_long = __u_long;
pub type quad_t = __quad_t;
pub type u_quad_t = __u_quad_t;
pub type fsid_t = __fsid_t;
pub type loff_t = __loff_t;
pub type ino_t = __ino_t;
pub type dev_t = __dev_t;
pub type gid_t = __gid_t;
pub type mode_t = __mode_t;
pub type nlink_t = __nlink_t;
pub type uid_t = __uid_t;
pub type off_t = __off_t;
pub type pid_t = __pid_t;
pub type id_t = __id_t;
pub type ssize_t = __ssize_t;
pub type daddr_t = __daddr_t;
pub type caddr_t = __caddr_t;
pub type key_t = __key_t;
pub type clock_t = __clock_t;
pub type clockid_t = __clockid_t;
pub type time_t = __time_t;
pub type timer_t = __timer_t;
pub type ulong = ::std::os::raw::c_ulong;
pub type ushort = ::std::os::raw::c_ushort;
pub type uint = ::std::os::raw::c_uint;
pub type u_int8_t = __uint8_t;
pub type u_int16_t = __uint16_t;
pub type u_int32_t = __uint32_t;
pub type u_int64_t = __uint64_t;
pub type register_t = ::std::os::raw::c_long;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __sigset_t {
    pub __val: [::std::os::raw::c_ulong; 16usize],
}
#[test]
fn bindgen_test_layout___sigset_t() {
    assert_eq!(
        ::std::mem::size_of::<__sigset_t>(),
        128usize,
        concat!("Size of: ", stringify!(__sigset_t))
    );
    assert_eq!(
        ::std::mem::align_of::<__sigset_t>(),
        8usize,
        concat!("Alignment of ", stringify!(__sigset_t))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<__sigset_t>())).__val as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__sigset_t),
            "::",
            stringify!(__val)
        )
    );
}
pub type sigset_t = __sigset_t;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct timeval {
    pub tv_sec: __time_t,
    pub tv_usec: __suseconds_t,
}
#[test]
fn bindgen_test_layout_timeval() {
    assert_eq!(
        ::std::mem::size_of::<timeval>(),
        16usize,
        concat!("Size of: ", stringify!(timeval))
    );
    assert_eq!(
        ::std::mem::align_of::<timeval>(),
        8usize,
        concat!("Alignment of ", stringify!(timeval))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<timeval>())).tv_sec as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(timeval),
            "::",
            stringify!(tv_sec)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<timeval>())).tv_usec as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(timeval),
            "::",
            stringify!(tv_usec)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct timespec {
    pub tv_sec: __time_t,
    pub tv_nsec: __syscall_slong_t,
}
#[test]
fn bindgen_test_layout_timespec() {
    assert_eq!(
        ::std::mem::size_of::<timespec>(),
        16usize,
        concat!("Size of: ", stringify!(timespec))
    );
    assert_eq!(
        ::std::mem::align_of::<timespec>(),
        8usize,
        concat!("Alignment of ", stringify!(timespec))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<timespec>())).tv_sec as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(timespec),
            "::",
            stringify!(tv_sec)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<timespec>())).tv_nsec as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(timespec),
            "::",
            stringify!(tv_nsec)
        )
    );
}
pub type suseconds_t = __suseconds_t;
pub type __fd_mask = ::std::os::raw::c_long;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct fd_set {
    pub __fds_bits: [__fd_mask; 16usize],
}
#[test]
fn bindgen_test_layout_fd_set() {
    assert_eq!(
        ::std::mem::size_of::<fd_set>(),
        128usize,
        concat!("Size of: ", stringify!(fd_set))
    );
    assert_eq!(
        ::std::mem::align_of::<fd_set>(),
        8usize,
        concat!("Alignment of ", stringify!(fd_set))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<fd_set>())).__fds_bits as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(fd_set),
            "::",
            stringify!(__fds_bits)
        )
    );
}
pub type fd_mask = __fd_mask;
extern "C" {
    pub fn select(
        __nfds: ::std::os::raw::c_int,
        __readfds: *mut fd_set,
        __writefds: *mut fd_set,
        __exceptfds: *mut fd_set,
        __timeout: *mut timeval,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn pselect(
        __nfds: ::std::os::raw::c_int,
        __readfds: *mut fd_set,
        __writefds: *mut fd_set,
        __exceptfds: *mut fd_set,
        __timeout: *const timespec,
        __sigmask: *const __sigset_t,
    ) -> ::std::os::raw::c_int;
}
pub type blksize_t = __blksize_t;
pub type blkcnt_t = __blkcnt_t;
pub type fsblkcnt_t = __fsblkcnt_t;
pub type fsfilcnt_t = __fsfilcnt_t;
#[repr(C)]
#[derive(Copy, Clone)]
pub union __atomic_wide_counter {
    pub __value64: ::std::os::raw::c_ulonglong,
    pub __value32: __atomic_wide_counter__bindgen_ty_1,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __atomic_wide_counter__bindgen_ty_1 {
    pub __low: ::std::os::raw::c_uint,
    pub __high: ::std::os::raw::c_uint,
}
#[test]
fn bindgen_test_layout___atomic_wide_counter__bindgen_ty_1() {
    assert_eq!(
        ::std::mem::size_of::<__atomic_wide_counter__bindgen_ty_1>(),
        8usize,
        concat!("Size of: ", stringify!(__atomic_wide_counter__bindgen_ty_1))
    );
    assert_eq!(
        ::std::mem::align_of::<__atomic_wide_counter__bindgen_ty_1>(),
        4usize,
        concat!(
            "Alignment of ",
            stringify!(__atomic_wide_counter__bindgen_ty_1)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__atomic_wide_counter__bindgen_ty_1>())).__low as *const _
                as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__atomic_wide_counter__bindgen_ty_1),
            "::",
            stringify!(__low)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__atomic_wide_counter__bindgen_ty_1>())).__high as *const _
                as usize
        },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(__atomic_wide_counter__bindgen_ty_1),
            "::",
            stringify!(__high)
        )
    );
}
#[test]
fn bindgen_test_layout___atomic_wide_counter() {
    assert_eq!(
        ::std::mem::size_of::<__atomic_wide_counter>(),
        8usize,
        concat!("Size of: ", stringify!(__atomic_wide_counter))
    );
    assert_eq!(
        ::std::mem::align_of::<__atomic_wide_counter>(),
        8usize,
        concat!("Alignment of ", stringify!(__atomic_wide_counter))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<__atomic_wide_counter>())).__value64 as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__atomic_wide_counter),
            "::",
            stringify!(__value64)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<__atomic_wide_counter>())).__value32 as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__atomic_wide_counter),
            "::",
            stringify!(__value32)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __pthread_internal_list {
    pub __prev: *mut __pthread_internal_list,
    pub __next: *mut __pthread_internal_list,
}
#[test]
fn bindgen_test_layout___pthread_internal_list() {
    assert_eq!(
        ::std::mem::size_of::<__pthread_internal_list>(),
        16usize,
        concat!("Size of: ", stringify!(__pthread_internal_list))
    );
    assert_eq!(
        ::std::mem::align_of::<__pthread_internal_list>(),
        8usize,
        concat!("Alignment of ", stringify!(__pthread_internal_list))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<__pthread_internal_list>())).__prev as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__pthread_internal_list),
            "::",
            stringify!(__prev)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<__pthread_internal_list>())).__next as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(__pthread_internal_list),
            "::",
            stringify!(__next)
        )
    );
}
pub type __pthread_list_t = __pthread_internal_list;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __pthread_internal_slist {
    pub __next: *mut __pthread_internal_slist,
}
#[test]
fn bindgen_test_layout___pthread_internal_slist() {
    assert_eq!(
        ::std::mem::size_of::<__pthread_internal_slist>(),
        8usize,
        concat!("Size of: ", stringify!(__pthread_internal_slist))
    );
    assert_eq!(
        ::std::mem::align_of::<__pthread_internal_slist>(),
        8usize,
        concat!("Alignment of ", stringify!(__pthread_internal_slist))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<__pthread_internal_slist>())).__next as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__pthread_internal_slist),
            "::",
            stringify!(__next)
        )
    );
}
pub type __pthread_slist_t = __pthread_internal_slist;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __pthread_mutex_s {
    pub __lock: ::std::os::raw::c_int,
    pub __count: ::std::os::raw::c_uint,
    pub __owner: ::std::os::raw::c_int,
    pub __nusers: ::std::os::raw::c_uint,
    pub __kind: ::std::os::raw::c_int,
    pub __spins: ::std::os::raw::c_short,
    pub __elision: ::std::os::raw::c_short,
    pub __list: __pthread_list_t,
}
#[test]
fn bindgen_test_layout___pthread_mutex_s() {
    assert_eq!(
        ::std::mem::size_of::<__pthread_mutex_s>(),
        40usize,
        concat!("Size of: ", stringify!(__pthread_mutex_s))
    );
    assert_eq!(
        ::std::mem::align_of::<__pthread_mutex_s>(),
        8usize,
        concat!("Alignment of ", stringify!(__pthread_mutex_s))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<__pthread_mutex_s>())).__lock as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__pthread_mutex_s),
            "::",
            stringify!(__lock)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<__pthread_mutex_s>())).__count as *const _ as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(__pthread_mutex_s),
            "::",
            stringify!(__count)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<__pthread_mutex_s>())).__owner as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(__pthread_mutex_s),
            "::",
            stringify!(__owner)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<__pthread_mutex_s>())).__nusers as *const _ as usize },
        12usize,
        concat!(
            "Offset of field: ",
            stringify!(__pthread_mutex_s),
            "::",
            stringify!(__nusers)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<__pthread_mutex_s>())).__kind as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(__pthread_mutex_s),
            "::",
            stringify!(__kind)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<__pthread_mutex_s>())).__spins as *const _ as usize },
        20usize,
        concat!(
            "Offset of field: ",
            stringify!(__pthread_mutex_s),
            "::",
            stringify!(__spins)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<__pthread_mutex_s>())).__elision as *const _ as usize },
        22usize,
        concat!(
            "Offset of field: ",
            stringify!(__pthread_mutex_s),
            "::",
            stringify!(__elision)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<__pthread_mutex_s>())).__list as *const _ as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(__pthread_mutex_s),
            "::",
            stringify!(__list)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __pthread_rwlock_arch_t {
    pub __readers: ::std::os::raw::c_uint,
    pub __writers: ::std::os::raw::c_uint,
    pub __wrphase_futex: ::std::os::raw::c_uint,
    pub __writers_futex: ::std::os::raw::c_uint,
    pub __pad3: ::std::os::raw::c_uint,
    pub __pad4: ::std::os::raw::c_uint,
    pub __cur_writer: ::std::os::raw::c_int,
    pub __shared: ::std::os::raw::c_int,
    pub __rwelision: ::std::os::raw::c_schar,
    pub __pad1: [::std::os::raw::c_uchar; 7usize],
    pub __pad2: ::std::os::raw::c_ulong,
    pub __flags: ::std::os::raw::c_uint,
}
#[test]
fn bindgen_test_layout___pthread_rwlock_arch_t() {
    assert_eq!(
        ::std::mem::size_of::<__pthread_rwlock_arch_t>(),
        56usize,
        concat!("Size of: ", stringify!(__pthread_rwlock_arch_t))
    );
    assert_eq!(
        ::std::mem::align_of::<__pthread_rwlock_arch_t>(),
        8usize,
        concat!("Alignment of ", stringify!(__pthread_rwlock_arch_t))
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__pthread_rwlock_arch_t>())).__readers as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__pthread_rwlock_arch_t),
            "::",
            stringify!(__readers)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__pthread_rwlock_arch_t>())).__writers as *const _ as usize
        },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(__pthread_rwlock_arch_t),
            "::",
            stringify!(__writers)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__pthread_rwlock_arch_t>())).__wrphase_futex as *const _ as usize
        },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(__pthread_rwlock_arch_t),
            "::",
            stringify!(__wrphase_futex)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__pthread_rwlock_arch_t>())).__writers_futex as *const _ as usize
        },
        12usize,
        concat!(
            "Offset of field: ",
            stringify!(__pthread_rwlock_arch_t),
            "::",
            stringify!(__writers_futex)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<__pthread_rwlock_arch_t>())).__pad3 as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(__pthread_rwlock_arch_t),
            "::",
            stringify!(__pad3)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<__pthread_rwlock_arch_t>())).__pad4 as *const _ as usize },
        20usize,
        concat!(
            "Offset of field: ",
            stringify!(__pthread_rwlock_arch_t),
            "::",
            stringify!(__pad4)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__pthread_rwlock_arch_t>())).__cur_writer as *const _ as usize
        },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(__pthread_rwlock_arch_t),
            "::",
            stringify!(__cur_writer)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__pthread_rwlock_arch_t>())).__shared as *const _ as usize
        },
        28usize,
        concat!(
            "Offset of field: ",
            stringify!(__pthread_rwlock_arch_t),
            "::",
            stringify!(__shared)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__pthread_rwlock_arch_t>())).__rwelision as *const _ as usize
        },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(__pthread_rwlock_arch_t),
            "::",
            stringify!(__rwelision)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<__pthread_rwlock_arch_t>())).__pad1 as *const _ as usize },
        33usize,
        concat!(
            "Offset of field: ",
            stringify!(__pthread_rwlock_arch_t),
            "::",
            stringify!(__pad1)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<__pthread_rwlock_arch_t>())).__pad2 as *const _ as usize },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(__pthread_rwlock_arch_t),
            "::",
            stringify!(__pad2)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<__pthread_rwlock_arch_t>())).__flags as *const _ as usize },
        48usize,
        concat!(
            "Offset of field: ",
            stringify!(__pthread_rwlock_arch_t),
            "::",
            stringify!(__flags)
        )
    );
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct __pthread_cond_s {
    pub __wseq: __atomic_wide_counter,
    pub __g1_start: __atomic_wide_counter,
    pub __g_refs: [::std::os::raw::c_uint; 2usize],
    pub __g_size: [::std::os::raw::c_uint; 2usize],
    pub __g1_orig_size: ::std::os::raw::c_uint,
    pub __wrefs: ::std::os::raw::c_uint,
    pub __g_signals: [::std::os::raw::c_uint; 2usize],
}
#[test]
fn bindgen_test_layout___pthread_cond_s() {
    assert_eq!(
        ::std::mem::size_of::<__pthread_cond_s>(),
        48usize,
        concat!("Size of: ", stringify!(__pthread_cond_s))
    );
    assert_eq!(
        ::std::mem::align_of::<__pthread_cond_s>(),
        8usize,
        concat!("Alignment of ", stringify!(__pthread_cond_s))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<__pthread_cond_s>())).__wseq as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__pthread_cond_s),
            "::",
            stringify!(__wseq)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<__pthread_cond_s>())).__g1_start as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(__pthread_cond_s),
            "::",
            stringify!(__g1_start)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<__pthread_cond_s>())).__g_refs as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(__pthread_cond_s),
            "::",
            stringify!(__g_refs)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<__pthread_cond_s>())).__g_size as *const _ as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(__pthread_cond_s),
            "::",
            stringify!(__g_size)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<__pthread_cond_s>())).__g1_orig_size as *const _ as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(__pthread_cond_s),
            "::",
            stringify!(__g1_orig_size)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<__pthread_cond_s>())).__wrefs as *const _ as usize },
        36usize,
        concat!(
            "Offset of field: ",
            stringify!(__pthread_cond_s),
            "::",
            stringify!(__wrefs)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<__pthread_cond_s>())).__g_signals as *const _ as usize },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(__pthread_cond_s),
            "::",
            stringify!(__g_signals)
        )
    );
}
pub type __tss_t = ::std::os::raw::c_uint;
pub type __thrd_t = ::std::os::raw::c_ulong;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __once_flag {
    pub __data: ::std::os::raw::c_int,
}
#[test]
fn bindgen_test_layout___once_flag() {
    assert_eq!(
        ::std::mem::size_of::<__once_flag>(),
        4usize,
        concat!("Size of: ", stringify!(__once_flag))
    );
    assert_eq!(
        ::std::mem::align_of::<__once_flag>(),
        4usize,
        concat!("Alignment of ", stringify!(__once_flag))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<__once_flag>())).__data as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__once_flag),
            "::",
            stringify!(__data)
        )
    );
}
pub type pthread_t = ::std::os::raw::c_ulong;
#[repr(C)]
#[derive(Copy, Clone)]
pub union pthread_mutexattr_t {
    pub __size: [::std::os::raw::c_char; 4usize],
    pub __align: ::std::os::raw::c_int,
}
#[test]
fn bindgen_test_layout_pthread_mutexattr_t() {
    assert_eq!(
        ::std::mem::size_of::<pthread_mutexattr_t>(),
        4usize,
        concat!("Size of: ", stringify!(pthread_mutexattr_t))
    );
    assert_eq!(
        ::std::mem::align_of::<pthread_mutexattr_t>(),
        4usize,
        concat!("Alignment of ", stringify!(pthread_mutexattr_t))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<pthread_mutexattr_t>())).__size as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(pthread_mutexattr_t),
            "::",
            stringify!(__size)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<pthread_mutexattr_t>())).__align as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(pthread_mutexattr_t),
            "::",
            stringify!(__align)
        )
    );
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union pthread_condattr_t {
    pub __size: [::std::os::raw::c_char; 4usize],
    pub __align: ::std::os::raw::c_int,
}
#[test]
fn bindgen_test_layout_pthread_condattr_t() {
    assert_eq!(
        ::std::mem::size_of::<pthread_condattr_t>(),
        4usize,
        concat!("Size of: ", stringify!(pthread_condattr_t))
    );
    assert_eq!(
        ::std::mem::align_of::<pthread_condattr_t>(),
        4usize,
        concat!("Alignment of ", stringify!(pthread_condattr_t))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<pthread_condattr_t>())).__size as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(pthread_condattr_t),
            "::",
            stringify!(__size)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<pthread_condattr_t>())).__align as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(pthread_condattr_t),
            "::",
            stringify!(__align)
        )
    );
}
pub type pthread_key_t = ::std::os::raw::c_uint;
pub type pthread_once_t = ::std::os::raw::c_int;
#[repr(C)]
#[derive(Copy, Clone)]
pub union pthread_attr_t {
    pub __size: [::std::os::raw::c_char; 56usize],
    pub __align: ::std::os::raw::c_long,
}
#[test]
fn bindgen_test_layout_pthread_attr_t() {
    assert_eq!(
        ::std::mem::size_of::<pthread_attr_t>(),
        56usize,
        concat!("Size of: ", stringify!(pthread_attr_t))
    );
    assert_eq!(
        ::std::mem::align_of::<pthread_attr_t>(),
        8usize,
        concat!("Alignment of ", stringify!(pthread_attr_t))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<pthread_attr_t>())).__size as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(pthread_attr_t),
            "::",
            stringify!(__size)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<pthread_attr_t>())).__align as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(pthread_attr_t),
            "::",
            stringify!(__align)
        )
    );
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union pthread_mutex_t {
    pub __data: __pthread_mutex_s,
    pub __size: [::std::os::raw::c_char; 40usize],
    pub __align: ::std::os::raw::c_long,
}
#[test]
fn bindgen_test_layout_pthread_mutex_t() {
    assert_eq!(
        ::std::mem::size_of::<pthread_mutex_t>(),
        40usize,
        concat!("Size of: ", stringify!(pthread_mutex_t))
    );
    assert_eq!(
        ::std::mem::align_of::<pthread_mutex_t>(),
        8usize,
        concat!("Alignment of ", stringify!(pthread_mutex_t))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<pthread_mutex_t>())).__data as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(pthread_mutex_t),
            "::",
            stringify!(__data)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<pthread_mutex_t>())).__size as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(pthread_mutex_t),
            "::",
            stringify!(__size)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<pthread_mutex_t>())).__align as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(pthread_mutex_t),
            "::",
            stringify!(__align)
        )
    );
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union pthread_cond_t {
    pub __data: __pthread_cond_s,
    pub __size: [::std::os::raw::c_char; 48usize],
    pub __align: ::std::os::raw::c_longlong,
}
#[test]
fn bindgen_test_layout_pthread_cond_t() {
    assert_eq!(
        ::std::mem::size_of::<pthread_cond_t>(),
        48usize,
        concat!("Size of: ", stringify!(pthread_cond_t))
    );
    assert_eq!(
        ::std::mem::align_of::<pthread_cond_t>(),
        8usize,
        concat!("Alignment of ", stringify!(pthread_cond_t))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<pthread_cond_t>())).__data as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(pthread_cond_t),
            "::",
            stringify!(__data)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<pthread_cond_t>())).__size as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(pthread_cond_t),
            "::",
            stringify!(__size)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<pthread_cond_t>())).__align as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(pthread_cond_t),
            "::",
            stringify!(__align)
        )
    );
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union pthread_rwlock_t {
    pub __data: __pthread_rwlock_arch_t,
    pub __size: [::std::os::raw::c_char; 56usize],
    pub __align: ::std::os::raw::c_long,
}
#[test]
fn bindgen_test_layout_pthread_rwlock_t() {
    assert_eq!(
        ::std::mem::size_of::<pthread_rwlock_t>(),
        56usize,
        concat!("Size of: ", stringify!(pthread_rwlock_t))
    );
    assert_eq!(
        ::std::mem::align_of::<pthread_rwlock_t>(),
        8usize,
        concat!("Alignment of ", stringify!(pthread_rwlock_t))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<pthread_rwlock_t>())).__data as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(pthread_rwlock_t),
            "::",
            stringify!(__data)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<pthread_rwlock_t>())).__size as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(pthread_rwlock_t),
            "::",
            stringify!(__size)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<pthread_rwlock_t>())).__align as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(pthread_rwlock_t),
            "::",
            stringify!(__align)
        )
    );
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union pthread_rwlockattr_t {
    pub __size: [::std::os::raw::c_char; 8usize],
    pub __align: ::std::os::raw::c_long,
}
#[test]
fn bindgen_test_layout_pthread_rwlockattr_t() {
    assert_eq!(
        ::std::mem::size_of::<pthread_rwlockattr_t>(),
        8usize,
        concat!("Size of: ", stringify!(pthread_rwlockattr_t))
    );
    assert_eq!(
        ::std::mem::align_of::<pthread_rwlockattr_t>(),
        8usize,
        concat!("Alignment of ", stringify!(pthread_rwlockattr_t))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<pthread_rwlockattr_t>())).__size as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(pthread_rwlockattr_t),
            "::",
            stringify!(__size)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<pthread_rwlockattr_t>())).__align as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(pthread_rwlockattr_t),
            "::",
            stringify!(__align)
        )
    );
}
pub type pthread_spinlock_t = ::std::os::raw::c_int;
#[repr(C)]
#[derive(Copy, Clone)]
pub union pthread_barrier_t {
    pub __size: [::std::os::raw::c_char; 32usize],
    pub __align: ::std::os::raw::c_long,
}
#[test]
fn bindgen_test_layout_pthread_barrier_t() {
    assert_eq!(
        ::std::mem::size_of::<pthread_barrier_t>(),
        32usize,
        concat!("Size of: ", stringify!(pthread_barrier_t))
    );
    assert_eq!(
        ::std::mem::align_of::<pthread_barrier_t>(),
        8usize,
        concat!("Alignment of ", stringify!(pthread_barrier_t))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<pthread_barrier_t>())).__size as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(pthread_barrier_t),
            "::",
            stringify!(__size)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<pthread_barrier_t>())).__align as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(pthread_barrier_t),
            "::",
            stringify!(__align)
        )
    );
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union pthread_barrierattr_t {
    pub __size: [::std::os::raw::c_char; 4usize],
    pub __align: ::std::os::raw::c_int,
}
#[test]
fn bindgen_test_layout_pthread_barrierattr_t() {
    assert_eq!(
        ::std::mem::size_of::<pthread_barrierattr_t>(),
        4usize,
        concat!("Size of: ", stringify!(pthread_barrierattr_t))
    );
    assert_eq!(
        ::std::mem::align_of::<pthread_barrierattr_t>(),
        4usize,
        concat!("Alignment of ", stringify!(pthread_barrierattr_t))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<pthread_barrierattr_t>())).__size as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(pthread_barrierattr_t),
            "::",
            stringify!(__size)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<pthread_barrierattr_t>())).__align as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(pthread_barrierattr_t),
            "::",
            stringify!(__align)
        )
    );
}
extern "C" {
    pub fn random() -> ::std::os::raw::c_long;
}
extern "C" {
    pub fn srandom(__seed: ::std::os::raw::c_uint);
}
extern "C" {
    pub fn initstate(
        __seed: ::std::os::raw::c_uint,
        __statebuf: *mut ::std::os::raw::c_char,
        __statelen: size_t,
    ) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn setstate(__statebuf: *mut ::std::os::raw::c_char) -> *mut ::std::os::raw::c_char;
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct random_data {
    pub fptr: *mut i32,
    pub rptr: *mut i32,
    pub state: *mut i32,
    pub rand_type: ::std::os::raw::c_int,
    pub rand_deg: ::std::os::raw::c_int,
    pub rand_sep: ::std::os::raw::c_int,
    pub end_ptr: *mut i32,
}
#[test]
fn bindgen_test_layout_random_data() {
    assert_eq!(
        ::std::mem::size_of::<random_data>(),
        48usize,
        concat!("Size of: ", stringify!(random_data))
    );
    assert_eq!(
        ::std::mem::align_of::<random_data>(),
        8usize,
        concat!("Alignment of ", stringify!(random_data))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<random_data>())).fptr as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(random_data),
            "::",
            stringify!(fptr)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<random_data>())).rptr as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(random_data),
            "::",
            stringify!(rptr)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<random_data>())).state as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(random_data),
            "::",
            stringify!(state)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<random_data>())).rand_type as *const _ as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(random_data),
            "::",
            stringify!(rand_type)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<random_data>())).rand_deg as *const _ as usize },
        28usize,
        concat!(
            "Offset of field: ",
            stringify!(random_data),
            "::",
            stringify!(rand_deg)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<random_data>())).rand_sep as *const _ as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(random_data),
            "::",
            stringify!(rand_sep)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<random_data>())).end_ptr as *const _ as usize },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(random_data),
            "::",
            stringify!(end_ptr)
        )
    );
}
extern "C" {
    pub fn random_r(__buf: *mut random_data, __result: *mut i32) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn srandom_r(
        __seed: ::std::os::raw::c_uint,
        __buf: *mut random_data,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn initstate_r(
        __seed: ::std::os::raw::c_uint,
        __statebuf: *mut ::std::os::raw::c_char,
        __statelen: size_t,
        __buf: *mut random_data,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn setstate_r(
        __statebuf: *mut ::std::os::raw::c_char,
        __buf: *mut random_data,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn rand() -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn srand(__seed: ::std::os::raw::c_uint);
}
extern "C" {
    pub fn rand_r(__seed: *mut ::std::os::raw::c_uint) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn drand48() -> f64;
}
extern "C" {
    pub fn erand48(__xsubi: *mut ::std::os::raw::c_ushort) -> f64;
}
extern "C" {
    pub fn lrand48() -> ::std::os::raw::c_long;
}
extern "C" {
    pub fn nrand48(__xsubi: *mut ::std::os::raw::c_ushort) -> ::std::os::raw::c_long;
}
extern "C" {
    pub fn mrand48() -> ::std::os::raw::c_long;
}
extern "C" {
    pub fn jrand48(__xsubi: *mut ::std::os::raw::c_ushort) -> ::std::os::raw::c_long;
}
extern "C" {
    pub fn srand48(__seedval: ::std::os::raw::c_long);
}
extern "C" {
    pub fn seed48(__seed16v: *mut ::std::os::raw::c_ushort) -> *mut ::std::os::raw::c_ushort;
}
extern "C" {
    pub fn lcong48(__param: *mut ::std::os::raw::c_ushort);
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct drand48_data {
    pub __x: [::std::os::raw::c_ushort; 3usize],
    pub __old_x: [::std::os::raw::c_ushort; 3usize],
    pub __c: ::std::os::raw::c_ushort,
    pub __init: ::std::os::raw::c_ushort,
    pub __a: ::std::os::raw::c_ulonglong,
}
#[test]
fn bindgen_test_layout_drand48_data() {
    assert_eq!(
        ::std::mem::size_of::<drand48_data>(),
        24usize,
        concat!("Size of: ", stringify!(drand48_data))
    );
    assert_eq!(
        ::std::mem::align_of::<drand48_data>(),
        8usize,
        concat!("Alignment of ", stringify!(drand48_data))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<drand48_data>())).__x as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(drand48_data),
            "::",
            stringify!(__x)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<drand48_data>())).__old_x as *const _ as usize },
        6usize,
        concat!(
            "Offset of field: ",
            stringify!(drand48_data),
            "::",
            stringify!(__old_x)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<drand48_data>())).__c as *const _ as usize },
        12usize,
        concat!(
            "Offset of field: ",
            stringify!(drand48_data),
            "::",
            stringify!(__c)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<drand48_data>())).__init as *const _ as usize },
        14usize,
        concat!(
            "Offset of field: ",
            stringify!(drand48_data),
            "::",
            stringify!(__init)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<drand48_data>())).__a as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(drand48_data),
            "::",
            stringify!(__a)
        )
    );
}
extern "C" {
    pub fn drand48_r(__buffer: *mut drand48_data, __result: *mut f64) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn erand48_r(
        __xsubi: *mut ::std::os::raw::c_ushort,
        __buffer: *mut drand48_data,
        __result: *mut f64,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn lrand48_r(
        __buffer: *mut drand48_data,
        __result: *mut ::std::os::raw::c_long,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn nrand48_r(
        __xsubi: *mut ::std::os::raw::c_ushort,
        __buffer: *mut drand48_data,
        __result: *mut ::std::os::raw::c_long,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn mrand48_r(
        __buffer: *mut drand48_data,
        __result: *mut ::std::os::raw::c_long,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn jrand48_r(
        __xsubi: *mut ::std::os::raw::c_ushort,
        __buffer: *mut drand48_data,
        __result: *mut ::std::os::raw::c_long,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn srand48_r(
        __seedval: ::std::os::raw::c_long,
        __buffer: *mut drand48_data,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn seed48_r(
        __seed16v: *mut ::std::os::raw::c_ushort,
        __buffer: *mut drand48_data,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn lcong48_r(
        __param: *mut ::std::os::raw::c_ushort,
        __buffer: *mut drand48_data,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn malloc(__size: ::std::os::raw::c_ulong) -> *mut ::std::os::raw::c_void;
}
extern "C" {
    pub fn calloc(
        __nmemb: ::std::os::raw::c_ulong,
        __size: ::std::os::raw::c_ulong,
    ) -> *mut ::std::os::raw::c_void;
}
extern "C" {
    pub fn realloc(
        __ptr: *mut ::std::os::raw::c_void,
        __size: ::std::os::raw::c_ulong,
    ) -> *mut ::std::os::raw::c_void;
}
extern "C" {
    pub fn free(__ptr: *mut ::std::os::raw::c_void);
}
extern "C" {
    pub fn reallocarray(
        __ptr: *mut ::std::os::raw::c_void,
        __nmemb: size_t,
        __size: size_t,
    ) -> *mut ::std::os::raw::c_void;
}
extern "C" {
    pub fn alloca(__size: ::std::os::raw::c_ulong) -> *mut ::std::os::raw::c_void;
}
extern "C" {
    pub fn valloc(__size: size_t) -> *mut ::std::os::raw::c_void;
}
extern "C" {
    pub fn posix_memalign(
        __memptr: *mut *mut ::std::os::raw::c_void,
        __alignment: size_t,
        __size: size_t,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn aligned_alloc(
        __alignment: ::std::os::raw::c_ulong,
        __size: ::std::os::raw::c_ulong,
    ) -> *mut ::std::os::raw::c_void;
}
extern "C" {
    pub fn abort();
}
extern "C" {
    pub fn atexit(__func: ::std::option::Option<unsafe extern "C" fn()>) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn at_quick_exit(
        __func: ::std::option::Option<unsafe extern "C" fn()>,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn on_exit(
        __func: ::std::option::Option<
            unsafe extern "C" fn(
                __status: ::std::os::raw::c_int,
                __arg: *mut ::std::os::raw::c_void,
            ),
        >,
        __arg: *mut ::std::os::raw::c_void,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn exit(__status: ::std::os::raw::c_int);
}
extern "C" {
    pub fn quick_exit(__status: ::std::os::raw::c_int);
}
extern "C" {
    pub fn _Exit(__status: ::std::os::raw::c_int);
}
extern "C" {
    pub fn getenv(__name: *const ::std::os::raw::c_char) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn putenv(__string: *mut ::std::os::raw::c_char) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn setenv(
        __name: *const ::std::os::raw::c_char,
        __value: *const ::std::os::raw::c_char,
        __replace: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn unsetenv(__name: *const ::std::os::raw::c_char) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn clearenv() -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn mktemp(__template: *mut ::std::os::raw::c_char) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn mkstemp(__template: *mut ::std::os::raw::c_char) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn mkstemps(
        __template: *mut ::std::os::raw::c_char,
        __suffixlen: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn mkdtemp(__template: *mut ::std::os::raw::c_char) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn system(__command: *const ::std::os::raw::c_char) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn realpath(
        __name: *const ::std::os::raw::c_char,
        __resolved: *mut ::std::os::raw::c_char,
    ) -> *mut ::std::os::raw::c_char;
}
pub type __compar_fn_t = ::std::option::Option<
    unsafe extern "C" fn(
        arg1: *const ::std::os::raw::c_void,
        arg2: *const ::std::os::raw::c_void,
    ) -> ::std::os::raw::c_int,
>;
extern "C" {
    pub fn bsearch(
        __key: *const ::std::os::raw::c_void,
        __base: *const ::std::os::raw::c_void,
        __nmemb: size_t,
        __size: size_t,
        __compar: __compar_fn_t,
    ) -> *mut ::std::os::raw::c_void;
}
extern "C" {
    pub fn qsort(
        __base: *mut ::std::os::raw::c_void,
        __nmemb: size_t,
        __size: size_t,
        __compar: __compar_fn_t,
    );
}
extern "C" {
    pub fn abs(__x: ::std::os::raw::c_int) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn labs(__x: ::std::os::raw::c_long) -> ::std::os::raw::c_long;
}
extern "C" {
    pub fn llabs(__x: ::std::os::raw::c_longlong) -> ::std::os::raw::c_longlong;
}
extern "C" {
    pub fn div(__numer: ::std::os::raw::c_int, __denom: ::std::os::raw::c_int) -> div_t;
}
extern "C" {
    pub fn ldiv(__numer: ::std::os::raw::c_long, __denom: ::std::os::raw::c_long) -> ldiv_t;
}
extern "C" {
    pub fn lldiv(
        __numer: ::std::os::raw::c_longlong,
        __denom: ::std::os::raw::c_longlong,
    ) -> lldiv_t;
}
extern "C" {
    pub fn ecvt(
        __value: f64,
        __ndigit: ::std::os::raw::c_int,
        __decpt: *mut ::std::os::raw::c_int,
        __sign: *mut ::std::os::raw::c_int,
    ) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn fcvt(
        __value: f64,
        __ndigit: ::std::os::raw::c_int,
        __decpt: *mut ::std::os::raw::c_int,
        __sign: *mut ::std::os::raw::c_int,
    ) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn gcvt(
        __value: f64,
        __ndigit: ::std::os::raw::c_int,
        __buf: *mut ::std::os::raw::c_char,
    ) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn qecvt(
        __value: u128,
        __ndigit: ::std::os::raw::c_int,
        __decpt: *mut ::std::os::raw::c_int,
        __sign: *mut ::std::os::raw::c_int,
    ) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn qfcvt(
        __value: u128,
        __ndigit: ::std::os::raw::c_int,
        __decpt: *mut ::std::os::raw::c_int,
        __sign: *mut ::std::os::raw::c_int,
    ) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn qgcvt(
        __value: u128,
        __ndigit: ::std::os::raw::c_int,
        __buf: *mut ::std::os::raw::c_char,
    ) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn ecvt_r(
        __value: f64,
        __ndigit: ::std::os::raw::c_int,
        __decpt: *mut ::std::os::raw::c_int,
        __sign: *mut ::std::os::raw::c_int,
        __buf: *mut ::std::os::raw::c_char,
        __len: size_t,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn fcvt_r(
        __value: f64,
        __ndigit: ::std::os::raw::c_int,
        __decpt: *mut ::std::os::raw::c_int,
        __sign: *mut ::std::os::raw::c_int,
        __buf: *mut ::std::os::raw::c_char,
        __len: size_t,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn qecvt_r(
        __value: u128,
        __ndigit: ::std::os::raw::c_int,
        __decpt: *mut ::std::os::raw::c_int,
        __sign: *mut ::std::os::raw::c_int,
        __buf: *mut ::std::os::raw::c_char,
        __len: size_t,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn qfcvt_r(
        __value: u128,
        __ndigit: ::std::os::raw::c_int,
        __decpt: *mut ::std::os::raw::c_int,
        __sign: *mut ::std::os::raw::c_int,
        __buf: *mut ::std::os::raw::c_char,
        __len: size_t,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn mblen(__s: *const ::std::os::raw::c_char, __n: size_t) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn mbtowc(
        __pwc: *mut wchar_t,
        __s: *const ::std::os::raw::c_char,
        __n: size_t,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn wctomb(__s: *mut ::std::os::raw::c_char, __wchar: wchar_t) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn mbstowcs(
        __pwcs: *mut wchar_t,
        __s: *const ::std::os::raw::c_char,
        __n: size_t,
    ) -> size_t;
}
extern "C" {
    pub fn wcstombs(
        __s: *mut ::std::os::raw::c_char,
        __pwcs: *const wchar_t,
        __n: size_t,
    ) -> size_t;
}
extern "C" {
    pub fn rpmatch(__response: *const ::std::os::raw::c_char) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn getsubopt(
        __optionp: *mut *mut ::std::os::raw::c_char,
        __tokens: *const *mut ::std::os::raw::c_char,
        __valuep: *mut *mut ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn getloadavg(__loadavg: *mut f64, __nelem: ::std::os::raw::c_int)
        -> ::std::os::raw::c_int;
}
pub type va_list = __builtin_va_list;
pub type __gnuc_va_list = __builtin_va_list;
pub type int_least8_t = __int_least8_t;
pub type int_least16_t = __int_least16_t;
pub type int_least32_t = __int_least32_t;
pub type int_least64_t = __int_least64_t;
pub type uint_least8_t = __uint_least8_t;
pub type uint_least16_t = __uint_least16_t;
pub type uint_least32_t = __uint_least32_t;
pub type uint_least64_t = __uint_least64_t;
pub type int_fast8_t = ::std::os::raw::c_schar;
pub type int_fast16_t = ::std::os::raw::c_long;
pub type int_fast32_t = ::std::os::raw::c_long;
pub type int_fast64_t = ::std::os::raw::c_long;
pub type uint_fast8_t = ::std::os::raw::c_uchar;
pub type uint_fast16_t = ::std::os::raw::c_ulong;
pub type uint_fast32_t = ::std::os::raw::c_ulong;
pub type uint_fast64_t = ::std::os::raw::c_ulong;
pub type intmax_t = __intmax_t;
pub type uintmax_t = __uintmax_t;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _profile_t {
    _unused: [u8; 0],
}
pub type krb5_octet = u8;
pub type krb5_int16 = i16;
pub type krb5_ui_2 = u16;
pub type krb5_int32 = i32;
pub type krb5_ui_4 = u32;
pub type krb5_boolean = ::std::os::raw::c_uint;
pub type krb5_msgtype = ::std::os::raw::c_uint;
pub type krb5_kvno = ::std::os::raw::c_uint;
pub type krb5_addrtype = krb5_int32;
pub type krb5_enctype = krb5_int32;
pub type krb5_cksumtype = krb5_int32;
pub type krb5_authdatatype = krb5_int32;
pub type krb5_keyusage = krb5_int32;
pub type krb5_cryptotype = krb5_int32;
pub type krb5_preauthtype = krb5_int32;
pub type krb5_flags = krb5_int32;
#[doc = " Represents a timestamp in seconds since the POSIX epoch.  This legacy type"]
#[doc = " is used frequently in the ABI, but cannot represent timestamps after 2038 as"]
#[doc = " a positive number.  Code which uses this type should cast values of it to"]
#[doc = " uint32_t so that negative values are treated as timestamps between 2038 and"]
#[doc = " 2106 on platforms with 64-bit time_t."]
pub type krb5_timestamp = krb5_int32;
pub type krb5_deltat = krb5_int32;
#[doc = " Used to convey an operation status.  The value 0 indicates success; any"]
#[doc = " other values are com_err codes.  Use krb5_get_error_message() to obtain a"]
#[doc = " string describing the error."]
pub type krb5_error_code = krb5_int32;
pub type krb5_magic = krb5_error_code;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _krb5_data {
    pub magic: krb5_magic,
    pub length: ::std::os::raw::c_uint,
    pub data: *mut ::std::os::raw::c_char,
}
#[test]
fn bindgen_test_layout__krb5_data() {
    assert_eq!(
        ::std::mem::size_of::<_krb5_data>(),
        16usize,
        concat!("Size of: ", stringify!(_krb5_data))
    );
    assert_eq!(
        ::std::mem::align_of::<_krb5_data>(),
        8usize,
        concat!("Alignment of ", stringify!(_krb5_data))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_krb5_data>())).magic as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_krb5_data),
            "::",
            stringify!(magic)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_krb5_data>())).length as *const _ as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(_krb5_data),
            "::",
            stringify!(length)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_krb5_data>())).data as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(_krb5_data),
            "::",
            stringify!(data)
        )
    );
}
pub type krb5_data = _krb5_data;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _krb5_octet_data {
    pub magic: krb5_magic,
    pub length: ::std::os::raw::c_uint,
    pub data: *mut krb5_octet,
}
#[test]
fn bindgen_test_layout__krb5_octet_data() {
    assert_eq!(
        ::std::mem::size_of::<_krb5_octet_data>(),
        16usize,
        concat!("Size of: ", stringify!(_krb5_octet_data))
    );
    assert_eq!(
        ::std::mem::align_of::<_krb5_octet_data>(),
        8usize,
        concat!("Alignment of ", stringify!(_krb5_octet_data))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_krb5_octet_data>())).magic as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_krb5_octet_data),
            "::",
            stringify!(magic)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_krb5_octet_data>())).length as *const _ as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(_krb5_octet_data),
            "::",
            stringify!(length)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_krb5_octet_data>())).data as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(_krb5_octet_data),
            "::",
            stringify!(data)
        )
    );
}
pub type krb5_octet_data = _krb5_octet_data;
pub type krb5_pointer = *mut ::std::os::raw::c_void;
pub type krb5_const_pointer = *const ::std::os::raw::c_void;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct krb5_principal_data {
    pub magic: krb5_magic,
    pub realm: krb5_data,
    #[doc = "< An array of strings"]
    pub data: *mut krb5_data,
    pub length: krb5_int32,
    pub type_: krb5_int32,
}
#[test]
fn bindgen_test_layout_krb5_principal_data() {
    assert_eq!(
        ::std::mem::size_of::<krb5_principal_data>(),
        40usize,
        concat!("Size of: ", stringify!(krb5_principal_data))
    );
    assert_eq!(
        ::std::mem::align_of::<krb5_principal_data>(),
        8usize,
        concat!("Alignment of ", stringify!(krb5_principal_data))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<krb5_principal_data>())).magic as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(krb5_principal_data),
            "::",
            stringify!(magic)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<krb5_principal_data>())).realm as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(krb5_principal_data),
            "::",
            stringify!(realm)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<krb5_principal_data>())).data as *const _ as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(krb5_principal_data),
            "::",
            stringify!(data)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<krb5_principal_data>())).length as *const _ as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(krb5_principal_data),
            "::",
            stringify!(length)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<krb5_principal_data>())).type_ as *const _ as usize },
        36usize,
        concat!(
            "Offset of field: ",
            stringify!(krb5_principal_data),
            "::",
            stringify!(type_)
        )
    );
}
pub type krb5_principal = *mut krb5_principal_data;
#[doc = " Constant version of krb5_principal_data."]
pub type krb5_const_principal = *const krb5_principal_data;
extern "C" {
    #[doc = " Check for a match with KRB5_REFERRAL_REALM."]
    #[doc = ""]
    #[doc = " @param [in] r                Realm to check"]
    #[doc = ""]
    #[doc = " @return @c TRUE if @a r is zero-length, @c FALSE otherwise"]
    pub fn krb5_is_referral_realm(r: *const krb5_data) -> krb5_boolean;
}
extern "C" {
    #[doc = " Return an anonymous realm data."]
    #[doc = ""]
    #[doc = " This function returns constant storage that must not be freed."]
    #[doc = ""]
    #[doc = " @sa #KRB5_ANONYMOUS_REALMSTR"]
    pub fn krb5_anonymous_realm() -> *const krb5_data;
}
extern "C" {
    #[doc = " Build an anonymous principal."]
    #[doc = ""]
    #[doc = " This function returns constant storage that must not be freed."]
    #[doc = ""]
    #[doc = " @sa #KRB5_ANONYMOUS_PRINCSTR"]
    pub fn krb5_anonymous_principal() -> krb5_const_principal;
}
#[doc = " Structure for address"]
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _krb5_address {
    pub magic: krb5_magic,
    pub addrtype: krb5_addrtype,
    pub length: ::std::os::raw::c_uint,
    pub contents: *mut krb5_octet,
}
#[test]
fn bindgen_test_layout__krb5_address() {
    assert_eq!(
        ::std::mem::size_of::<_krb5_address>(),
        24usize,
        concat!("Size of: ", stringify!(_krb5_address))
    );
    assert_eq!(
        ::std::mem::align_of::<_krb5_address>(),
        8usize,
        concat!("Alignment of ", stringify!(_krb5_address))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_krb5_address>())).magic as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_krb5_address),
            "::",
            stringify!(magic)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_krb5_address>())).addrtype as *const _ as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(_krb5_address),
            "::",
            stringify!(addrtype)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_krb5_address>())).length as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(_krb5_address),
            "::",
            stringify!(length)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_krb5_address>())).contents as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(_krb5_address),
            "::",
            stringify!(contents)
        )
    );
}
#[doc = " Structure for address"]
pub type krb5_address = _krb5_address;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _krb5_context {
    _unused: [u8; 0],
}
pub type krb5_context = *mut _krb5_context;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _krb5_auth_context {
    _unused: [u8; 0],
}
pub type krb5_auth_context = *mut _krb5_auth_context;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _krb5_cryptosystem_entry {
    _unused: [u8; 0],
}
#[doc = " Exposed contents of a key."]
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _krb5_keyblock {
    pub magic: krb5_magic,
    pub enctype: krb5_enctype,
    pub length: ::std::os::raw::c_uint,
    pub contents: *mut krb5_octet,
}
#[test]
fn bindgen_test_layout__krb5_keyblock() {
    assert_eq!(
        ::std::mem::size_of::<_krb5_keyblock>(),
        24usize,
        concat!("Size of: ", stringify!(_krb5_keyblock))
    );
    assert_eq!(
        ::std::mem::align_of::<_krb5_keyblock>(),
        8usize,
        concat!("Alignment of ", stringify!(_krb5_keyblock))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_krb5_keyblock>())).magic as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_krb5_keyblock),
            "::",
            stringify!(magic)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_krb5_keyblock>())).enctype as *const _ as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(_krb5_keyblock),
            "::",
            stringify!(enctype)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_krb5_keyblock>())).length as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(_krb5_keyblock),
            "::",
            stringify!(length)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_krb5_keyblock>())).contents as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(_krb5_keyblock),
            "::",
            stringify!(contents)
        )
    );
}
#[doc = " Exposed contents of a key."]
pub type krb5_keyblock = _krb5_keyblock;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct krb5_key_st {
    _unused: [u8; 0],
}
#[doc = " Opaque identifier for a key."]
#[doc = ""]
#[doc = " Use with the krb5_k APIs for better performance for repeated operations with"]
#[doc = " the same key and usage.  Key identifiers must not be used simultaneously"]
#[doc = " within multiple threads, as they may contain mutable internal state and are"]
#[doc = " not mutex-protected."]
pub type krb5_key = *mut krb5_key_st;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _krb5_encrypt_block {
    pub magic: krb5_magic,
    pub crypto_entry: krb5_enctype,
    pub key: *mut krb5_keyblock,
}
#[test]
fn bindgen_test_layout__krb5_encrypt_block() {
    assert_eq!(
        ::std::mem::size_of::<_krb5_encrypt_block>(),
        16usize,
        concat!("Size of: ", stringify!(_krb5_encrypt_block))
    );
    assert_eq!(
        ::std::mem::align_of::<_krb5_encrypt_block>(),
        8usize,
        concat!("Alignment of ", stringify!(_krb5_encrypt_block))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_krb5_encrypt_block>())).magic as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_krb5_encrypt_block),
            "::",
            stringify!(magic)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_krb5_encrypt_block>())).crypto_entry as *const _ as usize
        },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(_krb5_encrypt_block),
            "::",
            stringify!(crypto_entry)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_krb5_encrypt_block>())).key as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(_krb5_encrypt_block),
            "::",
            stringify!(key)
        )
    );
}
pub type krb5_encrypt_block = _krb5_encrypt_block;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _krb5_checksum {
    pub magic: krb5_magic,
    pub checksum_type: krb5_cksumtype,
    pub length: ::std::os::raw::c_uint,
    pub contents: *mut krb5_octet,
}
#[test]
fn bindgen_test_layout__krb5_checksum() {
    assert_eq!(
        ::std::mem::size_of::<_krb5_checksum>(),
        24usize,
        concat!("Size of: ", stringify!(_krb5_checksum))
    );
    assert_eq!(
        ::std::mem::align_of::<_krb5_checksum>(),
        8usize,
        concat!("Alignment of ", stringify!(_krb5_checksum))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_krb5_checksum>())).magic as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_krb5_checksum),
            "::",
            stringify!(magic)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_krb5_checksum>())).checksum_type as *const _ as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(_krb5_checksum),
            "::",
            stringify!(checksum_type)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_krb5_checksum>())).length as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(_krb5_checksum),
            "::",
            stringify!(length)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_krb5_checksum>())).contents as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(_krb5_checksum),
            "::",
            stringify!(contents)
        )
    );
}
pub type krb5_checksum = _krb5_checksum;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _krb5_enc_data {
    pub magic: krb5_magic,
    pub enctype: krb5_enctype,
    pub kvno: krb5_kvno,
    pub ciphertext: krb5_data,
}
#[test]
fn bindgen_test_layout__krb5_enc_data() {
    assert_eq!(
        ::std::mem::size_of::<_krb5_enc_data>(),
        32usize,
        concat!("Size of: ", stringify!(_krb5_enc_data))
    );
    assert_eq!(
        ::std::mem::align_of::<_krb5_enc_data>(),
        8usize,
        concat!("Alignment of ", stringify!(_krb5_enc_data))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_krb5_enc_data>())).magic as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_krb5_enc_data),
            "::",
            stringify!(magic)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_krb5_enc_data>())).enctype as *const _ as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(_krb5_enc_data),
            "::",
            stringify!(enctype)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_krb5_enc_data>())).kvno as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(_krb5_enc_data),
            "::",
            stringify!(kvno)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_krb5_enc_data>())).ciphertext as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(_krb5_enc_data),
            "::",
            stringify!(ciphertext)
        )
    );
}
pub type krb5_enc_data = _krb5_enc_data;
#[doc = " Structure to describe a region of text to be encrypted or decrypted."]
#[doc = ""]
#[doc = " The @a flags member describes the type of the iov."]
#[doc = " The @a data member points to the memory that will be manipulated."]
#[doc = " All iov APIs take a pointer to the first element of an array of krb5_crypto_iov's"]
#[doc = " along with the size of that array. Buffer contents are manipulated in-place;"]
#[doc = " data is overwritten. Callers must allocate the right number of krb5_crypto_iov"]
#[doc = " structures before calling into an iov API."]
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _krb5_crypto_iov {
    #[doc = "< @ref KRB5_CRYPTO_TYPE type of the iov"]
    pub flags: krb5_cryptotype,
    pub data: krb5_data,
}
#[test]
fn bindgen_test_layout__krb5_crypto_iov() {
    assert_eq!(
        ::std::mem::size_of::<_krb5_crypto_iov>(),
        24usize,
        concat!("Size of: ", stringify!(_krb5_crypto_iov))
    );
    assert_eq!(
        ::std::mem::align_of::<_krb5_crypto_iov>(),
        8usize,
        concat!("Alignment of ", stringify!(_krb5_crypto_iov))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_krb5_crypto_iov>())).flags as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_krb5_crypto_iov),
            "::",
            stringify!(flags)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_krb5_crypto_iov>())).data as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(_krb5_crypto_iov),
            "::",
            stringify!(data)
        )
    );
}
#[doc = " Structure to describe a region of text to be encrypted or decrypted."]
#[doc = ""]
#[doc = " The @a flags member describes the type of the iov."]
#[doc = " The @a data member points to the memory that will be manipulated."]
#[doc = " All iov APIs take a pointer to the first element of an array of krb5_crypto_iov's"]
#[doc = " along with the size of that array. Buffer contents are manipulated in-place;"]
#[doc = " data is overwritten. Callers must allocate the right number of krb5_crypto_iov"]
#[doc = " structures before calling into an iov API."]
pub type krb5_crypto_iov = _krb5_crypto_iov;
pub const KRB5_C_RANDSOURCE_OLDAPI: ::std::os::raw::c_uint = 0;
pub const KRB5_C_RANDSOURCE_OSRAND: ::std::os::raw::c_uint = 1;
pub const KRB5_C_RANDSOURCE_TRUSTEDPARTY: ::std::os::raw::c_uint = 2;
pub const KRB5_C_RANDSOURCE_TIMING: ::std::os::raw::c_uint = 3;
pub const KRB5_C_RANDSOURCE_EXTERNAL_PROTOCOL: ::std::os::raw::c_uint = 4;
pub const KRB5_C_RANDSOURCE_MAX: ::std::os::raw::c_uint = 5;
pub type _bindgen_ty_1 = ::std::os::raw::c_uint;
extern "C" {
    #[doc = " Encrypt data using a key (operates on keyblock)."]
    #[doc = ""]
    #[doc = " @param [in]     context      Library context"]
    #[doc = " @param [in]     key          Encryption key"]
    #[doc = " @param [in]     usage        Key usage (see @ref KRB5_KEYUSAGE types)"]
    #[doc = " @param [in,out] cipher_state Cipher state; specify NULL if not needed"]
    #[doc = " @param [in]     input        Data to be encrypted"]
    #[doc = " @param [out]    output       Encrypted data"]
    #[doc = ""]
    #[doc = " This function encrypts the data block @a input and stores the output into @a"]
    #[doc = " output.  The actual encryption key will be derived from @a key and @a usage"]
    #[doc = " if key derivation is specified for the encryption type.  If non-null, @a"]
    #[doc = " cipher_state specifies the beginning state for the encryption operation, and"]
    #[doc = " is updated with the state to be passed as input to the next operation."]
    #[doc = ""]
    #[doc = " @note The caller must initialize @a output and allocate at least enough"]
    #[doc = " space for the result (using krb5_c_encrypt_length() to determine the amount"]
    #[doc = " of space needed).  @a output->length will be set to the actual length of the"]
    #[doc = " ciphertext."]
    #[doc = ""]
    #[doc = " @retval 0 Success; otherwise - Kerberos error codes"]
    pub fn krb5_c_encrypt(
        context: krb5_context,
        key: *const krb5_keyblock,
        usage: krb5_keyusage,
        cipher_state: *const krb5_data,
        input: *const krb5_data,
        output: *mut krb5_enc_data,
    ) -> krb5_error_code;
}
extern "C" {
    #[doc = " Decrypt data using a key (operates on keyblock)."]
    #[doc = ""]
    #[doc = " @param [in]     context      Library context"]
    #[doc = " @param [in]     key          Encryption key"]
    #[doc = " @param [in]     usage        Key usage (see @ref KRB5_KEYUSAGE types)"]
    #[doc = " @param [in,out] cipher_state Cipher state; specify NULL if not needed"]
    #[doc = " @param [in]     input        Encrypted data"]
    #[doc = " @param [out]    output       Decrypted data"]
    #[doc = ""]
    #[doc = " This function decrypts the data block @a input and stores the output into @a"]
    #[doc = " output. The actual decryption key will be derived from @a key and @a usage"]
    #[doc = " if key derivation is specified for the encryption type.  If non-null, @a"]
    #[doc = " cipher_state specifies the beginning state for the decryption operation, and"]
    #[doc = " is updated with the state to be passed as input to the next operation."]
    #[doc = ""]
    #[doc = " @note The caller must initialize @a output and allocate at least enough"]
    #[doc = " space for the result.  The usual practice is to allocate an output buffer as"]
    #[doc = " long as the ciphertext, and let krb5_c_decrypt() trim @a output->length."]
    #[doc = " For some enctypes, the resulting @a output->length may include padding"]
    #[doc = " bytes."]
    #[doc = ""]
    #[doc = " @retval 0 Success; otherwise - Kerberos error codes"]
    pub fn krb5_c_decrypt(
        context: krb5_context,
        key: *const krb5_keyblock,
        usage: krb5_keyusage,
        cipher_state: *const krb5_data,
        input: *const krb5_enc_data,
        output: *mut krb5_data,
    ) -> krb5_error_code;
}
extern "C" {
    #[doc = " Compute encrypted data length."]
    #[doc = ""]
    #[doc = " @param [in]  context         Library context"]
    #[doc = " @param [in]  enctype         Encryption type"]
    #[doc = " @param [in]  inputlen        Length of the data to be encrypted"]
    #[doc = " @param [out] length          Length of the encrypted data"]
    #[doc = ""]
    #[doc = " This function computes the length of the ciphertext produced by encrypting"]
    #[doc = " @a inputlen bytes including padding, confounder, and checksum."]
    #[doc = ""]
    #[doc = " @retval 0 Success; otherwise - Kerberos error codes"]
    pub fn krb5_c_encrypt_length(
        context: krb5_context,
        enctype: krb5_enctype,
        inputlen: size_t,
        length: *mut size_t,
    ) -> krb5_error_code;
}
extern "C" {
    #[doc = " Return cipher block size."]
    #[doc = ""]
    #[doc = " @param [in]  context         Library context"]
    #[doc = " @param [in]  enctype         Encryption type"]
    #[doc = " @param [out] blocksize       Block size for @a enctype"]
    #[doc = ""]
    #[doc = " @retval 0 Success; otherwise - Kerberos error codes"]
    pub fn krb5_c_block_size(
        context: krb5_context,
        enctype: krb5_enctype,
        blocksize: *mut size_t,
    ) -> krb5_error_code;
}
extern "C" {
    #[doc = " Return length of the specified key in bytes."]
    #[doc = ""]
    #[doc = " @param [in]  context         Library context"]
    #[doc = " @param [in]  enctype         Encryption type"]
    #[doc = " @param [out] keybytes        Number of bytes required to make a key"]
    #[doc = " @param [out] keylength       Length of final key"]
    #[doc = ""]
    #[doc = " @retval 0 Success; otherwise - Kerberos error codes"]
    pub fn krb5_c_keylengths(
        context: krb5_context,
        enctype: krb5_enctype,
        keybytes: *mut size_t,
        keylength: *mut size_t,
    ) -> krb5_error_code;
}
extern "C" {
    #[doc = " Initialize a new cipher state."]
    #[doc = ""]
    #[doc = " @param [in]  context         Library context"]
    #[doc = " @param [in]  key             Key"]
    #[doc = " @param [in]  usage           Key usage (see @ref KRB5_KEYUSAGE types)"]
    #[doc = " @param [out] new_state       New cipher state"]
    #[doc = ""]
    #[doc = " @retval 0 Success; otherwise - Kerberos error codes"]
    pub fn krb5_c_init_state(
        context: krb5_context,
        key: *const krb5_keyblock,
        usage: krb5_keyusage,
        new_state: *mut krb5_data,
    ) -> krb5_error_code;
}
extern "C" {
    #[doc = " Free a cipher state previously allocated by krb5_c_init_state()."]
    #[doc = ""]
    #[doc = " @param [in] context          Library context"]
    #[doc = " @param [in] key              Key"]
    #[doc = " @param [in] state            Cipher state to be freed"]
    #[doc = ""]
    #[doc = " @retval 0 Success; otherwise - Kerberos error codes"]
    pub fn krb5_c_free_state(
        context: krb5_context,
        key: *const krb5_keyblock,
        state: *mut krb5_data,
    ) -> krb5_error_code;
}
extern "C" {
    #[doc = " Generate enctype-specific pseudo-random bytes."]
    #[doc = ""]
    #[doc = " @param [in]  context         Library context"]
    #[doc = " @param [in]  keyblock        Key"]
    #[doc = " @param [in]  input           Input data"]
    #[doc = " @param [out] output          Output data"]
    #[doc = ""]
    #[doc = " This function selects a pseudo-random function based on @a keyblock and"]
    #[doc = " computes its value over @a input, placing the result into @a output."]
    #[doc = " The caller must preinitialize @a output and allocate space for the"]
    #[doc = " result, using krb5_c_prf_length() to determine the required length."]
    #[doc = ""]
    #[doc = " @retval 0 Success; otherwise - Kerberos error codes"]
    pub fn krb5_c_prf(
        context: krb5_context,
        keyblock: *const krb5_keyblock,
        input: *mut krb5_data,
        output: *mut krb5_data,
    ) -> krb5_error_code;
}
extern "C" {
    #[doc = " Get the output length of pseudo-random functions for an encryption type."]
    #[doc = ""]
    #[doc = " @param [in]  context         Library context"]
    #[doc = " @param [in]  enctype         Encryption type"]
    #[doc = " @param [out] len             Length of PRF output"]
    #[doc = ""]
    #[doc = " @retval 0 Success; otherwise - Kerberos error codes"]
    pub fn krb5_c_prf_length(
        context: krb5_context,
        enctype: krb5_enctype,
        len: *mut size_t,
    ) -> krb5_error_code;
}
extern "C" {
    #[doc = " Generate pseudo-random bytes using RFC 6113 PRF+."]
    #[doc = ""]
    #[doc = " @param [in]  context         Library context"]
    #[doc = " @param [in]  k               KDC contribution key"]
    #[doc = " @param [in]  input           Input data"]
    #[doc = " @param [out] output          Pseudo-random output buffer"]
    #[doc = ""]
    #[doc = " This function fills @a output with PRF+(k, input) as defined in RFC 6113"]
    #[doc = " section 5.1.  The caller must preinitialize @a output and allocate the"]
    #[doc = " desired amount of space.  The length of the pseudo-random output will match"]
    #[doc = " the length of @a output."]
    #[doc = ""]
    #[doc = " @note RFC 4402 defines a different PRF+ operation.  This function does not"]
    #[doc = " implement that operation."]
    #[doc = ""]
    #[doc = " @return 0 on success, @c E2BIG if output->length is too large for PRF+ to"]
    #[doc = " generate, @c ENOMEM on allocation failure, or an error code from"]
    #[doc = " krb5_c_prf()"]
    pub fn krb5_c_prfplus(
        context: krb5_context,
        k: *const krb5_keyblock,
        input: *const krb5_data,
        output: *mut krb5_data,
    ) -> krb5_error_code;
}
extern "C" {
    #[doc = " Derive a key using some input data (via RFC 6113 PRF+)."]
    #[doc = ""]
    #[doc = " @param [in]  context         Library context"]
    #[doc = " @param [in]  k               KDC contribution key"]
    #[doc = " @param [in]  input           Input string"]
    #[doc = " @param [in]  enctype         Output key enctype (or @c ENCTYPE_NULL)"]
    #[doc = " @param [out] out             Derived keyblock"]
    #[doc = ""]
    #[doc = " This function uses PRF+ as defined in RFC 6113 to derive a key from another"]
    #[doc = " key and an input string.  If @a enctype is @c ENCTYPE_NULL, the output key"]
    #[doc = " will have the same enctype as the input key."]
    pub fn krb5_c_derive_prfplus(
        context: krb5_context,
        k: *const krb5_keyblock,
        input: *const krb5_data,
        enctype: krb5_enctype,
        out: *mut *mut krb5_keyblock,
    ) -> krb5_error_code;
}
extern "C" {
    #[doc = " Compute the KRB-FX-CF2 combination of two keys and pepper strings."]
    #[doc = ""]
    #[doc = " @param [in]  context         Library context"]
    #[doc = " @param [in]  k1              KDC contribution key"]
    #[doc = " @param [in]  pepper1         String \"PKINIT\""]
    #[doc = " @param [in]  k2              Reply key"]
    #[doc = " @param [in]  pepper2         String \"KeyExchange\""]
    #[doc = " @param [out] out             Output key"]
    #[doc = ""]
    #[doc = " This function computes the KRB-FX-CF2 function over its inputs and places"]
    #[doc = " the results in a newly allocated keyblock.  This function is simple in that"]
    #[doc = " it assumes that @a pepper1 and @a pepper2 are C strings with no internal"]
    #[doc = " nulls and that the enctype of the result will be the same as that of @a k1."]
    #[doc = " @a k1 and @a k2 may be of different enctypes."]
    #[doc = ""]
    #[doc = " @retval 0 Success; otherwise - Kerberos error codes"]
    pub fn krb5_c_fx_cf2_simple(
        context: krb5_context,
        k1: *const krb5_keyblock,
        pepper1: *const ::std::os::raw::c_char,
        k2: *const krb5_keyblock,
        pepper2: *const ::std::os::raw::c_char,
        out: *mut *mut krb5_keyblock,
    ) -> krb5_error_code;
}
extern "C" {
    #[doc = " Generate an enctype-specific random encryption key."]
    #[doc = ""]
    #[doc = " @param [in]  context         Library context"]
    #[doc = " @param [in]  enctype         Encryption type of the generated key"]
    #[doc = " @param [out] k5_random_key   An allocated and initialized keyblock"]
    #[doc = ""]
    #[doc = " Use krb5_free_keyblock_contents() to free @a k5_random_key when"]
    #[doc = " no longer needed."]
    #[doc = ""]
    #[doc = " @retval 0 Success; otherwise - Kerberos error codes"]
    pub fn krb5_c_make_random_key(
        context: krb5_context,
        enctype: krb5_enctype,
        k5_random_key: *mut krb5_keyblock,
    ) -> krb5_error_code;
}
extern "C" {
    #[doc = " Generate an enctype-specific key from random data."]
    #[doc = ""]
    #[doc = " @param [in]  context         Library context"]
    #[doc = " @param [in]  enctype         Encryption type"]
    #[doc = " @param [in]  random_data     Random input data"]
    #[doc = " @param [out] k5_random_key   Resulting key"]
    #[doc = ""]
    #[doc = " This function takes random input data @a random_data and produces a valid"]
    #[doc = " key @a k5_random_key for a given @a enctype."]
    #[doc = ""]
    #[doc = " @note It is assumed that @a k5_random_key has already been initialized and"]
    #[doc = " @a k5_random_key->contents has been allocated with the correct length."]
    #[doc = ""]
    #[doc = " @sa krb5_c_keylengths()"]
    #[doc = ""]
    #[doc = " @retval 0 Success; otherwise - Kerberos error codes"]
    pub fn krb5_c_random_to_key(
        context: krb5_context,
        enctype: krb5_enctype,
        random_data: *mut krb5_data,
        k5_random_key: *mut krb5_keyblock,
    ) -> krb5_error_code;
}
extern "C" {
    #[doc = " Add entropy to the pseudo-random number generator."]
    #[doc = ""]
    #[doc = " @param [in] context          Library context"]
    #[doc = " @param [in] randsource       Entropy source (see KRB5_RANDSOURCE types)"]
    #[doc = " @param [in] data             Data"]
    #[doc = ""]
    #[doc = " Contribute entropy to the PRNG used by krb5 crypto operations.  This may or"]
    #[doc = " may not affect the output of the next crypto operation requiring random"]
    #[doc = " data."]
    #[doc = ""]
    #[doc = " @retval 0 Success; otherwise - Kerberos error codes"]
    pub fn krb5_c_random_add_entropy(
        context: krb5_context,
        randsource: ::std::os::raw::c_uint,
        data: *const krb5_data,
    ) -> krb5_error_code;
}
extern "C" {
    #[doc = " Generate pseudo-random bytes."]
    #[doc = ""]
    #[doc = " @param [in]  context         Library context"]
    #[doc = " @param [out] data            Random data"]
    #[doc = ""]
    #[doc = " Fills in @a data with bytes from the PRNG used by krb5 crypto operations."]
    #[doc = " The caller must preinitialize @a data and allocate the desired amount of"]
    #[doc = " space."]
    #[doc = ""]
    #[doc = " @retval 0 Success; otherwise - Kerberos error codes"]
    pub fn krb5_c_random_make_octets(
        context: krb5_context,
        data: *mut krb5_data,
    ) -> krb5_error_code;
}
extern "C" {
    #[doc = " Collect entropy from the OS if possible."]
    #[doc = ""]
    #[doc = " @param [in]  context         Library context"]
    #[doc = " @param [in]  strong          Strongest available source of entropy"]
    #[doc = " @param [out] success         1 if OS provides entropy, 0 otherwise"]
    #[doc = ""]
    #[doc = " If @a strong is non-zero, this function attempts to use the strongest"]
    #[doc = " available source of entropy.  Setting this flag may cause the function to"]
    #[doc = " block on some operating systems.  Good uses include seeding the PRNG for"]
    #[doc = " kadmind and realm setup."]
    #[doc = ""]
    #[doc = " @retval 0 Success; otherwise - Kerberos error codes"]
    pub fn krb5_c_random_os_entropy(
        context: krb5_context,
        strong: ::std::os::raw::c_int,
        success: *mut ::std::os::raw::c_int,
    ) -> krb5_error_code;
}
extern "C" {
    #[doc = " @deprecated Replaced by krb5_c_* API family."]
    pub fn krb5_c_random_seed(context: krb5_context, data: *mut krb5_data) -> krb5_error_code;
}
extern "C" {
    #[doc = " Convert a string (such a password) to a key."]
    #[doc = ""]
    #[doc = " @param [in]  context         Library context"]
    #[doc = " @param [in]  enctype         Encryption type"]
    #[doc = " @param [in]  string          String to be converted"]
    #[doc = " @param [in]  salt            Salt value"]
    #[doc = " @param [out] key             Generated key"]
    #[doc = ""]
    #[doc = " This function converts @a string to a @a key of encryption type @a enctype,"]
    #[doc = " using the specified @a salt.  The newly created @a key must be released by"]
    #[doc = " calling krb5_free_keyblock_contents() when it is no longer needed."]
    #[doc = ""]
    #[doc = " @retval 0 Success; otherwise - Kerberos error codes"]
    pub fn krb5_c_string_to_key(
        context: krb5_context,
        enctype: krb5_enctype,
        string: *const krb5_data,
        salt: *const krb5_data,
        key: *mut krb5_keyblock,
    ) -> krb5_error_code;
}
extern "C" {
    #[doc = " Convert a string (such as a password) to a key with additional parameters."]
    #[doc = ""]
    #[doc = " @param [in]  context         Library context"]
    #[doc = " @param [in]  enctype         Encryption type"]
    #[doc = " @param [in]  string          String to be converted"]
    #[doc = " @param [in]  salt            Salt value"]
    #[doc = " @param [in]  params          Parameters"]
    #[doc = " @param [out] key             Generated key"]
    #[doc = ""]
    #[doc = " This function is similar to krb5_c_string_to_key(), but also takes"]
    #[doc = " parameters which may affect the algorithm in an enctype-dependent way.  The"]
    #[doc = " newly created @a key must be released by calling"]
    #[doc = " krb5_free_keyblock_contents() when it is no longer needed."]
    #[doc = ""]
    #[doc = " @retval 0 Success; otherwise - Kerberos error codes"]
    pub fn krb5_c_string_to_key_with_params(
        context: krb5_context,
        enctype: krb5_enctype,
        string: *const krb5_data,
        salt: *const krb5_data,
        params: *const krb5_data,
        key: *mut krb5_keyblock,
    ) -> krb5_error_code;
}
extern "C" {
    #[doc = " Compare two encryption types."]
    #[doc = ""]
    #[doc = " @param [in]  context         Library context"]
    #[doc = " @param [in]  e1              First encryption type"]
    #[doc = " @param [in]  e2              Second encryption type"]
    #[doc = " @param [out] similar         @c TRUE if types are similar, @c FALSE if not"]
    #[doc = ""]
    #[doc = " This function determines whether two encryption types use the same kind of"]
    #[doc = " keys."]
    #[doc = ""]
    #[doc = " @retval 0 Success; otherwise - Kerberos error codes"]
    pub fn krb5_c_enctype_compare(
        context: krb5_context,
        e1: krb5_enctype,
        e2: krb5_enctype,
        similar: *mut krb5_boolean,
    ) -> krb5_error_code;
}
extern "C" {
    #[doc = " Compute a checksum (operates on keyblock)."]
    #[doc = ""]
    #[doc = " @param [in]  context         Library context"]
    #[doc = " @param [in]  cksumtype       Checksum type (0 for mandatory type)"]
    #[doc = " @param [in]  key             Encryption key for a keyed checksum"]
    #[doc = " @param [in]  usage           Key usage (see @ref KRB5_KEYUSAGE types)"]
    #[doc = " @param [in]  input           Input data"]
    #[doc = " @param [out] cksum           Generated checksum"]
    #[doc = ""]
    #[doc = " This function computes a checksum of type @a cksumtype over @a input, using"]
    #[doc = " @a key if the checksum type is a keyed checksum.  If @a cksumtype is 0 and"]
    #[doc = " @a key is non-null, the checksum type will be the mandatory-to-implement"]
    #[doc = " checksum type for the key's encryption type.  The actual checksum key will"]
    #[doc = " be derived from @a key and @a usage if key derivation is specified for the"]
    #[doc = " checksum type.  The newly created @a cksum must be released by calling"]
    #[doc = " krb5_free_checksum_contents() when it is no longer needed."]
    #[doc = ""]
    #[doc = " @note This function is similar to krb5_k_make_checksum(), but operates"]
    #[doc = " on keyblock @a key."]
    #[doc = ""]
    #[doc = " @sa krb5_c_verify_checksum()"]
    #[doc = ""]
    #[doc = " @retval 0 Success; otherwise - Kerberos error codes"]
    pub fn krb5_c_make_checksum(
        context: krb5_context,
        cksumtype: krb5_cksumtype,
        key: *const krb5_keyblock,
        usage: krb5_keyusage,
        input: *const krb5_data,
        cksum: *mut krb5_checksum,
    ) -> krb5_error_code;
}
extern "C" {
    #[doc = " Verify a checksum (operates on keyblock)."]
    #[doc = ""]
    #[doc = " @param [in]  context         Library context"]
    #[doc = " @param [in]  key             Encryption key for a keyed checksum"]
    #[doc = " @param [in]  usage           @a key usage"]
    #[doc = " @param [in]  data            Data to be used to compute a new checksum"]
    #[doc = "                              using @a key to compare @a cksum against"]
    #[doc = " @param [in]  cksum           Checksum to be verified"]
    #[doc = " @param [out] valid           Non-zero for success, zero for failure"]
    #[doc = ""]
    #[doc = " This function verifies that @a cksum is a valid checksum for @a data.  If"]
    #[doc = " the checksum type of @a cksum is a keyed checksum, @a key is used to verify"]
    #[doc = " the checksum.  If the checksum type in @a cksum is 0 and @a key is not NULL,"]
    #[doc = " the mandatory checksum type for @a key will be used.  The actual checksum"]
    #[doc = " key will be derived from @a key and @a usage if key derivation is specified"]
    #[doc = " for the checksum type."]
    #[doc = ""]
    #[doc = " @note This function is similar to krb5_k_verify_checksum(), but operates"]
    #[doc = " on keyblock @a key."]
    #[doc = ""]
    #[doc = " @retval 0 Success; otherwise - Kerberos error codes"]
    pub fn krb5_c_verify_checksum(
        context: krb5_context,
        key: *const krb5_keyblock,
        usage: krb5_keyusage,
        data: *const krb5_data,
        cksum: *const krb5_checksum,
        valid: *mut krb5_boolean,
    ) -> krb5_error_code;
}
extern "C" {
    #[doc = " Return the length of checksums for a checksum type."]
    #[doc = ""]
    #[doc = " @param [in]  context         Library context"]
    #[doc = " @param [in]  cksumtype       Checksum type"]
    #[doc = " @param [out] length          Checksum length"]
    #[doc = ""]
    #[doc = " @retval 0 Success; otherwise - Kerberos error codes"]
    pub fn krb5_c_checksum_length(
        context: krb5_context,
        cksumtype: krb5_cksumtype,
        length: *mut size_t,
    ) -> krb5_error_code;
}
extern "C" {
    #[doc = " Return a list of keyed checksum types usable with an encryption type."]
    #[doc = ""]
    #[doc = " @param [in]  context         Library context"]
    #[doc = " @param [in]  enctype         Encryption type"]
    #[doc = " @param [out] count           Count of allowable checksum types"]
    #[doc = " @param [out] cksumtypes      Array of allowable checksum types"]
    #[doc = ""]
    #[doc = " Use krb5_free_cksumtypes() to free @a cksumtypes when it is no longer"]
    #[doc = " needed."]
    #[doc = ""]
    #[doc = " @retval 0 Success; otherwise - Kerberos error codes"]
    pub fn krb5_c_keyed_checksum_types(
        context: krb5_context,
        enctype: krb5_enctype,
        count: *mut ::std::os::raw::c_uint,
        cksumtypes: *mut *mut krb5_cksumtype,
    ) -> krb5_error_code;
}
extern "C" {
    #[doc = " Verify that a specified encryption type is a valid Kerberos encryption type."]
    #[doc = ""]
    #[doc = " @param [in] ktype            Encryption type"]
    #[doc = ""]
    #[doc = " @return @c TRUE if @a ktype is valid, @c FALSE if not"]
    pub fn krb5_c_valid_enctype(ktype: krb5_enctype) -> krb5_boolean;
}
extern "C" {
    #[doc = " Verify that specified checksum type is a valid Kerberos checksum type."]
    #[doc = ""]
    #[doc = " @param [in] ctype            Checksum type"]
    #[doc = ""]
    #[doc = " @return @c TRUE if @a ctype is valid, @c FALSE if not"]
    pub fn krb5_c_valid_cksumtype(ctype: krb5_cksumtype) -> krb5_boolean;
}
extern "C" {
    #[doc = " Test whether a checksum type is collision-proof."]
    #[doc = ""]
    #[doc = " @param [in] ctype            Checksum type"]
    #[doc = ""]
    #[doc = " @return @c TRUE if @a ctype is collision-proof, @c FALSE if it is not"]
    #[doc = " collision-proof or not a valid checksum type."]
    pub fn krb5_c_is_coll_proof_cksum(ctype: krb5_cksumtype) -> krb5_boolean;
}
extern "C" {
    #[doc = " Test whether a checksum type is keyed."]
    #[doc = ""]
    #[doc = " @param [in] ctype            Checksum type"]
    #[doc = ""]
    #[doc = " @return @c TRUE if @a ctype is a keyed checksum type, @c FALSE otherwise."]
    pub fn krb5_c_is_keyed_cksum(ctype: krb5_cksumtype) -> krb5_boolean;
}
extern "C" {
    #[doc = " Fill in a checksum element in IOV array (operates on keyblock)"]
    #[doc = ""]
    #[doc = " @param [in]     context         Library context"]
    #[doc = " @param [in]     cksumtype       Checksum type (0 for mandatory type)"]
    #[doc = " @param [in]     key             Encryption key for a keyed checksum"]
    #[doc = " @param [in]     usage           Key usage (see @ref KRB5_KEYUSAGE types)"]
    #[doc = " @param [in,out] data            IOV array"]
    #[doc = " @param [in]     num_data        Size of @a data"]
    #[doc = ""]
    #[doc = " Create a checksum in the #KRB5_CRYPTO_TYPE_CHECKSUM element over"]
    #[doc = " #KRB5_CRYPTO_TYPE_DATA and #KRB5_CRYPTO_TYPE_SIGN_ONLY chunks in @a data."]
    #[doc = " Only the #KRB5_CRYPTO_TYPE_CHECKSUM region is modified."]
    #[doc = ""]
    #[doc = " @note This function is similar to krb5_k_make_checksum_iov(), but operates"]
    #[doc = " on keyblock @a key."]
    #[doc = ""]
    #[doc = " @sa krb5_c_verify_checksum_iov()"]
    #[doc = ""]
    #[doc = " @retval 0 Success; otherwise - Kerberos error codes"]
    pub fn krb5_c_make_checksum_iov(
        context: krb5_context,
        cksumtype: krb5_cksumtype,
        key: *const krb5_keyblock,
        usage: krb5_keyusage,
        data: *mut krb5_crypto_iov,
        num_data: size_t,
    ) -> krb5_error_code;
}
extern "C" {
    #[doc = " Validate a checksum element in IOV array (operates on keyblock)."]
    #[doc = ""]
    #[doc = " @param [in]     context         Library context"]
    #[doc = " @param [in]     cksumtype       Checksum type (0 for mandatory type)"]
    #[doc = " @param [in]     key             Encryption key for a keyed checksum"]
    #[doc = " @param [in]     usage           Key usage (see @ref KRB5_KEYUSAGE types)"]
    #[doc = " @param [in]     data            IOV array"]
    #[doc = " @param [in]     num_data        Size of @a data"]
    #[doc = " @param [out]    valid           Non-zero for success, zero for failure"]
    #[doc = ""]
    #[doc = " Confirm that the checksum in the #KRB5_CRYPTO_TYPE_CHECKSUM element is a"]
    #[doc = " valid checksum of the #KRB5_CRYPTO_TYPE_DATA and #KRB5_CRYPTO_TYPE_SIGN_ONLY"]
    #[doc = " regions in the iov."]
    #[doc = ""]
    #[doc = " @note This function is similar to krb5_k_verify_checksum_iov(), but operates"]
    #[doc = " on keyblock @a key."]
    #[doc = ""]
    #[doc = " @sa krb5_c_make_checksum_iov()"]
    #[doc = ""]
    #[doc = " @retval 0 Success; otherwise - Kerberos error codes"]
    pub fn krb5_c_verify_checksum_iov(
        context: krb5_context,
        cksumtype: krb5_cksumtype,
        key: *const krb5_keyblock,
        usage: krb5_keyusage,
        data: *const krb5_crypto_iov,
        num_data: size_t,
        valid: *mut krb5_boolean,
    ) -> krb5_error_code;
}
extern "C" {
    #[doc = " Encrypt data in place supporting AEAD (operates on keyblock)."]
    #[doc = ""]
    #[doc = " @param [in]     context         Library context"]
    #[doc = " @param [in]     keyblock        Encryption key"]
    #[doc = " @param [in]     usage           Key usage (see @ref KRB5_KEYUSAGE types)"]
    #[doc = " @param [in]     cipher_state    Cipher state; specify NULL if not needed"]
    #[doc = " @param [in,out] data            IOV array. Modified in-place."]
    #[doc = " @param [in]     num_data        Size of @a data"]
    #[doc = ""]
    #[doc = " This function encrypts the data block @a data and stores the output in-place."]
    #[doc = " The actual encryption key will be derived from @a keyblock and @a usage"]
    #[doc = " if key derivation is specified for the encryption type.  If non-null, @a"]
    #[doc = " cipher_state specifies the beginning state for the encryption operation, and"]
    #[doc = " is updated with the state to be passed as input to the next operation."]
    #[doc = " The caller must allocate the right number of krb5_crypto_iov"]
    #[doc = " structures before calling into this API."]
    #[doc = ""]
    #[doc = " @note On return from a krb5_c_encrypt_iov() call, the @a data->length in the"]
    #[doc = " iov structure are adjusted to reflect actual lengths of the ciphertext used."]
    #[doc = " For example, if the padding length is too large, the length will be reduced."]
    #[doc = " Lengths are never increased."]
    #[doc = ""]
    #[doc = " @note This function is similar to krb5_k_encrypt_iov(), but operates"]
    #[doc = " on keyblock @a keyblock."]
    #[doc = ""]
    #[doc = " @sa krb5_c_decrypt_iov()"]
    #[doc = ""]
    #[doc = " @retval 0 Success; otherwise - Kerberos error codes"]
    pub fn krb5_c_encrypt_iov(
        context: krb5_context,
        keyblock: *const krb5_keyblock,
        usage: krb5_keyusage,
        cipher_state: *const krb5_data,
        data: *mut krb5_crypto_iov,
        num_data: size_t,
    ) -> krb5_error_code;
}
extern "C" {
    #[doc = " Decrypt data in place supporting AEAD (operates on keyblock)."]
    #[doc = ""]
    #[doc = " @param [in]     context         Library context"]
    #[doc = " @param [in]     keyblock        Encryption key"]
    #[doc = " @param [in]     usage           Key usage (see @ref KRB5_KEYUSAGE types)"]
    #[doc = " @param [in]     cipher_state    Cipher state; specify NULL if not needed"]
    #[doc = " @param [in,out] data            IOV array. Modified in-place."]
    #[doc = " @param [in]     num_data        Size of @a data"]
    #[doc = ""]
    #[doc = " This function decrypts the data block @a data and stores the output in-place."]
    #[doc = " The actual decryption key will be derived from @a keyblock and @a usage"]
    #[doc = " if key derivation is specified for the encryption type.  If non-null, @a"]
    #[doc = " cipher_state specifies the beginning state for the decryption operation, and"]
    #[doc = " is updated with the state to be passed as input to the next operation."]
    #[doc = " The caller must allocate the right number of krb5_crypto_iov"]
    #[doc = " structures before calling into this API."]
    #[doc = ""]
    #[doc = " @note On return from a krb5_c_decrypt_iov() call, the @a data->length in the"]
    #[doc = " iov structure are adjusted to reflect actual lengths of the ciphertext used."]
    #[doc = " For example, if the padding length is too large, the length will be reduced."]
    #[doc = " Lengths are never increased."]
    #[doc = ""]
    #[doc = " @note This function is similar to krb5_k_decrypt_iov(), but operates"]
    #[doc = " on keyblock @a keyblock."]
    #[doc = ""]
    #[doc = " @sa krb5_c_decrypt_iov()"]
    #[doc = ""]
    #[doc = " @retval 0 Success; otherwise - Kerberos error codes"]
    pub fn krb5_c_decrypt_iov(
        context: krb5_context,
        keyblock: *const krb5_keyblock,
        usage: krb5_keyusage,
        cipher_state: *const krb5_data,
        data: *mut krb5_crypto_iov,
        num_data: size_t,
    ) -> krb5_error_code;
}
extern "C" {
    #[doc = " Return a length of a message field specific to the encryption type."]
    #[doc = ""]
    #[doc = " @param [in]  context      Library context"]
    #[doc = " @param [in]  enctype      Encryption type"]
    #[doc = " @param [in]  type         Type field (See @ref KRB5_CRYPTO_TYPE types)"]
    #[doc = " @param [out] size         Length of the @a type specific to @a enctype"]
    #[doc = ""]
    #[doc = " @retval 0 Success; otherwise - Kerberos error codes"]
    pub fn krb5_c_crypto_length(
        context: krb5_context,
        enctype: krb5_enctype,
        type_: krb5_cryptotype,
        size: *mut ::std::os::raw::c_uint,
    ) -> krb5_error_code;
}
extern "C" {
    #[doc = " Fill in lengths for header, trailer and padding in a IOV array."]
    #[doc = ""]
    #[doc = " @param [in]      context      Library context"]
    #[doc = " @param [in]      enctype      Encryption type"]
    #[doc = " @param [in,out]  data         IOV array"]
    #[doc = " @param [in]      num_data     Size of @a data"]
    #[doc = ""]
    #[doc = " Padding is set to the actual padding required based on the provided"]
    #[doc = " @a data buffers. Typically this API is used after setting up the data"]
    #[doc = " buffers and #KRB5_CRYPTO_TYPE_SIGN_ONLY buffers, but before actually"]
    #[doc = " allocating header, trailer and padding."]
    #[doc = ""]
    #[doc = " @retval 0 Success; otherwise - Kerberos error codes"]
    pub fn krb5_c_crypto_length_iov(
        context: krb5_context,
        enctype: krb5_enctype,
        data: *mut krb5_crypto_iov,
        num_data: size_t,
    ) -> krb5_error_code;
}
extern "C" {
    #[doc = " Return a number of padding octets."]
    #[doc = ""]
    #[doc = " @param [in]  context      Library context"]
    #[doc = " @param [in]  enctype      Encryption type"]
    #[doc = " @param [in]  data_length  Length of the plaintext to pad"]
    #[doc = " @param [out] size         Number of padding octets"]
    #[doc = ""]
    #[doc = " This function returns the number of the padding octets required to pad"]
    #[doc = " @a data_length octets of plaintext."]
    #[doc = ""]
    #[doc = " @retval 0 Success; otherwise - KRB5_BAD_ENCTYPE"]
    pub fn krb5_c_padding_length(
        context: krb5_context,
        enctype: krb5_enctype,
        data_length: size_t,
        size: *mut ::std::os::raw::c_uint,
    ) -> krb5_error_code;
}
extern "C" {
    #[doc = " Create a krb5_key from the enctype and key data in a keyblock."]
    #[doc = ""]
    #[doc = " @param [in]  context      Library context"]
    #[doc = " @param [in]  key_data     Keyblock"]
    #[doc = " @param [out] out          Opaque key"]
    #[doc = ""]
    #[doc = " The reference count on a key @a out is set to 1."]
    #[doc = " Use krb5_k_free_key() to free @a out when it is no longer needed."]
    #[doc = ""]
    #[doc = " @retval 0 Success; otherwise - KRB5_BAD_ENCTYPE"]
    pub fn krb5_k_create_key(
        context: krb5_context,
        key_data: *const krb5_keyblock,
        out: *mut krb5_key,
    ) -> krb5_error_code;
}
extern "C" {
    #[doc = " Increment the reference count on a key."]
    pub fn krb5_k_reference_key(context: krb5_context, key: krb5_key);
}
extern "C" {
    #[doc = " Decrement the reference count on a key and free it if it hits zero."]
    pub fn krb5_k_free_key(context: krb5_context, key: krb5_key);
}
extern "C" {
    #[doc = " Retrieve a copy of the keyblock from a krb5_key structure."]
    pub fn krb5_k_key_keyblock(
        context: krb5_context,
        key: krb5_key,
        key_data: *mut *mut krb5_keyblock,
    ) -> krb5_error_code;
}
extern "C" {
    #[doc = " Retrieve the enctype of a krb5_key structure."]
    pub fn krb5_k_key_enctype(context: krb5_context, key: krb5_key) -> krb5_enctype;
}
extern "C" {
    #[doc = " Encrypt data using a key (operates on opaque key)."]
    #[doc = ""]
    #[doc = " @param [in]     context      Library context"]
    #[doc = " @param [in]     key          Encryption key"]
    #[doc = " @param [in]     usage        Key usage (see @ref KRB5_KEYUSAGE types)"]
    #[doc = " @param [in,out] cipher_state Cipher state; specify NULL if not needed"]
    #[doc = " @param [in]     input        Data to be encrypted"]
    #[doc = " @param [out]    output       Encrypted data"]
    #[doc = ""]
    #[doc = " This function encrypts the data block @a input and stores the output into @a"]
    #[doc = " output.  The actual encryption key will be derived from @a key and @a usage"]
    #[doc = " if key derivation is specified for the encryption type.  If non-null, @a"]
    #[doc = " cipher_state specifies the beginning state for the encryption operation, and"]
    #[doc = " is updated with the state to be passed as input to the next operation."]
    #[doc = ""]
    #[doc = " @note The caller must initialize @a output and allocate at least enough"]
    #[doc = " space for the result (using krb5_c_encrypt_length() to determine the amount"]
    #[doc = " of space needed).  @a output->length will be set to the actual length of the"]
    #[doc = " ciphertext."]
    #[doc = ""]
    #[doc = " @retval 0 Success; otherwise - Kerberos error codes"]
    pub fn krb5_k_encrypt(
        context: krb5_context,
        key: krb5_key,
        usage: krb5_keyusage,
        cipher_state: *const krb5_data,
        input: *const krb5_data,
        output: *mut krb5_enc_data,
    ) -> krb5_error_code;
}
extern "C" {
    #[doc = " Encrypt data in place supporting AEAD (operates on opaque key)."]
    #[doc = ""]
    #[doc = " @param [in]     context         Library context"]
    #[doc = " @param [in]     key             Encryption key"]
    #[doc = " @param [in]     usage           Key usage (see @ref KRB5_KEYUSAGE types)"]
    #[doc = " @param [in]     cipher_state    Cipher state; specify NULL if not needed"]
    #[doc = " @param [in,out] data            IOV array. Modified in-place."]
    #[doc = " @param [in]     num_data        Size of @a data"]
    #[doc = ""]
    #[doc = " This function encrypts the data block @a data and stores the output in-place."]
    #[doc = " The actual encryption key will be derived from @a key and @a usage"]
    #[doc = " if key derivation is specified for the encryption type.  If non-null, @a"]
    #[doc = " cipher_state specifies the beginning state for the encryption operation, and"]
    #[doc = " is updated with the state to be passed as input to the next operation."]
    #[doc = " The caller must allocate the right number of krb5_crypto_iov"]
    #[doc = " structures before calling into this API."]
    #[doc = ""]
    #[doc = " @note On return from a krb5_c_encrypt_iov() call, the @a data->length in the"]
    #[doc = " iov structure are adjusted to reflect actual lengths of the ciphertext used."]
    #[doc = " For example, if the padding length is too large, the length will be reduced."]
    #[doc = " Lengths are never increased."]
    #[doc = ""]
    #[doc = " @note This function is similar to krb5_c_encrypt_iov(), but operates"]
    #[doc = " on opaque key @a key."]
    #[doc = ""]
    #[doc = " @sa krb5_k_decrypt_iov()"]
    #[doc = ""]
    #[doc = " @retval 0 Success; otherwise - Kerberos error codes"]
    pub fn krb5_k_encrypt_iov(
        context: krb5_context,
        key: krb5_key,
        usage: krb5_keyusage,
        cipher_state: *const krb5_data,
        data: *mut krb5_crypto_iov,
        num_data: size_t,
    ) -> krb5_error_code;
}
extern "C" {
    #[doc = " Decrypt data using a key (operates on opaque key)."]
    #[doc = ""]
    #[doc = " @param [in]     context      Library context"]
    #[doc = " @param [in]     key          Encryption key"]
    #[doc = " @param [in]     usage        Key usage (see @ref KRB5_KEYUSAGE types)"]
    #[doc = " @param [in,out] cipher_state Cipher state; specify NULL if not needed"]
    #[doc = " @param [in]     input        Encrypted data"]
    #[doc = " @param [out]    output       Decrypted data"]
    #[doc = ""]
    #[doc = " This function decrypts the data block @a input and stores the output into @a"]
    #[doc = " output. The actual decryption key will be derived from @a key and @a usage"]
    #[doc = " if key derivation is specified for the encryption type.  If non-null, @a"]
    #[doc = " cipher_state specifies the beginning state for the decryption operation, and"]
    #[doc = " is updated with the state to be passed as input to the next operation."]
    #[doc = ""]
    #[doc = " @note The caller must initialize @a output and allocate at least enough"]
    #[doc = " space for the result.  The usual practice is to allocate an output buffer as"]
    #[doc = " long as the ciphertext, and let krb5_c_decrypt() trim @a output->length."]
    #[doc = " For some enctypes, the resulting @a output->length may include padding"]
    #[doc = " bytes."]
    #[doc = ""]
    #[doc = " @retval 0 Success; otherwise - Kerberos error codes"]
    pub fn krb5_k_decrypt(
        context: krb5_context,
        key: krb5_key,
        usage: krb5_keyusage,
        cipher_state: *const krb5_data,
        input: *const krb5_enc_data,
        output: *mut krb5_data,
    ) -> krb5_error_code;
}
extern "C" {
    #[doc = " Decrypt data in place supporting AEAD (operates on opaque key)."]
    #[doc = ""]
    #[doc = " @param [in]     context         Library context"]
    #[doc = " @param [in]     key             Encryption key"]
    #[doc = " @param [in]     usage           Key usage (see @ref KRB5_KEYUSAGE types)"]
    #[doc = " @param [in]     cipher_state    Cipher state; specify NULL if not needed"]
    #[doc = " @param [in,out] data            IOV array. Modified in-place."]
    #[doc = " @param [in]     num_data        Size of @a data"]
    #[doc = ""]
    #[doc = " This function decrypts the data block @a data and stores the output in-place."]
    #[doc = " The actual decryption key will be derived from @a key and @a usage"]
    #[doc = " if key derivation is specified for the encryption type.  If non-null, @a"]
    #[doc = " cipher_state specifies the beginning state for the decryption operation, and"]
    #[doc = " is updated with the state to be passed as input to the next operation."]
    #[doc = " The caller must allocate the right number of krb5_crypto_iov"]
    #[doc = " structures before calling into this API."]
    #[doc = ""]
    #[doc = " @note On return from a krb5_c_decrypt_iov() call, the @a data->length in the"]
    #[doc = " iov structure are adjusted to reflect actual lengths of the ciphertext used."]
    #[doc = " For example, if the padding length is too large, the length will be reduced."]
    #[doc = " Lengths are never increased."]
    #[doc = ""]
    #[doc = " @note This function is similar to krb5_c_decrypt_iov(), but operates"]
    #[doc = " on opaque key @a key."]
    #[doc = ""]
    #[doc = " @sa krb5_k_encrypt_iov()"]
    #[doc = ""]
    #[doc = " @retval 0 Success; otherwise - Kerberos error codes"]
    pub fn krb5_k_decrypt_iov(
        context: krb5_context,
        key: krb5_key,
        usage: krb5_keyusage,
        cipher_state: *const krb5_data,
        data: *mut krb5_crypto_iov,
        num_data: size_t,
    ) -> krb5_error_code;
}
extern "C" {
    #[doc = " Compute a checksum (operates on opaque key)."]
    #[doc = ""]
    #[doc = " @param [in]  context         Library context"]
    #[doc = " @param [in]  cksumtype       Checksum type (0 for mandatory type)"]
    #[doc = " @param [in]  key             Encryption key for a keyed checksum"]
    #[doc = " @param [in]  usage           Key usage (see @ref KRB5_KEYUSAGE types)"]
    #[doc = " @param [in]  input           Input data"]
    #[doc = " @param [out] cksum           Generated checksum"]
    #[doc = ""]
    #[doc = " This function computes a checksum of type @a cksumtype over @a input, using"]
    #[doc = " @a key if the checksum type is a keyed checksum.  If @a cksumtype is 0 and"]
    #[doc = " @a key is non-null, the checksum type will be the mandatory-to-implement"]
    #[doc = " checksum type for the key's encryption type.  The actual checksum key will"]
    #[doc = " be derived from @a key and @a usage if key derivation is specified for the"]
    #[doc = " checksum type.  The newly created @a cksum must be released by calling"]
    #[doc = " krb5_free_checksum_contents() when it is no longer needed."]
    #[doc = ""]
    #[doc = " @note This function is similar to krb5_c_make_checksum(), but operates"]
    #[doc = " on opaque @a key."]
    #[doc = ""]
    #[doc = " @sa krb5_c_verify_checksum()"]
    #[doc = ""]
    #[doc = " @retval 0 Success; otherwise - Kerberos error codes"]
    pub fn krb5_k_make_checksum(
        context: krb5_context,
        cksumtype: krb5_cksumtype,
        key: krb5_key,
        usage: krb5_keyusage,
        input: *const krb5_data,
        cksum: *mut krb5_checksum,
    ) -> krb5_error_code;
}
extern "C" {
    #[doc = " Fill in a checksum element in IOV array (operates on opaque key)"]
    #[doc = ""]
    #[doc = " @param [in]     context         Library context"]
    #[doc = " @param [in]     cksumtype       Checksum type (0 for mandatory type)"]
    #[doc = " @param [in]     key             Encryption key for a keyed checksum"]
    #[doc = " @param [in]     usage           Key usage (see @ref KRB5_KEYUSAGE types)"]
    #[doc = " @param [in,out] data            IOV array"]
    #[doc = " @param [in]     num_data        Size of @a data"]
    #[doc = ""]
    #[doc = " Create a checksum in the #KRB5_CRYPTO_TYPE_CHECKSUM element over"]
    #[doc = " #KRB5_CRYPTO_TYPE_DATA and #KRB5_CRYPTO_TYPE_SIGN_ONLY chunks in @a data."]
    #[doc = " Only the #KRB5_CRYPTO_TYPE_CHECKSUM region is modified."]
    #[doc = ""]
    #[doc = " @note This function is similar to krb5_c_make_checksum_iov(), but operates"]
    #[doc = " on opaque @a key."]
    #[doc = ""]
    #[doc = " @sa krb5_k_verify_checksum_iov()"]
    #[doc = ""]
    #[doc = " @retval 0 Success; otherwise - Kerberos error codes"]
    pub fn krb5_k_make_checksum_iov(
        context: krb5_context,
        cksumtype: krb5_cksumtype,
        key: krb5_key,
        usage: krb5_keyusage,
        data: *mut krb5_crypto_iov,
        num_data: size_t,
    ) -> krb5_error_code;
}
extern "C" {
    #[doc = " Verify a checksum (operates on opaque key)."]
    #[doc = ""]
    #[doc = " @param [in]  context         Library context"]
    #[doc = " @param [in]  key             Encryption key for a keyed checksum"]
    #[doc = " @param [in]  usage           @a key usage"]
    #[doc = " @param [in]  data            Data to be used to compute a new checksum"]
    #[doc = "                              using @a key to compare @a cksum against"]
    #[doc = " @param [in]  cksum           Checksum to be verified"]
    #[doc = " @param [out] valid           Non-zero for success, zero for failure"]
    #[doc = ""]
    #[doc = " This function verifies that @a cksum is a valid checksum for @a data.  If"]
    #[doc = " the checksum type of @a cksum is a keyed checksum, @a key is used to verify"]
    #[doc = " the checksum.  If the checksum type in @a cksum is 0 and @a key is not NULL,"]
    #[doc = " the mandatory checksum type for @a key will be used.  The actual checksum"]
    #[doc = " key will be derived from @a key and @a usage if key derivation is specified"]
    #[doc = " for the checksum type."]
    #[doc = ""]
    #[doc = " @note This function is similar to krb5_c_verify_checksum(), but operates"]
    #[doc = " on opaque @a key."]
    #[doc = ""]
    #[doc = " @retval 0 Success; otherwise - Kerberos error codes"]
    pub fn krb5_k_verify_checksum(
        context: krb5_context,
        key: krb5_key,
        usage: krb5_keyusage,
        data: *const krb5_data,
        cksum: *const krb5_checksum,
        valid: *mut krb5_boolean,
    ) -> krb5_error_code;
}
extern "C" {
    #[doc = " Validate a checksum element in IOV array (operates on opaque key)."]
    #[doc = ""]
    #[doc = " @param [in]     context         Library context"]
    #[doc = " @param [in]     cksumtype       Checksum type (0 for mandatory type)"]
    #[doc = " @param [in]     key             Encryption key for a keyed checksum"]
    #[doc = " @param [in]     usage           Key usage (see @ref KRB5_KEYUSAGE types)"]
    #[doc = " @param [in]     data            IOV array"]
    #[doc = " @param [in]     num_data        Size of @a data"]
    #[doc = " @param [out]    valid           Non-zero for success, zero for failure"]
    #[doc = ""]
    #[doc = " Confirm that the checksum in the #KRB5_CRYPTO_TYPE_CHECKSUM element is a"]
    #[doc = " valid checksum of the #KRB5_CRYPTO_TYPE_DATA and #KRB5_CRYPTO_TYPE_SIGN_ONLY"]
    #[doc = " regions in the iov."]
    #[doc = ""]
    #[doc = " @note This function is similar to krb5_c_verify_checksum_iov(), but operates"]
    #[doc = " on opaque @a key."]
    #[doc = ""]
    #[doc = " @sa krb5_k_make_checksum_iov()"]
    #[doc = ""]
    #[doc = " @retval 0 Success; otherwise - Kerberos error codes"]
    pub fn krb5_k_verify_checksum_iov(
        context: krb5_context,
        cksumtype: krb5_cksumtype,
        key: krb5_key,
        usage: krb5_keyusage,
        data: *const krb5_crypto_iov,
        num_data: size_t,
        valid: *mut krb5_boolean,
    ) -> krb5_error_code;
}
extern "C" {
    #[doc = " Generate enctype-specific pseudo-random bytes (operates on opaque key)."]
    #[doc = ""]
    #[doc = " @param [in]  context      Library context"]
    #[doc = " @param [in]  key          Key"]
    #[doc = " @param [in]  input        Input data"]
    #[doc = " @param [out] output       Output data"]
    #[doc = ""]
    #[doc = " This function selects a pseudo-random function based on @a key and"]
    #[doc = " computes its value over @a input, placing the result into @a output."]
    #[doc = " The caller must preinitialize @a output and allocate space for the"]
    #[doc = " result."]
    #[doc = ""]
    #[doc = " @note This function is similar to krb5_c_prf(), but operates"]
    #[doc = " on opaque @a key."]
    #[doc = ""]
    #[doc = " @retval 0 Success; otherwise - Kerberos error codes"]
    pub fn krb5_k_prf(
        context: krb5_context,
        key: krb5_key,
        input: *mut krb5_data,
        output: *mut krb5_data,
    ) -> krb5_error_code;
}
extern "C" {
    #[doc = " @deprecated Replaced by krb5_c_* API family."]
    pub fn krb5_encrypt(
        context: krb5_context,
        inptr: krb5_const_pointer,
        outptr: krb5_pointer,
        size: size_t,
        eblock: *mut krb5_encrypt_block,
        ivec: krb5_pointer,
    ) -> krb5_error_code;
}
extern "C" {
    #[doc = " @deprecated Replaced by krb5_c_* API family."]
    pub fn krb5_decrypt(
        context: krb5_context,
        inptr: krb5_const_pointer,
        outptr: krb5_pointer,
        size: size_t,
        eblock: *mut krb5_encrypt_block,
        ivec: krb5_pointer,
    ) -> krb5_error_code;
}
extern "C" {
    #[doc = " @deprecated Replaced by krb5_c_* API family."]
    pub fn krb5_process_key(
        context: krb5_context,
        eblock: *mut krb5_encrypt_block,
        key: *const krb5_keyblock,
    ) -> krb5_error_code;
}
extern "C" {
    #[doc = " @deprecated Replaced by krb5_c_* API family."]
    pub fn krb5_finish_key(
        context: krb5_context,
        eblock: *mut krb5_encrypt_block,
    ) -> krb5_error_code;
}
extern "C" {
    #[doc = " @deprecated See krb5_c_string_to_key()"]
    pub fn krb5_string_to_key(
        context: krb5_context,
        eblock: *const krb5_encrypt_block,
        keyblock: *mut krb5_keyblock,
        data: *const krb5_data,
        salt: *const krb5_data,
    ) -> krb5_error_code;
}
extern "C" {
    #[doc = " @deprecated Replaced by krb5_c_* API family."]
    pub fn krb5_init_random_key(
        context: krb5_context,
        eblock: *const krb5_encrypt_block,
        keyblock: *const krb5_keyblock,
        ptr: *mut krb5_pointer,
    ) -> krb5_error_code;
}
extern "C" {
    #[doc = " @deprecated Replaced by krb5_c_* API family."]
    pub fn krb5_finish_random_key(
        context: krb5_context,
        eblock: *const krb5_encrypt_block,
        ptr: *mut krb5_pointer,
    ) -> krb5_error_code;
}
extern "C" {
    #[doc = " @deprecated Replaced by krb5_c_* API family."]
    pub fn krb5_random_key(
        context: krb5_context,
        eblock: *const krb5_encrypt_block,
        ptr: krb5_pointer,
        keyblock: *mut *mut krb5_keyblock,
    ) -> krb5_error_code;
}
extern "C" {
    #[doc = " @deprecated Replaced by krb5_c_* API family."]
    pub fn krb5_eblock_enctype(
        context: krb5_context,
        eblock: *const krb5_encrypt_block,
    ) -> krb5_enctype;
}
extern "C" {
    #[doc = " @deprecated Replaced by krb5_c_* API family."]
    pub fn krb5_use_enctype(
        context: krb5_context,
        eblock: *mut krb5_encrypt_block,
        enctype: krb5_enctype,
    ) -> krb5_error_code;
}
extern "C" {
    #[doc = " @deprecated Replaced by krb5_c_* API family."]
    pub fn krb5_encrypt_size(length: size_t, crypto: krb5_enctype) -> size_t;
}
extern "C" {
    #[doc = " @deprecated See krb5_c_checksum_length()"]
    pub fn krb5_checksum_size(context: krb5_context, ctype: krb5_cksumtype) -> size_t;
}
extern "C" {
    #[doc = " @deprecated See krb5_c_make_checksum()"]
    pub fn krb5_calculate_checksum(
        context: krb5_context,
        ctype: krb5_cksumtype,
        in_: krb5_const_pointer,
        in_length: size_t,
        seed: krb5_const_pointer,
        seed_length: size_t,
        outcksum: *mut krb5_checksum,
    ) -> krb5_error_code;
}
extern "C" {
    #[doc = " @deprecated See krb5_c_verify_checksum()"]
    pub fn krb5_verify_checksum(
        context: krb5_context,
        ctype: krb5_cksumtype,
        cksum: *const krb5_checksum,
        in_: krb5_const_pointer,
        in_length: size_t,
        seed: krb5_const_pointer,
        seed_length: size_t,
    ) -> krb5_error_code;
}
#[doc = " Ticket start time, end time, and renewal duration."]
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _krb5_ticket_times {
    #[doc = "< Time at which KDC issued the initial ticket that corresponds to this ticket"]
    pub authtime: krb5_timestamp,
    #[doc = "< optional in ticket, if not present, use @a authtime"]
    pub starttime: krb5_timestamp,
    #[doc = "< Ticket expiration time"]
    pub endtime: krb5_timestamp,
    #[doc = "< Latest time at which renewal of ticket can be valid"]
    pub renew_till: krb5_timestamp,
}
#[test]
fn bindgen_test_layout__krb5_ticket_times() {
    assert_eq!(
        ::std::mem::size_of::<_krb5_ticket_times>(),
        16usize,
        concat!("Size of: ", stringify!(_krb5_ticket_times))
    );
    assert_eq!(
        ::std::mem::align_of::<_krb5_ticket_times>(),
        4usize,
        concat!("Alignment of ", stringify!(_krb5_ticket_times))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_krb5_ticket_times>())).authtime as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_krb5_ticket_times),
            "::",
            stringify!(authtime)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_krb5_ticket_times>())).starttime as *const _ as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(_krb5_ticket_times),
            "::",
            stringify!(starttime)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_krb5_ticket_times>())).endtime as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(_krb5_ticket_times),
            "::",
            stringify!(endtime)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_krb5_ticket_times>())).renew_till as *const _ as usize },
        12usize,
        concat!(
            "Offset of field: ",
            stringify!(_krb5_ticket_times),
            "::",
            stringify!(renew_till)
        )
    );
}
#[doc = " Ticket start time, end time, and renewal duration."]
pub type krb5_ticket_times = _krb5_ticket_times;
#[doc = " Structure for auth data"]
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _krb5_authdata {
    pub magic: krb5_magic,
    #[doc = "< ADTYPE"]
    pub ad_type: krb5_authdatatype,
    #[doc = "< Length of data"]
    pub length: ::std::os::raw::c_uint,
    #[doc = "< Data"]
    pub contents: *mut krb5_octet,
}
#[test]
fn bindgen_test_layout__krb5_authdata() {
    assert_eq!(
        ::std::mem::size_of::<_krb5_authdata>(),
        24usize,
        concat!("Size of: ", stringify!(_krb5_authdata))
    );
    assert_eq!(
        ::std::mem::align_of::<_krb5_authdata>(),
        8usize,
        concat!("Alignment of ", stringify!(_krb5_authdata))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_krb5_authdata>())).magic as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_krb5_authdata),
            "::",
            stringify!(magic)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_krb5_authdata>())).ad_type as *const _ as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(_krb5_authdata),
            "::",
            stringify!(ad_type)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_krb5_authdata>())).length as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(_krb5_authdata),
            "::",
            stringify!(length)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_krb5_authdata>())).contents as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(_krb5_authdata),
            "::",
            stringify!(contents)
        )
    );
}
#[doc = " Structure for auth data"]
pub type krb5_authdata = _krb5_authdata;
#[doc = " Structure for transited encoding"]
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _krb5_transited {
    pub magic: krb5_magic,
    #[doc = "< Transited encoding type"]
    pub tr_type: krb5_octet,
    #[doc = "< Contents"]
    pub tr_contents: krb5_data,
}
#[test]
fn bindgen_test_layout__krb5_transited() {
    assert_eq!(
        ::std::mem::size_of::<_krb5_transited>(),
        24usize,
        concat!("Size of: ", stringify!(_krb5_transited))
    );
    assert_eq!(
        ::std::mem::align_of::<_krb5_transited>(),
        8usize,
        concat!("Alignment of ", stringify!(_krb5_transited))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_krb5_transited>())).magic as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_krb5_transited),
            "::",
            stringify!(magic)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_krb5_transited>())).tr_type as *const _ as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(_krb5_transited),
            "::",
            stringify!(tr_type)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_krb5_transited>())).tr_contents as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(_krb5_transited),
            "::",
            stringify!(tr_contents)
        )
    );
}
#[doc = " Structure for transited encoding"]
pub type krb5_transited = _krb5_transited;
#[doc = " Encrypted part of ticket."]
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _krb5_enc_tkt_part {
    pub magic: krb5_magic,
    #[doc = "< flags"]
    pub flags: krb5_flags,
    #[doc = "< session key: includes enctype"]
    pub session: *mut krb5_keyblock,
    #[doc = "< client name/realm"]
    pub client: krb5_principal,
    #[doc = "< list of transited realms"]
    pub transited: krb5_transited,
    #[doc = "< auth, start, end, renew_till"]
    pub times: krb5_ticket_times,
    #[doc = "< array of ptrs to addresses"]
    pub caddrs: *mut *mut krb5_address,
    #[doc = "< auth data"]
    pub authorization_data: *mut *mut krb5_authdata,
}
#[test]
fn bindgen_test_layout__krb5_enc_tkt_part() {
    assert_eq!(
        ::std::mem::size_of::<_krb5_enc_tkt_part>(),
        80usize,
        concat!("Size of: ", stringify!(_krb5_enc_tkt_part))
    );
    assert_eq!(
        ::std::mem::align_of::<_krb5_enc_tkt_part>(),
        8usize,
        concat!("Alignment of ", stringify!(_krb5_enc_tkt_part))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_krb5_enc_tkt_part>())).magic as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_krb5_enc_tkt_part),
            "::",
            stringify!(magic)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_krb5_enc_tkt_part>())).flags as *const _ as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(_krb5_enc_tkt_part),
            "::",
            stringify!(flags)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_krb5_enc_tkt_part>())).session as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(_krb5_enc_tkt_part),
            "::",
            stringify!(session)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_krb5_enc_tkt_part>())).client as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(_krb5_enc_tkt_part),
            "::",
            stringify!(client)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_krb5_enc_tkt_part>())).transited as *const _ as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(_krb5_enc_tkt_part),
            "::",
            stringify!(transited)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_krb5_enc_tkt_part>())).times as *const _ as usize },
        48usize,
        concat!(
            "Offset of field: ",
            stringify!(_krb5_enc_tkt_part),
            "::",
            stringify!(times)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_krb5_enc_tkt_part>())).caddrs as *const _ as usize },
        64usize,
        concat!(
            "Offset of field: ",
            stringify!(_krb5_enc_tkt_part),
            "::",
            stringify!(caddrs)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_krb5_enc_tkt_part>())).authorization_data as *const _ as usize
        },
        72usize,
        concat!(
            "Offset of field: ",
            stringify!(_krb5_enc_tkt_part),
            "::",
            stringify!(authorization_data)
        )
    );
}
#[doc = " Encrypted part of ticket."]
pub type krb5_enc_tkt_part = _krb5_enc_tkt_part;
#[doc = " Ticket structure."]
#[doc = ""]
#[doc = " The C representation of the ticket message, with a pointer to the"]
#[doc = " C representation of the encrypted part."]
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _krb5_ticket {
    pub magic: krb5_magic,
    #[doc = "< server name/realm"]
    pub server: krb5_principal,
    #[doc = "< encryption type, kvno, encrypted encoding"]
    pub enc_part: krb5_enc_data,
    #[doc = "< ptr to decrypted version, if available"]
    pub enc_part2: *mut krb5_enc_tkt_part,
}
#[test]
fn bindgen_test_layout__krb5_ticket() {
    assert_eq!(
        ::std::mem::size_of::<_krb5_ticket>(),
        56usize,
        concat!("Size of: ", stringify!(_krb5_ticket))
    );
    assert_eq!(
        ::std::mem::align_of::<_krb5_ticket>(),
        8usize,
        concat!("Alignment of ", stringify!(_krb5_ticket))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_krb5_ticket>())).magic as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_krb5_ticket),
            "::",
            stringify!(magic)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_krb5_ticket>())).server as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(_krb5_ticket),
            "::",
            stringify!(server)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_krb5_ticket>())).enc_part as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(_krb5_ticket),
            "::",
            stringify!(enc_part)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_krb5_ticket>())).enc_part2 as *const _ as usize },
        48usize,
        concat!(
            "Offset of field: ",
            stringify!(_krb5_ticket),
            "::",
            stringify!(enc_part2)
        )
    );
}
#[doc = " Ticket structure."]
#[doc = ""]
#[doc = " The C representation of the ticket message, with a pointer to the"]
#[doc = " C representation of the encrypted part."]
pub type krb5_ticket = _krb5_ticket;
#[doc = " Ticket authenticator."]
#[doc = ""]
#[doc = " The C representation of an unencrypted authenticator."]
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _krb5_authenticator {
    pub magic: krb5_magic,
    #[doc = "< client name/realm"]
    pub client: krb5_principal,
    #[doc = "< checksum, includes type, optional"]
    pub checksum: *mut krb5_checksum,
    #[doc = "< client usec portion"]
    pub cusec: krb5_int32,
    #[doc = "< client sec portion"]
    pub ctime: krb5_timestamp,
    #[doc = "< true session key, optional"]
    pub subkey: *mut krb5_keyblock,
    #[doc = "< sequence #, optional"]
    pub seq_number: krb5_ui_4,
    #[doc = "< authoriazation data"]
    pub authorization_data: *mut *mut krb5_authdata,
}
#[test]
fn bindgen_test_layout__krb5_authenticator() {
    assert_eq!(
        ::std::mem::size_of::<_krb5_authenticator>(),
        56usize,
        concat!("Size of: ", stringify!(_krb5_authenticator))
    );
    assert_eq!(
        ::std::mem::align_of::<_krb5_authenticator>(),
        8usize,
        concat!("Alignment of ", stringify!(_krb5_authenticator))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_krb5_authenticator>())).magic as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_krb5_authenticator),
            "::",
            stringify!(magic)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_krb5_authenticator>())).client as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(_krb5_authenticator),
            "::",
            stringify!(client)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_krb5_authenticator>())).checksum as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(_krb5_authenticator),
            "::",
            stringify!(checksum)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_krb5_authenticator>())).cusec as *const _ as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(_krb5_authenticator),
            "::",
            stringify!(cusec)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_krb5_authenticator>())).ctime as *const _ as usize },
        28usize,
        concat!(
            "Offset of field: ",
            stringify!(_krb5_authenticator),
            "::",
            stringify!(ctime)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_krb5_authenticator>())).subkey as *const _ as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(_krb5_authenticator),
            "::",
            stringify!(subkey)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_krb5_authenticator>())).seq_number as *const _ as usize },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(_krb5_authenticator),
            "::",
            stringify!(seq_number)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_krb5_authenticator>())).authorization_data as *const _ as usize
        },
        48usize,
        concat!(
            "Offset of field: ",
            stringify!(_krb5_authenticator),
            "::",
            stringify!(authorization_data)
        )
    );
}
#[doc = " Ticket authenticator."]
#[doc = ""]
#[doc = " The C representation of an unencrypted authenticator."]
pub type krb5_authenticator = _krb5_authenticator;
#[doc = " Ticket authentication data."]
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _krb5_tkt_authent {
    pub magic: krb5_magic,
    pub ticket: *mut krb5_ticket,
    pub authenticator: *mut krb5_authenticator,
    pub ap_options: krb5_flags,
}
#[test]
fn bindgen_test_layout__krb5_tkt_authent() {
    assert_eq!(
        ::std::mem::size_of::<_krb5_tkt_authent>(),
        32usize,
        concat!("Size of: ", stringify!(_krb5_tkt_authent))
    );
    assert_eq!(
        ::std::mem::align_of::<_krb5_tkt_authent>(),
        8usize,
        concat!("Alignment of ", stringify!(_krb5_tkt_authent))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_krb5_tkt_authent>())).magic as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_krb5_tkt_authent),
            "::",
            stringify!(magic)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_krb5_tkt_authent>())).ticket as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(_krb5_tkt_authent),
            "::",
            stringify!(ticket)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_krb5_tkt_authent>())).authenticator as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(_krb5_tkt_authent),
            "::",
            stringify!(authenticator)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_krb5_tkt_authent>())).ap_options as *const _ as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(_krb5_tkt_authent),
            "::",
            stringify!(ap_options)
        )
    );
}
#[doc = " Ticket authentication data."]
pub type krb5_tkt_authent = _krb5_tkt_authent;
#[doc = " Credentials structure including ticket, session key, and lifetime info."]
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _krb5_creds {
    pub magic: krb5_magic,
    #[doc = "< client's principal identifier"]
    pub client: krb5_principal,
    #[doc = "< server's principal identifier"]
    pub server: krb5_principal,
    #[doc = "< session encryption key info"]
    pub keyblock: krb5_keyblock,
    #[doc = "< lifetime info"]
    pub times: krb5_ticket_times,
    #[doc = "< true if ticket is encrypted in"]
    #[doc = "another ticket's skey"]
    pub is_skey: krb5_boolean,
    #[doc = "< flags in ticket"]
    pub ticket_flags: krb5_flags,
    #[doc = "< addrs in ticket"]
    pub addresses: *mut *mut krb5_address,
    #[doc = "< ticket string itself"]
    pub ticket: krb5_data,
    #[doc = "< second ticket, if related to"]
    #[doc = "ticket (via DUPLICATE-SKEY or"]
    #[doc = "ENC-TKT-IN-SKEY)"]
    pub second_ticket: krb5_data,
    #[doc = "< authorization data"]
    pub authdata: *mut *mut krb5_authdata,
}
#[test]
fn bindgen_test_layout__krb5_creds() {
    assert_eq!(
        ::std::mem::size_of::<_krb5_creds>(),
        120usize,
        concat!("Size of: ", stringify!(_krb5_creds))
    );
    assert_eq!(
        ::std::mem::align_of::<_krb5_creds>(),
        8usize,
        concat!("Alignment of ", stringify!(_krb5_creds))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_krb5_creds>())).magic as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_krb5_creds),
            "::",
            stringify!(magic)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_krb5_creds>())).client as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(_krb5_creds),
            "::",
            stringify!(client)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_krb5_creds>())).server as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(_krb5_creds),
            "::",
            stringify!(server)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_krb5_creds>())).keyblock as *const _ as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(_krb5_creds),
            "::",
            stringify!(keyblock)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_krb5_creds>())).times as *const _ as usize },
        48usize,
        concat!(
            "Offset of field: ",
            stringify!(_krb5_creds),
            "::",
            stringify!(times)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_krb5_creds>())).is_skey as *const _ as usize },
        64usize,
        concat!(
            "Offset of field: ",
            stringify!(_krb5_creds),
            "::",
            stringify!(is_skey)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_krb5_creds>())).ticket_flags as *const _ as usize },
        68usize,
        concat!(
            "Offset of field: ",
            stringify!(_krb5_creds),
            "::",
            stringify!(ticket_flags)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_krb5_creds>())).addresses as *const _ as usize },
        72usize,
        concat!(
            "Offset of field: ",
            stringify!(_krb5_creds),
            "::",
            stringify!(addresses)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_krb5_creds>())).ticket as *const _ as usize },
        80usize,
        concat!(
            "Offset of field: ",
            stringify!(_krb5_creds),
            "::",
            stringify!(ticket)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_krb5_creds>())).second_ticket as *const _ as usize },
        96usize,
        concat!(
            "Offset of field: ",
            stringify!(_krb5_creds),
            "::",
            stringify!(second_ticket)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_krb5_creds>())).authdata as *const _ as usize },
        112usize,
        concat!(
            "Offset of field: ",
            stringify!(_krb5_creds),
            "::",
            stringify!(authdata)
        )
    );
}
#[doc = " Credentials structure including ticket, session key, and lifetime info."]
pub type krb5_creds = _krb5_creds;
#[doc = " Last request entry"]
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _krb5_last_req_entry {
    pub magic: krb5_magic,
    #[doc = "< LR type"]
    pub lr_type: krb5_int32,
    #[doc = "< Timestamp"]
    pub value: krb5_timestamp,
}
#[test]
fn bindgen_test_layout__krb5_last_req_entry() {
    assert_eq!(
        ::std::mem::size_of::<_krb5_last_req_entry>(),
        12usize,
        concat!("Size of: ", stringify!(_krb5_last_req_entry))
    );
    assert_eq!(
        ::std::mem::align_of::<_krb5_last_req_entry>(),
        4usize,
        concat!("Alignment of ", stringify!(_krb5_last_req_entry))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_krb5_last_req_entry>())).magic as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_krb5_last_req_entry),
            "::",
            stringify!(magic)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_krb5_last_req_entry>())).lr_type as *const _ as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(_krb5_last_req_entry),
            "::",
            stringify!(lr_type)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_krb5_last_req_entry>())).value as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(_krb5_last_req_entry),
            "::",
            stringify!(value)
        )
    );
}
#[doc = " Last request entry"]
pub type krb5_last_req_entry = _krb5_last_req_entry;
#[doc = " Pre-authentication data"]
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _krb5_pa_data {
    pub magic: krb5_magic,
    #[doc = "< Preauthentication data type"]
    pub pa_type: krb5_preauthtype,
    #[doc = "< Length of data"]
    pub length: ::std::os::raw::c_uint,
    #[doc = "< Data"]
    pub contents: *mut krb5_octet,
}
#[test]
fn bindgen_test_layout__krb5_pa_data() {
    assert_eq!(
        ::std::mem::size_of::<_krb5_pa_data>(),
        24usize,
        concat!("Size of: ", stringify!(_krb5_pa_data))
    );
    assert_eq!(
        ::std::mem::align_of::<_krb5_pa_data>(),
        8usize,
        concat!("Alignment of ", stringify!(_krb5_pa_data))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_krb5_pa_data>())).magic as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_krb5_pa_data),
            "::",
            stringify!(magic)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_krb5_pa_data>())).pa_type as *const _ as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(_krb5_pa_data),
            "::",
            stringify!(pa_type)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_krb5_pa_data>())).length as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(_krb5_pa_data),
            "::",
            stringify!(length)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_krb5_pa_data>())).contents as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(_krb5_pa_data),
            "::",
            stringify!(contents)
        )
    );
}
#[doc = " Pre-authentication data"]
pub type krb5_pa_data = _krb5_pa_data;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _krb5_typed_data {
    pub magic: krb5_magic,
    pub type_: krb5_int32,
    pub length: ::std::os::raw::c_uint,
    pub data: *mut krb5_octet,
}
#[test]
fn bindgen_test_layout__krb5_typed_data() {
    assert_eq!(
        ::std::mem::size_of::<_krb5_typed_data>(),
        24usize,
        concat!("Size of: ", stringify!(_krb5_typed_data))
    );
    assert_eq!(
        ::std::mem::align_of::<_krb5_typed_data>(),
        8usize,
        concat!("Alignment of ", stringify!(_krb5_typed_data))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_krb5_typed_data>())).magic as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_krb5_typed_data),
            "::",
            stringify!(magic)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_krb5_typed_data>())).type_ as *const _ as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(_krb5_typed_data),
            "::",
            stringify!(type_)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_krb5_typed_data>())).length as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(_krb5_typed_data),
            "::",
            stringify!(length)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_krb5_typed_data>())).data as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(_krb5_typed_data),
            "::",
            stringify!(data)
        )
    );
}
pub type krb5_typed_data = _krb5_typed_data;
#[doc = " C representation of KDC-REQ protocol message, including KDC-REQ-BODY"]
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _krb5_kdc_req {
    pub magic: krb5_magic,
    #[doc = "< KRB5_AS_REQ or KRB5_TGS_REQ"]
    pub msg_type: krb5_msgtype,
    #[doc = "< Preauthentication data"]
    pub padata: *mut *mut krb5_pa_data,
    #[doc = "< Requested options"]
    pub kdc_options: krb5_flags,
    #[doc = "< Client principal and realm"]
    pub client: krb5_principal,
    #[doc = "< Server principal and realm"]
    pub server: krb5_principal,
    #[doc = "< Requested start time"]
    pub from: krb5_timestamp,
    #[doc = "< Requested end time"]
    pub till: krb5_timestamp,
    #[doc = "< Requested renewable end time"]
    pub rtime: krb5_timestamp,
    #[doc = "< Nonce to match request and response"]
    pub nonce: krb5_int32,
    #[doc = "< Number of enctypes"]
    pub nktypes: ::std::os::raw::c_int,
    #[doc = "< Requested enctypes"]
    pub ktype: *mut krb5_enctype,
    #[doc = "< Requested addresses (optional)"]
    pub addresses: *mut *mut krb5_address,
    #[doc = "< Encrypted authz data (optional)"]
    pub authorization_data: krb5_enc_data,
    #[doc = "< Unencrypted authz data"]
    pub unenc_authdata: *mut *mut krb5_authdata,
    #[doc = "< Second ticket array (optional)"]
    pub second_ticket: *mut *mut krb5_ticket,
}
#[test]
fn bindgen_test_layout__krb5_kdc_req() {
    assert_eq!(
        ::std::mem::size_of::<_krb5_kdc_req>(),
        128usize,
        concat!("Size of: ", stringify!(_krb5_kdc_req))
    );
    assert_eq!(
        ::std::mem::align_of::<_krb5_kdc_req>(),
        8usize,
        concat!("Alignment of ", stringify!(_krb5_kdc_req))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_krb5_kdc_req>())).magic as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_krb5_kdc_req),
            "::",
            stringify!(magic)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_krb5_kdc_req>())).msg_type as *const _ as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(_krb5_kdc_req),
            "::",
            stringify!(msg_type)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_krb5_kdc_req>())).padata as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(_krb5_kdc_req),
            "::",
            stringify!(padata)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_krb5_kdc_req>())).kdc_options as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(_krb5_kdc_req),
            "::",
            stringify!(kdc_options)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_krb5_kdc_req>())).client as *const _ as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(_krb5_kdc_req),
            "::",
            stringify!(client)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_krb5_kdc_req>())).server as *const _ as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(_krb5_kdc_req),
            "::",
            stringify!(server)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_krb5_kdc_req>())).from as *const _ as usize },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(_krb5_kdc_req),
            "::",
            stringify!(from)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_krb5_kdc_req>())).till as *const _ as usize },
        44usize,
        concat!(
            "Offset of field: ",
            stringify!(_krb5_kdc_req),
            "::",
            stringify!(till)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_krb5_kdc_req>())).rtime as *const _ as usize },
        48usize,
        concat!(
            "Offset of field: ",
            stringify!(_krb5_kdc_req),
            "::",
            stringify!(rtime)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_krb5_kdc_req>())).nonce as *const _ as usize },
        52usize,
        concat!(
            "Offset of field: ",
            stringify!(_krb5_kdc_req),
            "::",
            stringify!(nonce)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_krb5_kdc_req>())).nktypes as *const _ as usize },
        56usize,
        concat!(
            "Offset of field: ",
            stringify!(_krb5_kdc_req),
            "::",
            stringify!(nktypes)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_krb5_kdc_req>())).ktype as *const _ as usize },
        64usize,
        concat!(
            "Offset of field: ",
            stringify!(_krb5_kdc_req),
            "::",
            stringify!(ktype)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_krb5_kdc_req>())).addresses as *const _ as usize },
        72usize,
        concat!(
            "Offset of field: ",
            stringify!(_krb5_kdc_req),
            "::",
            stringify!(addresses)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_krb5_kdc_req>())).authorization_data as *const _ as usize
        },
        80usize,
        concat!(
            "Offset of field: ",
            stringify!(_krb5_kdc_req),
            "::",
            stringify!(authorization_data)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_krb5_kdc_req>())).unenc_authdata as *const _ as usize },
        112usize,
        concat!(
            "Offset of field: ",
            stringify!(_krb5_kdc_req),
            "::",
            stringify!(unenc_authdata)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_krb5_kdc_req>())).second_ticket as *const _ as usize },
        120usize,
        concat!(
            "Offset of field: ",
            stringify!(_krb5_kdc_req),
            "::",
            stringify!(second_ticket)
        )
    );
}
#[doc = " C representation of KDC-REQ protocol message, including KDC-REQ-BODY"]
pub type krb5_kdc_req = _krb5_kdc_req;
#[doc = " C representation of @c EncKDCRepPart protocol message."]
#[doc = ""]
#[doc = " This is the cleartext message that is encrypted and inserted in @c KDC-REP."]
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _krb5_enc_kdc_rep_part {
    pub magic: krb5_magic,
    #[doc = "< krb5 message type"]
    pub msg_type: krb5_msgtype,
    #[doc = "< Session key"]
    pub session: *mut krb5_keyblock,
    #[doc = "< Array of pointers to entries"]
    pub last_req: *mut *mut krb5_last_req_entry,
    #[doc = "< Nonce from request"]
    pub nonce: krb5_int32,
    #[doc = "< Expiration date"]
    pub key_exp: krb5_timestamp,
    #[doc = "< Ticket flags"]
    pub flags: krb5_flags,
    #[doc = "< Lifetime info"]
    pub times: krb5_ticket_times,
    #[doc = "< Server's principal identifier"]
    pub server: krb5_principal,
    #[doc = "< Array of ptrs to addrs, optional"]
    pub caddrs: *mut *mut krb5_address,
    #[doc = "< Encrypted preauthentication data"]
    pub enc_padata: *mut *mut krb5_pa_data,
}
#[test]
fn bindgen_test_layout__krb5_enc_kdc_rep_part() {
    assert_eq!(
        ::std::mem::size_of::<_krb5_enc_kdc_rep_part>(),
        80usize,
        concat!("Size of: ", stringify!(_krb5_enc_kdc_rep_part))
    );
    assert_eq!(
        ::std::mem::align_of::<_krb5_enc_kdc_rep_part>(),
        8usize,
        concat!("Alignment of ", stringify!(_krb5_enc_kdc_rep_part))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_krb5_enc_kdc_rep_part>())).magic as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_krb5_enc_kdc_rep_part),
            "::",
            stringify!(magic)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_krb5_enc_kdc_rep_part>())).msg_type as *const _ as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(_krb5_enc_kdc_rep_part),
            "::",
            stringify!(msg_type)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_krb5_enc_kdc_rep_part>())).session as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(_krb5_enc_kdc_rep_part),
            "::",
            stringify!(session)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_krb5_enc_kdc_rep_part>())).last_req as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(_krb5_enc_kdc_rep_part),
            "::",
            stringify!(last_req)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_krb5_enc_kdc_rep_part>())).nonce as *const _ as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(_krb5_enc_kdc_rep_part),
            "::",
            stringify!(nonce)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_krb5_enc_kdc_rep_part>())).key_exp as *const _ as usize },
        28usize,
        concat!(
            "Offset of field: ",
            stringify!(_krb5_enc_kdc_rep_part),
            "::",
            stringify!(key_exp)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_krb5_enc_kdc_rep_part>())).flags as *const _ as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(_krb5_enc_kdc_rep_part),
            "::",
            stringify!(flags)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_krb5_enc_kdc_rep_part>())).times as *const _ as usize },
        36usize,
        concat!(
            "Offset of field: ",
            stringify!(_krb5_enc_kdc_rep_part),
            "::",
            stringify!(times)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_krb5_enc_kdc_rep_part>())).server as *const _ as usize },
        56usize,
        concat!(
            "Offset of field: ",
            stringify!(_krb5_enc_kdc_rep_part),
            "::",
            stringify!(server)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_krb5_enc_kdc_rep_part>())).caddrs as *const _ as usize },
        64usize,
        concat!(
            "Offset of field: ",
            stringify!(_krb5_enc_kdc_rep_part),
            "::",
            stringify!(caddrs)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_krb5_enc_kdc_rep_part>())).enc_padata as *const _ as usize
        },
        72usize,
        concat!(
            "Offset of field: ",
            stringify!(_krb5_enc_kdc_rep_part),
            "::",
            stringify!(enc_padata)
        )
    );
}
#[doc = " C representation of @c EncKDCRepPart protocol message."]
#[doc = ""]
#[doc = " This is the cleartext message that is encrypted and inserted in @c KDC-REP."]
pub type krb5_enc_kdc_rep_part = _krb5_enc_kdc_rep_part;
#[doc = " Representation of the @c KDC-REP protocol message."]
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _krb5_kdc_rep {
    pub magic: krb5_magic,
    #[doc = "< KRB5_AS_REP or KRB5_KDC_REP"]
    pub msg_type: krb5_msgtype,
    #[doc = "< Preauthentication data from KDC"]
    pub padata: *mut *mut krb5_pa_data,
    #[doc = "< Client principal and realm"]
    pub client: krb5_principal,
    #[doc = "< Ticket"]
    pub ticket: *mut krb5_ticket,
    #[doc = "< Encrypted part of reply"]
    pub enc_part: krb5_enc_data,
    #[doc = "< Unencrypted version, if available"]
    pub enc_part2: *mut krb5_enc_kdc_rep_part,
}
#[test]
fn bindgen_test_layout__krb5_kdc_rep() {
    assert_eq!(
        ::std::mem::size_of::<_krb5_kdc_rep>(),
        72usize,
        concat!("Size of: ", stringify!(_krb5_kdc_rep))
    );
    assert_eq!(
        ::std::mem::align_of::<_krb5_kdc_rep>(),
        8usize,
        concat!("Alignment of ", stringify!(_krb5_kdc_rep))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_krb5_kdc_rep>())).magic as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_krb5_kdc_rep),
            "::",
            stringify!(magic)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_krb5_kdc_rep>())).msg_type as *const _ as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(_krb5_kdc_rep),
            "::",
            stringify!(msg_type)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_krb5_kdc_rep>())).padata as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(_krb5_kdc_rep),
            "::",
            stringify!(padata)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_krb5_kdc_rep>())).client as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(_krb5_kdc_rep),
            "::",
            stringify!(client)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_krb5_kdc_rep>())).ticket as *const _ as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(_krb5_kdc_rep),
            "::",
            stringify!(ticket)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_krb5_kdc_rep>())).enc_part as *const _ as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(_krb5_kdc_rep),
            "::",
            stringify!(enc_part)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_krb5_kdc_rep>())).enc_part2 as *const _ as usize },
        64usize,
        concat!(
            "Offset of field: ",
            stringify!(_krb5_kdc_rep),
            "::",
            stringify!(enc_part2)
        )
    );
}
#[doc = " Representation of the @c KDC-REP protocol message."]
pub type krb5_kdc_rep = _krb5_kdc_rep;
#[doc = " Error message structure"]
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _krb5_error {
    pub magic: krb5_magic,
    #[doc = "< Client sec portion; optional"]
    pub ctime: krb5_timestamp,
    #[doc = "< Client usec portion; optional"]
    pub cusec: krb5_int32,
    #[doc = "< Server usec portion"]
    pub susec: krb5_int32,
    #[doc = "< Server sec portion"]
    pub stime: krb5_timestamp,
    #[doc = "< Error code (protocol error #'s)"]
    pub error: krb5_ui_4,
    #[doc = "< Client principal and realm"]
    pub client: krb5_principal,
    #[doc = "< Server principal and realm"]
    pub server: krb5_principal,
    #[doc = "< Descriptive text"]
    pub text: krb5_data,
    #[doc = "< Additional error-describing data"]
    pub e_data: krb5_data,
}
#[test]
fn bindgen_test_layout__krb5_error() {
    assert_eq!(
        ::std::mem::size_of::<_krb5_error>(),
        72usize,
        concat!("Size of: ", stringify!(_krb5_error))
    );
    assert_eq!(
        ::std::mem::align_of::<_krb5_error>(),
        8usize,
        concat!("Alignment of ", stringify!(_krb5_error))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_krb5_error>())).magic as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_krb5_error),
            "::",
            stringify!(magic)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_krb5_error>())).ctime as *const _ as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(_krb5_error),
            "::",
            stringify!(ctime)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_krb5_error>())).cusec as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(_krb5_error),
            "::",
            stringify!(cusec)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_krb5_error>())).susec as *const _ as usize },
        12usize,
        concat!(
            "Offset of field: ",
            stringify!(_krb5_error),
            "::",
            stringify!(susec)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_krb5_error>())).stime as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(_krb5_error),
            "::",
            stringify!(stime)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_krb5_error>())).error as *const _ as usize },
        20usize,
        concat!(
            "Offset of field: ",
            stringify!(_krb5_error),
            "::",
            stringify!(error)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_krb5_error>())).client as *const _ as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(_krb5_error),
            "::",
            stringify!(client)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_krb5_error>())).server as *const _ as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(_krb5_error),
            "::",
            stringify!(server)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_krb5_error>())).text as *const _ as usize },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(_krb5_error),
            "::",
            stringify!(text)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_krb5_error>())).e_data as *const _ as usize },
        56usize,
        concat!(
            "Offset of field: ",
            stringify!(_krb5_error),
            "::",
            stringify!(e_data)
        )
    );
}
#[doc = " Error message structure"]
pub type krb5_error = _krb5_error;
#[doc = " Authentication header."]
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _krb5_ap_req {
    pub magic: krb5_magic,
    #[doc = "< Requested options"]
    pub ap_options: krb5_flags,
    #[doc = "< Ticket"]
    pub ticket: *mut krb5_ticket,
    #[doc = "< Encrypted authenticator"]
    pub authenticator: krb5_enc_data,
}
#[test]
fn bindgen_test_layout__krb5_ap_req() {
    assert_eq!(
        ::std::mem::size_of::<_krb5_ap_req>(),
        48usize,
        concat!("Size of: ", stringify!(_krb5_ap_req))
    );
    assert_eq!(
        ::std::mem::align_of::<_krb5_ap_req>(),
        8usize,
        concat!("Alignment of ", stringify!(_krb5_ap_req))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_krb5_ap_req>())).magic as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_krb5_ap_req),
            "::",
            stringify!(magic)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_krb5_ap_req>())).ap_options as *const _ as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(_krb5_ap_req),
            "::",
            stringify!(ap_options)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_krb5_ap_req>())).ticket as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(_krb5_ap_req),
            "::",
            stringify!(ticket)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_krb5_ap_req>())).authenticator as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(_krb5_ap_req),
            "::",
            stringify!(authenticator)
        )
    );
}
#[doc = " Authentication header."]
pub type krb5_ap_req = _krb5_ap_req;
#[doc = " C representaton of AP-REP message."]
#[doc = ""]
#[doc = " The server's response to a client's request for mutual authentication."]
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _krb5_ap_rep {
    pub magic: krb5_magic,
    #[doc = "< Ciphertext of ApRepEncPart"]
    pub enc_part: krb5_enc_data,
}
#[test]
fn bindgen_test_layout__krb5_ap_rep() {
    assert_eq!(
        ::std::mem::size_of::<_krb5_ap_rep>(),
        40usize,
        concat!("Size of: ", stringify!(_krb5_ap_rep))
    );
    assert_eq!(
        ::std::mem::align_of::<_krb5_ap_rep>(),
        8usize,
        concat!("Alignment of ", stringify!(_krb5_ap_rep))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_krb5_ap_rep>())).magic as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_krb5_ap_rep),
            "::",
            stringify!(magic)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_krb5_ap_rep>())).enc_part as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(_krb5_ap_rep),
            "::",
            stringify!(enc_part)
        )
    );
}
#[doc = " C representaton of AP-REP message."]
#[doc = ""]
#[doc = " The server's response to a client's request for mutual authentication."]
pub type krb5_ap_rep = _krb5_ap_rep;
#[doc = " Cleartext that is encrypted and put into @c _krb5_ap_rep."]
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _krb5_ap_rep_enc_part {
    pub magic: krb5_magic,
    #[doc = "< Client time, seconds portion"]
    pub ctime: krb5_timestamp,
    #[doc = "< Client time, microseconds portion"]
    pub cusec: krb5_int32,
    #[doc = "< Subkey (optional)"]
    pub subkey: *mut krb5_keyblock,
    #[doc = "< Sequence number"]
    pub seq_number: krb5_ui_4,
}
#[test]
fn bindgen_test_layout__krb5_ap_rep_enc_part() {
    assert_eq!(
        ::std::mem::size_of::<_krb5_ap_rep_enc_part>(),
        32usize,
        concat!("Size of: ", stringify!(_krb5_ap_rep_enc_part))
    );
    assert_eq!(
        ::std::mem::align_of::<_krb5_ap_rep_enc_part>(),
        8usize,
        concat!("Alignment of ", stringify!(_krb5_ap_rep_enc_part))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_krb5_ap_rep_enc_part>())).magic as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_krb5_ap_rep_enc_part),
            "::",
            stringify!(magic)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_krb5_ap_rep_enc_part>())).ctime as *const _ as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(_krb5_ap_rep_enc_part),
            "::",
            stringify!(ctime)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_krb5_ap_rep_enc_part>())).cusec as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(_krb5_ap_rep_enc_part),
            "::",
            stringify!(cusec)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_krb5_ap_rep_enc_part>())).subkey as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(_krb5_ap_rep_enc_part),
            "::",
            stringify!(subkey)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_krb5_ap_rep_enc_part>())).seq_number as *const _ as usize
        },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(_krb5_ap_rep_enc_part),
            "::",
            stringify!(seq_number)
        )
    );
}
#[doc = " Cleartext that is encrypted and put into @c _krb5_ap_rep."]
pub type krb5_ap_rep_enc_part = _krb5_ap_rep_enc_part;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _krb5_response {
    pub magic: krb5_magic,
    pub message_type: krb5_octet,
    pub response: krb5_data,
    pub expected_nonce: krb5_int32,
    pub request_time: krb5_timestamp,
}
#[test]
fn bindgen_test_layout__krb5_response() {
    assert_eq!(
        ::std::mem::size_of::<_krb5_response>(),
        32usize,
        concat!("Size of: ", stringify!(_krb5_response))
    );
    assert_eq!(
        ::std::mem::align_of::<_krb5_response>(),
        8usize,
        concat!("Alignment of ", stringify!(_krb5_response))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_krb5_response>())).magic as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_krb5_response),
            "::",
            stringify!(magic)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_krb5_response>())).message_type as *const _ as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(_krb5_response),
            "::",
            stringify!(message_type)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_krb5_response>())).response as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(_krb5_response),
            "::",
            stringify!(response)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_krb5_response>())).expected_nonce as *const _ as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(_krb5_response),
            "::",
            stringify!(expected_nonce)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_krb5_response>())).request_time as *const _ as usize },
        28usize,
        concat!(
            "Offset of field: ",
            stringify!(_krb5_response),
            "::",
            stringify!(request_time)
        )
    );
}
pub type krb5_response = _krb5_response;
#[doc = " Credentials information inserted into @c EncKrbCredPart."]
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _krb5_cred_info {
    pub magic: krb5_magic,
    #[doc = "< Session key used to encrypt ticket"]
    pub session: *mut krb5_keyblock,
    #[doc = "< Client principal and realm"]
    pub client: krb5_principal,
    #[doc = "< Server principal and realm"]
    pub server: krb5_principal,
    #[doc = "< Ticket flags"]
    pub flags: krb5_flags,
    #[doc = "< Auth, start, end, renew_till"]
    pub times: krb5_ticket_times,
    #[doc = "< Array of pointers to addrs (optional)"]
    pub caddrs: *mut *mut krb5_address,
}
#[test]
fn bindgen_test_layout__krb5_cred_info() {
    assert_eq!(
        ::std::mem::size_of::<_krb5_cred_info>(),
        64usize,
        concat!("Size of: ", stringify!(_krb5_cred_info))
    );
    assert_eq!(
        ::std::mem::align_of::<_krb5_cred_info>(),
        8usize,
        concat!("Alignment of ", stringify!(_krb5_cred_info))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_krb5_cred_info>())).magic as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_krb5_cred_info),
            "::",
            stringify!(magic)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_krb5_cred_info>())).session as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(_krb5_cred_info),
            "::",
            stringify!(session)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_krb5_cred_info>())).client as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(_krb5_cred_info),
            "::",
            stringify!(client)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_krb5_cred_info>())).server as *const _ as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(_krb5_cred_info),
            "::",
            stringify!(server)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_krb5_cred_info>())).flags as *const _ as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(_krb5_cred_info),
            "::",
            stringify!(flags)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_krb5_cred_info>())).times as *const _ as usize },
        36usize,
        concat!(
            "Offset of field: ",
            stringify!(_krb5_cred_info),
            "::",
            stringify!(times)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_krb5_cred_info>())).caddrs as *const _ as usize },
        56usize,
        concat!(
            "Offset of field: ",
            stringify!(_krb5_cred_info),
            "::",
            stringify!(caddrs)
        )
    );
}
#[doc = " Credentials information inserted into @c EncKrbCredPart."]
pub type krb5_cred_info = _krb5_cred_info;
#[doc = " Cleartext credentials information."]
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _krb5_cred_enc_part {
    pub magic: krb5_magic,
    #[doc = "< Nonce (optional)"]
    pub nonce: krb5_int32,
    #[doc = "< Generation time, seconds portion"]
    pub timestamp: krb5_timestamp,
    #[doc = "< Generation time, microseconds portion"]
    pub usec: krb5_int32,
    #[doc = "< Sender address (optional)"]
    pub s_address: *mut krb5_address,
    #[doc = "< Recipient address (optional)"]
    pub r_address: *mut krb5_address,
    pub ticket_info: *mut *mut krb5_cred_info,
}
#[test]
fn bindgen_test_layout__krb5_cred_enc_part() {
    assert_eq!(
        ::std::mem::size_of::<_krb5_cred_enc_part>(),
        40usize,
        concat!("Size of: ", stringify!(_krb5_cred_enc_part))
    );
    assert_eq!(
        ::std::mem::align_of::<_krb5_cred_enc_part>(),
        8usize,
        concat!("Alignment of ", stringify!(_krb5_cred_enc_part))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_krb5_cred_enc_part>())).magic as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_krb5_cred_enc_part),
            "::",
            stringify!(magic)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_krb5_cred_enc_part>())).nonce as *const _ as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(_krb5_cred_enc_part),
            "::",
            stringify!(nonce)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_krb5_cred_enc_part>())).timestamp as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(_krb5_cred_enc_part),
            "::",
            stringify!(timestamp)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_krb5_cred_enc_part>())).usec as *const _ as usize },
        12usize,
        concat!(
            "Offset of field: ",
            stringify!(_krb5_cred_enc_part),
            "::",
            stringify!(usec)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_krb5_cred_enc_part>())).s_address as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(_krb5_cred_enc_part),
            "::",
            stringify!(s_address)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_krb5_cred_enc_part>())).r_address as *const _ as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(_krb5_cred_enc_part),
            "::",
            stringify!(r_address)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_krb5_cred_enc_part>())).ticket_info as *const _ as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(_krb5_cred_enc_part),
            "::",
            stringify!(ticket_info)
        )
    );
}
#[doc = " Cleartext credentials information."]
pub type krb5_cred_enc_part = _krb5_cred_enc_part;
#[doc = " Credentials data structure."]
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _krb5_cred {
    pub magic: krb5_magic,
    #[doc = "< Tickets"]
    pub tickets: *mut *mut krb5_ticket,
    #[doc = "< Encrypted part"]
    pub enc_part: krb5_enc_data,
    #[doc = "< Unencrypted version, if available"]
    pub enc_part2: *mut krb5_cred_enc_part,
}
#[test]
fn bindgen_test_layout__krb5_cred() {
    assert_eq!(
        ::std::mem::size_of::<_krb5_cred>(),
        56usize,
        concat!("Size of: ", stringify!(_krb5_cred))
    );
    assert_eq!(
        ::std::mem::align_of::<_krb5_cred>(),
        8usize,
        concat!("Alignment of ", stringify!(_krb5_cred))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_krb5_cred>())).magic as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_krb5_cred),
            "::",
            stringify!(magic)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_krb5_cred>())).tickets as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(_krb5_cred),
            "::",
            stringify!(tickets)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_krb5_cred>())).enc_part as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(_krb5_cred),
            "::",
            stringify!(enc_part)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_krb5_cred>())).enc_part2 as *const _ as usize },
        48usize,
        concat!(
            "Offset of field: ",
            stringify!(_krb5_cred),
            "::",
            stringify!(enc_part2)
        )
    );
}
#[doc = " Credentials data structure."]
pub type krb5_cred = _krb5_cred;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _passwd_phrase_element {
    pub magic: krb5_magic,
    pub passwd: *mut krb5_data,
    pub phrase: *mut krb5_data,
}
#[test]
fn bindgen_test_layout__passwd_phrase_element() {
    assert_eq!(
        ::std::mem::size_of::<_passwd_phrase_element>(),
        24usize,
        concat!("Size of: ", stringify!(_passwd_phrase_element))
    );
    assert_eq!(
        ::std::mem::align_of::<_passwd_phrase_element>(),
        8usize,
        concat!("Alignment of ", stringify!(_passwd_phrase_element))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_passwd_phrase_element>())).magic as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_passwd_phrase_element),
            "::",
            stringify!(magic)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_passwd_phrase_element>())).passwd as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(_passwd_phrase_element),
            "::",
            stringify!(passwd)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_passwd_phrase_element>())).phrase as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(_passwd_phrase_element),
            "::",
            stringify!(phrase)
        )
    );
}
pub type passwd_phrase_element = _passwd_phrase_element;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _krb5_pwd_data {
    pub magic: krb5_magic,
    pub sequence_count: ::std::os::raw::c_int,
    pub element: *mut *mut passwd_phrase_element,
}
#[test]
fn bindgen_test_layout__krb5_pwd_data() {
    assert_eq!(
        ::std::mem::size_of::<_krb5_pwd_data>(),
        16usize,
        concat!("Size of: ", stringify!(_krb5_pwd_data))
    );
    assert_eq!(
        ::std::mem::align_of::<_krb5_pwd_data>(),
        8usize,
        concat!("Alignment of ", stringify!(_krb5_pwd_data))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_krb5_pwd_data>())).magic as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_krb5_pwd_data),
            "::",
            stringify!(magic)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_krb5_pwd_data>())).sequence_count as *const _ as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(_krb5_pwd_data),
            "::",
            stringify!(sequence_count)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_krb5_pwd_data>())).element as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(_krb5_pwd_data),
            "::",
            stringify!(element)
        )
    );
}
pub type krb5_pwd_data = _krb5_pwd_data;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _krb5_pa_svr_referral_data {
    #[doc = " Referred name, only realm is required"]
    pub principal: krb5_principal,
}
#[test]
fn bindgen_test_layout__krb5_pa_svr_referral_data() {
    assert_eq!(
        ::std::mem::size_of::<_krb5_pa_svr_referral_data>(),
        8usize,
        concat!("Size of: ", stringify!(_krb5_pa_svr_referral_data))
    );
    assert_eq!(
        ::std::mem::align_of::<_krb5_pa_svr_referral_data>(),
        8usize,
        concat!("Alignment of ", stringify!(_krb5_pa_svr_referral_data))
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_krb5_pa_svr_referral_data>())).principal as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_krb5_pa_svr_referral_data),
            "::",
            stringify!(principal)
        )
    );
}
pub type krb5_pa_svr_referral_data = _krb5_pa_svr_referral_data;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _krb5_pa_server_referral_data {
    pub referred_realm: *mut krb5_data,
    pub true_principal_name: krb5_principal,
    pub requested_principal_name: krb5_principal,
    pub referral_valid_until: krb5_timestamp,
    pub rep_cksum: krb5_checksum,
}
#[test]
fn bindgen_test_layout__krb5_pa_server_referral_data() {
    assert_eq!(
        ::std::mem::size_of::<_krb5_pa_server_referral_data>(),
        56usize,
        concat!("Size of: ", stringify!(_krb5_pa_server_referral_data))
    );
    assert_eq!(
        ::std::mem::align_of::<_krb5_pa_server_referral_data>(),
        8usize,
        concat!("Alignment of ", stringify!(_krb5_pa_server_referral_data))
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_krb5_pa_server_referral_data>())).referred_realm as *const _
                as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_krb5_pa_server_referral_data),
            "::",
            stringify!(referred_realm)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_krb5_pa_server_referral_data>())).true_principal_name
                as *const _ as usize
        },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(_krb5_pa_server_referral_data),
            "::",
            stringify!(true_principal_name)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_krb5_pa_server_referral_data>())).requested_principal_name
                as *const _ as usize
        },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(_krb5_pa_server_referral_data),
            "::",
            stringify!(requested_principal_name)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_krb5_pa_server_referral_data>())).referral_valid_until
                as *const _ as usize
        },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(_krb5_pa_server_referral_data),
            "::",
            stringify!(referral_valid_until)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_krb5_pa_server_referral_data>())).rep_cksum as *const _ as usize
        },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(_krb5_pa_server_referral_data),
            "::",
            stringify!(rep_cksum)
        )
    );
}
pub type krb5_pa_server_referral_data = _krb5_pa_server_referral_data;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _krb5_pa_pac_req {
    #[doc = " TRUE if a PAC should be included in TGS-REP"]
    pub include_pac: krb5_boolean,
}
#[test]
fn bindgen_test_layout__krb5_pa_pac_req() {
    assert_eq!(
        ::std::mem::size_of::<_krb5_pa_pac_req>(),
        4usize,
        concat!("Size of: ", stringify!(_krb5_pa_pac_req))
    );
    assert_eq!(
        ::std::mem::align_of::<_krb5_pa_pac_req>(),
        4usize,
        concat!("Alignment of ", stringify!(_krb5_pa_pac_req))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_krb5_pa_pac_req>())).include_pac as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_krb5_pa_pac_req),
            "::",
            stringify!(include_pac)
        )
    );
}
pub type krb5_pa_pac_req = _krb5_pa_pac_req;
#[doc = " Replay data."]
#[doc = ""]
#[doc = " Sequence number and timestamp information output by krb5_rd_priv() and"]
#[doc = " krb5_rd_safe()."]
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct krb5_replay_data {
    #[doc = "< Timestamp, seconds portion"]
    pub timestamp: krb5_timestamp,
    #[doc = "< Timestamp, microseconds portion"]
    pub usec: krb5_int32,
    #[doc = "< Sequence number"]
    pub seq: krb5_ui_4,
}
#[test]
fn bindgen_test_layout_krb5_replay_data() {
    assert_eq!(
        ::std::mem::size_of::<krb5_replay_data>(),
        12usize,
        concat!("Size of: ", stringify!(krb5_replay_data))
    );
    assert_eq!(
        ::std::mem::align_of::<krb5_replay_data>(),
        4usize,
        concat!("Alignment of ", stringify!(krb5_replay_data))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<krb5_replay_data>())).timestamp as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(krb5_replay_data),
            "::",
            stringify!(timestamp)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<krb5_replay_data>())).usec as *const _ as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(krb5_replay_data),
            "::",
            stringify!(usec)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<krb5_replay_data>())).seq as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(krb5_replay_data),
            "::",
            stringify!(seq)
        )
    );
}
#[doc = " Type of function used as a callback to generate checksum data for mk_req"]
pub type krb5_mk_req_checksum_func = ::std::option::Option<
    unsafe extern "C" fn(
        arg1: krb5_context,
        arg2: krb5_auth_context,
        arg3: *mut ::std::os::raw::c_void,
        arg4: *mut *mut krb5_data,
    ) -> krb5_error_code,
>;
#[doc = " Cursor for sequential lookup"]
pub type krb5_cc_cursor = krb5_pointer;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _krb5_ccache {
    _unused: [u8; 0],
}
pub type krb5_ccache = *mut _krb5_ccache;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _krb5_cc_ops {
    _unused: [u8; 0],
}
pub type krb5_cc_ops = _krb5_cc_ops;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _krb5_cccol_cursor {
    _unused: [u8; 0],
}
#[doc = " Cursor for iterating over all ccaches"]
pub type krb5_cccol_cursor = *mut _krb5_cccol_cursor;
extern "C" {
    #[doc = " Retrieve the name, but not type of a credential cache."]
    #[doc = ""]
    #[doc = " @param [in] context          Library context"]
    #[doc = " @param [in] cache            Credential cache handle"]
    #[doc = ""]
    #[doc = " @warning Returns the name of the credential cache.  The result is an alias"]
    #[doc = " into @a cache and should not be freed or modified by the caller.  This name"]
    #[doc = " does not include the cache type, so should not be used as input to"]
    #[doc = " krb5_cc_resolve()."]
    #[doc = ""]
    #[doc = " @return"]
    #[doc = " On success - the name of the credential cache."]
    pub fn krb5_cc_get_name(
        context: krb5_context,
        cache: krb5_ccache,
    ) -> *const ::std::os::raw::c_char;
}
extern "C" {
    #[doc = " Retrieve the full name of a credential cache."]
    #[doc = ""]
    #[doc = " @param [in]  context         Library context"]
    #[doc = " @param [in]  cache           Credential cache handle"]
    #[doc = " @param [out] fullname_out    Full name of cache"]
    #[doc = ""]
    #[doc = " Use krb5_free_string() to free @a fullname_out when it is no longer needed."]
    #[doc = ""]
    #[doc = " @version New in 1.10"]
    pub fn krb5_cc_get_full_name(
        context: krb5_context,
        cache: krb5_ccache,
        fullname_out: *mut *mut ::std::os::raw::c_char,
    ) -> krb5_error_code;
}
extern "C" {
    #[doc = " Initialize a credential cache."]
    #[doc = ""]
    #[doc = " @param [in] context          Library context"]
    #[doc = " @param [in] cache            Credential cache handle"]
    #[doc = " @param [in] principal        Default principal name"]
    #[doc = ""]
    #[doc = " Destroy any existing contents of @a cache and initialize it for the default"]
    #[doc = " principal @a principal."]
    #[doc = ""]
    #[doc = " @retval"]
    #[doc = "  0  Success"]
    #[doc = " @return"]
    #[doc = "  System errors; Permission errors; Kerberos error codes"]
    pub fn krb5_cc_initialize(
        context: krb5_context,
        cache: krb5_ccache,
        principal: krb5_principal,
    ) -> krb5_error_code;
}
extern "C" {
    #[doc = " Destroy a credential cache."]
    #[doc = ""]
    #[doc = " @param [in] context          Library context"]
    #[doc = " @param [in] cache            Credential cache handle"]
    #[doc = ""]
    #[doc = " This function destroys any existing contents of @a cache and closes the"]
    #[doc = " handle to it."]
    #[doc = ""]
    #[doc = " @retval"]
    #[doc = " 0  Success"]
    #[doc = " @return"]
    #[doc = " Permission errors"]
    pub fn krb5_cc_destroy(context: krb5_context, cache: krb5_ccache) -> krb5_error_code;
}
extern "C" {
    #[doc = " Close a credential cache handle."]
    #[doc = ""]
    #[doc = " @param [in] context          Library context"]
    #[doc = " @param [in] cache            Credential cache handle"]
    #[doc = ""]
    #[doc = " This function closes a credential cache handle @a cache without affecting"]
    #[doc = " the contents of the cache."]
    #[doc = ""]
    #[doc = " @retval"]
    #[doc = " 0  Success"]
    #[doc = " @return"]
    #[doc = " Kerberos error codes"]
    pub fn krb5_cc_close(context: krb5_context, cache: krb5_ccache) -> krb5_error_code;
}
extern "C" {
    #[doc = " Store credentials in a credential cache."]
    #[doc = ""]
    #[doc = " @param [in] context          Library context"]
    #[doc = " @param [in] cache            Credential cache handle"]
    #[doc = " @param [in] creds            Credentials to be stored in cache"]
    #[doc = ""]
    #[doc = " This function stores @a creds into @a cache.  If @a creds->server and the"]
    #[doc = " server in the decoded ticket @a creds->ticket differ, the credentials will"]
    #[doc = " be stored under both server principal names."]
    #[doc = ""]
    #[doc = " @retval"]
    #[doc = "  0  Success"]
    #[doc = " @return Permission errors; storage failure errors; Kerberos error codes"]
    pub fn krb5_cc_store_cred(
        context: krb5_context,
        cache: krb5_ccache,
        creds: *mut krb5_creds,
    ) -> krb5_error_code;
}
extern "C" {
    #[doc = " Retrieve a specified credentials from a credential cache."]
    #[doc = ""]
    #[doc = " @param [in]  context         Library context"]
    #[doc = " @param [in]  cache           Credential cache handle"]
    #[doc = " @param [in]  flags           Flags bit mask"]
    #[doc = " @param [in]  mcreds          Credentials to match"]
    #[doc = " @param [out] creds           Credentials matching the requested value"]
    #[doc = ""]
    #[doc = " This function searches a credential cache for credentials matching @a mcreds"]
    #[doc = " and returns it if found."]
    #[doc = ""]
    #[doc = " Valid values for @a flags are:"]
    #[doc = ""]
    #[doc = " @li #KRB5_TC_MATCH_TIMES        The requested lifetime must be at least as"]
    #[doc = "                                 great as in @a mcreds ."]
    #[doc = " @li #KRB5_TC_MATCH_IS_SKEY      The @a is_skey field much match exactly."]
    #[doc = " @li #KRB5_TC_MATCH_FLAGS        Flags set in @a mcreds must be set."]
    #[doc = " @li #KRB5_TC_MATCH_TIMES_EXACT  The requested lifetime must match exactly."]
    #[doc = " @li #KRB5_TC_MATCH_FLAGS_EXACT  Flags must match exactly."]
    #[doc = " @li #KRB5_TC_MATCH_AUTHDATA     The authorization data must match."]
    #[doc = " @li #KRB5_TC_MATCH_SRV_NAMEONLY Only the name portion of the principal"]
    #[doc = "                                 name must match, not the realm."]
    #[doc = " @li #KRB5_TC_MATCH_2ND_TKT      The second tickets must match."]
    #[doc = " @li #KRB5_TC_MATCH_KTYPE        The encryption key types must match."]
    #[doc = " @li #KRB5_TC_SUPPORTED_KTYPES   Check all matching entries that have any"]
    #[doc = "                                 supported encryption type and return the"]
    #[doc = "                                 one with the encryption type listed earliest."]
    #[doc = ""]
    #[doc = " Use krb5_free_cred_contents() to free @a creds when it is no longer needed."]
    #[doc = ""]
    #[doc = " @retval 0 Success; otherwise - Kerberos error codes"]
    pub fn krb5_cc_retrieve_cred(
        context: krb5_context,
        cache: krb5_ccache,
        flags: krb5_flags,
        mcreds: *mut krb5_creds,
        creds: *mut krb5_creds,
    ) -> krb5_error_code;
}
extern "C" {
    #[doc = " Get the default principal of a credential cache."]
    #[doc = ""]
    #[doc = " @param [in]  context         Library context"]
    #[doc = " @param [in]  cache           Credential cache handle"]
    #[doc = " @param [out] principal       Primary principal"]
    #[doc = ""]
    #[doc = " Returns the default client principal of a credential cache as set by"]
    #[doc = " krb5_cc_initialize()."]
    #[doc = ""]
    #[doc = " Use krb5_free_principal() to free @a principal when it is no longer needed."]
    #[doc = ""]
    #[doc = " @retval"]
    #[doc = " 0  Success"]
    #[doc = " @return"]
    #[doc = " Kerberos error codes"]
    pub fn krb5_cc_get_principal(
        context: krb5_context,
        cache: krb5_ccache,
        principal: *mut krb5_principal,
    ) -> krb5_error_code;
}
extern "C" {
    #[doc = " Prepare to sequentially read every credential in a credential cache."]
    #[doc = ""]
    #[doc = " @param [in]  context         Library context"]
    #[doc = " @param [in]  cache           Credential cache handle"]
    #[doc = " @param [out] cursor          Cursor"]
    #[doc = ""]
    #[doc = " krb5_cc_end_seq_get() must be called to complete the retrieve operation."]
    #[doc = ""]
    #[doc = " @note If the cache represented by @a cache is modified between the time of"]
    #[doc = " the call to this function and the time of the final krb5_cc_end_seq_get(),"]
    #[doc = " these changes may not be reflected in the results of krb5_cc_next_cred()"]
    #[doc = " calls."]
    #[doc = ""]
    #[doc = " @retval 0  Success; otherwise - Kerberos error codes"]
    pub fn krb5_cc_start_seq_get(
        context: krb5_context,
        cache: krb5_ccache,
        cursor: *mut krb5_cc_cursor,
    ) -> krb5_error_code;
}
extern "C" {
    #[doc = " Retrieve the next entry from the credential cache."]
    #[doc = ""]
    #[doc = " @param [in]  context         Library context"]
    #[doc = " @param [in]  cache           Credential cache handle"]
    #[doc = " @param [in]  cursor          Cursor"]
    #[doc = " @param [out] creds           Next credential cache entry"]
    #[doc = ""]
    #[doc = " This function fills in @a creds with the next entry in @a cache and advances"]
    #[doc = " @a cursor."]
    #[doc = ""]
    #[doc = " Use krb5_free_cred_contents() to free @a creds when it is no longer needed."]
    #[doc = ""]
    #[doc = " @sa krb5_cc_start_seq_get(), krb5_end_seq_get()"]
    #[doc = ""]
    #[doc = " @retval 0 Success; otherwise - Kerberos error codes"]
    pub fn krb5_cc_next_cred(
        context: krb5_context,
        cache: krb5_ccache,
        cursor: *mut krb5_cc_cursor,
        creds: *mut krb5_creds,
    ) -> krb5_error_code;
}
extern "C" {
    #[doc = " Finish a series of sequential processing credential cache entries."]
    #[doc = ""]
    #[doc = " @param [in] context          Library context"]
    #[doc = " @param [in] cache            Credential cache handle"]
    #[doc = " @param [in] cursor           Cursor"]
    #[doc = ""]
    #[doc = " This function finishes processing credential cache entries and invalidates"]
    #[doc = " @a cursor."]
    #[doc = ""]
    #[doc = " @sa krb5_cc_start_seq_get(), krb5_cc_next_cred()"]
    #[doc = ""]
    #[doc = " @retval 0 (always)"]
    pub fn krb5_cc_end_seq_get(
        context: krb5_context,
        cache: krb5_ccache,
        cursor: *mut krb5_cc_cursor,
    ) -> krb5_error_code;
}
extern "C" {
    #[doc = " Remove credentials from a credential cache."]
    #[doc = ""]
    #[doc = " @param [in] context          Library context"]
    #[doc = " @param [in] cache            Credential cache handle"]
    #[doc = " @param [in] flags            Bitwise-ORed search flags"]
    #[doc = " @param [in] creds            Credentials to be matched"]
    #[doc = ""]
    #[doc = " @warning This function is not implemented for some cache types."]
    #[doc = ""]
    #[doc = " This function accepts the same flag values as krb5_cc_retrieve_cred()."]
    #[doc = ""]
    #[doc = " @retval KRB5_CC_NOSUPP Not implemented for this cache type"]
    #[doc = " @return No matches found; Data cannot be deleted; Kerberos error codes"]
    pub fn krb5_cc_remove_cred(
        context: krb5_context,
        cache: krb5_ccache,
        flags: krb5_flags,
        creds: *mut krb5_creds,
    ) -> krb5_error_code;
}
extern "C" {
    #[doc = " Set options flags on a credential cache."]
    #[doc = ""]
    #[doc = " @param [in] context          Library context"]
    #[doc = " @param [in] cache            Credential cache handle"]
    #[doc = " @param [in] flags            Flag bit mask"]
    #[doc = ""]
    #[doc = " This function resets @a cache flags to @a flags."]
    #[doc = ""]
    #[doc = " @retval 0 Success; otherwise - Kerberos error codes"]
    pub fn krb5_cc_set_flags(
        context: krb5_context,
        cache: krb5_ccache,
        flags: krb5_flags,
    ) -> krb5_error_code;
}
extern "C" {
    #[doc = " Retrieve flags from a credential cache structure."]
    #[doc = ""]
    #[doc = " @param [in]  context         Library context"]
    #[doc = " @param [in]  cache           Credential cache handle"]
    #[doc = " @param [out] flags           Flag bit mask"]
    #[doc = ""]
    #[doc = " @warning For memory credential cache always returns a flag mask of 0."]
    #[doc = ""]
    #[doc = " @retval 0 Success; otherwise - Kerberos error codes"]
    pub fn krb5_cc_get_flags(
        context: krb5_context,
        cache: krb5_ccache,
        flags: *mut krb5_flags,
    ) -> krb5_error_code;
}
extern "C" {
    #[doc = " Retrieve the type of a credential cache."]
    #[doc = ""]
    #[doc = " @param [in] context          Library context"]
    #[doc = " @param [in] cache            Credential cache handle"]
    #[doc = ""]
    #[doc = " @return The type of a credential cache as an alias that must not be modified"]
    #[doc = " or freed by the caller."]
    pub fn krb5_cc_get_type(
        context: krb5_context,
        cache: krb5_ccache,
    ) -> *const ::std::os::raw::c_char;
}
extern "C" {
    #[doc = " Move a credential cache."]
    #[doc = ""]
    #[doc = " @param [in] context          Library context"]
    #[doc = " @param [in] src              The credential cache to move the content from"]
    #[doc = " @param [in] dst              The credential cache to move the content to"]
    #[doc = ""]
    #[doc = " This function reinitializes @a dst and populates it with the credentials and"]
    #[doc = " default principal of @a src; then, if successful, destroys @a src."]
    #[doc = ""]
    #[doc = " @retval"]
    #[doc = " 0 Success; @a src is closed."]
    #[doc = " @return"]
    #[doc = " Kerberos error codes; @a src is still allocated."]
    pub fn krb5_cc_move(
        context: krb5_context,
        src: krb5_ccache,
        dst: krb5_ccache,
    ) -> krb5_error_code;
}
extern "C" {
    #[doc = " Prepare to iterate over the collection of known credential caches."]
    #[doc = ""]
    #[doc = " @param [in]  context         Library context"]
    #[doc = " @param [out] cursor          Cursor"]
    #[doc = ""]
    #[doc = " Get a new cache iteration @a cursor that will iterate over all known"]
    #[doc = " credential caches independent of type."]
    #[doc = ""]
    #[doc = " Use krb5_cccol_cursor_free() to release @a cursor when it is no longer"]
    #[doc = " needed."]
    #[doc = ""]
    #[doc = " @sa krb5_cccol_cursor_next()"]
    #[doc = ""]
    #[doc = " @retval 0 Success; otherwise - Kerberos error codes"]
    pub fn krb5_cccol_cursor_new(
        context: krb5_context,
        cursor: *mut krb5_cccol_cursor,
    ) -> krb5_error_code;
}
extern "C" {
    #[doc = " Get the next credential cache in the collection."]
    #[doc = ""]
    #[doc = " @param [in]  context         Library context"]
    #[doc = " @param [in]  cursor          Cursor"]
    #[doc = " @param [out] ccache          Credential cache handle"]
    #[doc = ""]
    #[doc = " @note When all caches are iterated over and the end of the list is reached,"]
    #[doc = " @a ccache is set to NULL."]
    #[doc = ""]
    #[doc = " Use krb5_cc_close() to close @a ccache when it is no longer needed."]
    #[doc = ""]
    #[doc = " @sa krb5_cccol_cursor_new(), krb5_cccol_cursor_free()"]
    #[doc = ""]
    #[doc = " @retval 0 Success; otherwise - Kerberos error codes"]
    pub fn krb5_cccol_cursor_next(
        context: krb5_context,
        cursor: krb5_cccol_cursor,
        ccache: *mut krb5_ccache,
    ) -> krb5_error_code;
}
extern "C" {
    #[doc = " Free a credential cache collection cursor."]
    #[doc = ""]
    #[doc = " @param [in] context          Library context"]
    #[doc = " @param [in] cursor           Cursor"]
    #[doc = ""]
    #[doc = " @sa krb5_cccol_cursor_new(), krb5_cccol_cursor_next()"]
    #[doc = ""]
    #[doc = " @retval 0 Success; otherwise - Kerberos error codes"]
    pub fn krb5_cccol_cursor_free(
        context: krb5_context,
        cursor: *mut krb5_cccol_cursor,
    ) -> krb5_error_code;
}
extern "C" {
    #[doc = " Check if the credential cache collection contains any credentials."]
    #[doc = ""]
    #[doc = " @param [in]  context         Library context"]
    #[doc = ""]
    #[doc = " @version New in 1.11"]
    #[doc = ""]
    #[doc = " @retval 0 Credentials are available in the collection"]
    #[doc = " @retval KRB5_CC_NOTFOUND The collection contains no credentials"]
    pub fn krb5_cccol_have_content(context: krb5_context) -> krb5_error_code;
}
extern "C" {
    #[doc = " Create a new credential cache of the specified type with a unique name."]
    #[doc = ""]
    #[doc = " @param [in]  context         Library context"]
    #[doc = " @param [in]  type            Credential cache type name"]
    #[doc = " @param [in]  hint            Unused"]
    #[doc = " @param [out] id              Credential cache handle"]
    #[doc = ""]
    #[doc = " @retval"]
    #[doc = " 0 Success"]
    #[doc = " @return"]
    #[doc = " Kerberos error codes"]
    pub fn krb5_cc_new_unique(
        context: krb5_context,
        type_: *const ::std::os::raw::c_char,
        hint: *const ::std::os::raw::c_char,
        id: *mut krb5_ccache,
    ) -> krb5_error_code;
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct krb5_rc_st {
    _unused: [u8; 0],
}
pub type krb5_rcache = *mut krb5_rc_st;
pub type krb5_kt_cursor = krb5_pointer;
#[doc = " A key table entry."]
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct krb5_keytab_entry_st {
    pub magic: krb5_magic,
    #[doc = "< Principal of this key"]
    pub principal: krb5_principal,
    #[doc = "< Time entry written to keytable"]
    pub timestamp: krb5_timestamp,
    #[doc = "< Key version number"]
    pub vno: krb5_kvno,
    #[doc = "< The secret key"]
    pub key: krb5_keyblock,
}
#[test]
fn bindgen_test_layout_krb5_keytab_entry_st() {
    assert_eq!(
        ::std::mem::size_of::<krb5_keytab_entry_st>(),
        48usize,
        concat!("Size of: ", stringify!(krb5_keytab_entry_st))
    );
    assert_eq!(
        ::std::mem::align_of::<krb5_keytab_entry_st>(),
        8usize,
        concat!("Alignment of ", stringify!(krb5_keytab_entry_st))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<krb5_keytab_entry_st>())).magic as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(krb5_keytab_entry_st),
            "::",
            stringify!(magic)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<krb5_keytab_entry_st>())).principal as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(krb5_keytab_entry_st),
            "::",
            stringify!(principal)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<krb5_keytab_entry_st>())).timestamp as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(krb5_keytab_entry_st),
            "::",
            stringify!(timestamp)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<krb5_keytab_entry_st>())).vno as *const _ as usize },
        20usize,
        concat!(
            "Offset of field: ",
            stringify!(krb5_keytab_entry_st),
            "::",
            stringify!(vno)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<krb5_keytab_entry_st>())).key as *const _ as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(krb5_keytab_entry_st),
            "::",
            stringify!(key)
        )
    );
}
#[doc = " A key table entry."]
pub type krb5_keytab_entry = krb5_keytab_entry_st;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _krb5_kt {
    _unused: [u8; 0],
}
pub type krb5_keytab = *mut _krb5_kt;
extern "C" {
    #[doc = " Return the type of a key table."]
    #[doc = ""]
    #[doc = " @param [in] context          Library context"]
    #[doc = " @param [in] keytab           Key table handle"]
    #[doc = ""]
    #[doc = " @return The type of a key table as an alias that must not be modified or"]
    #[doc = " freed by the caller."]
    pub fn krb5_kt_get_type(
        context: krb5_context,
        keytab: krb5_keytab,
    ) -> *const ::std::os::raw::c_char;
}
extern "C" {
    #[doc = " Get a key table name."]
    #[doc = ""]
    #[doc = " @param [in]  context         Library context"]
    #[doc = " @param [in]  keytab          Key table handle"]
    #[doc = " @param [out] name            Key table name"]
    #[doc = " @param [in]  namelen         Maximum length to fill in name"]
    #[doc = ""]
    #[doc = " Fill @a name with the name of @a keytab including the type and delimiter."]
    #[doc = ""]
    #[doc = " @sa MAX_KEYTAB_NAME_LEN"]
    #[doc = ""]
    #[doc = " @retval"]
    #[doc = " 0 Success"]
    #[doc = " @retval"]
    #[doc = " KRB5_KT_NAME_TOOLONG  Key table name does not fit in @a namelen bytes"]
    #[doc = ""]
    #[doc = " @return"]
    #[doc = " Kerberos error codes"]
    pub fn krb5_kt_get_name(
        context: krb5_context,
        keytab: krb5_keytab,
        name: *mut ::std::os::raw::c_char,
        namelen: ::std::os::raw::c_uint,
    ) -> krb5_error_code;
}
extern "C" {
    #[doc = " Close a key table handle."]
    #[doc = ""]
    #[doc = " @param [in] context          Library context"]
    #[doc = " @param [in] keytab           Key table handle"]
    #[doc = ""]
    #[doc = " @retval 0"]
    pub fn krb5_kt_close(context: krb5_context, keytab: krb5_keytab) -> krb5_error_code;
}
extern "C" {
    #[doc = " Get an entry from a key table."]
    #[doc = ""]
    #[doc = " @param [in]  context         Library context"]
    #[doc = " @param [in]  keytab          Key table handle"]
    #[doc = " @param [in]  principal       Principal name"]
    #[doc = " @param [in]  vno             Key version number (0 for highest available)"]
    #[doc = " @param [in]  enctype         Encryption type (0 zero for any enctype)"]
    #[doc = " @param [out] entry           Returned entry from key table"]
    #[doc = ""]
    #[doc = " Retrieve an entry from a key table which matches the @a keytab, @a"]
    #[doc = " principal, @a vno, and @a enctype.  If @a vno is zero, retrieve the"]
    #[doc = " highest-numbered kvno matching the other fields.  If @a enctype is 0, match"]
    #[doc = " any enctype."]
    #[doc = ""]
    #[doc = " Use krb5_free_keytab_entry_contents() to free @a entry when it is no longer"]
    #[doc = " needed."]
    #[doc = ""]
    #[doc = " @note If @a vno is zero, the function retrieves the highest-numbered-kvno"]
    #[doc = " entry that matches the specified principal."]
    #[doc = ""]
    #[doc = " @retval"]
    #[doc = " 0 Success"]
    #[doc = " @retval"]
    #[doc = " Kerberos error codes on failure"]
    pub fn krb5_kt_get_entry(
        context: krb5_context,
        keytab: krb5_keytab,
        principal: krb5_const_principal,
        vno: krb5_kvno,
        enctype: krb5_enctype,
        entry: *mut krb5_keytab_entry,
    ) -> krb5_error_code;
}
extern "C" {
    #[doc = " Start a sequential retrieval of key table entries."]
    #[doc = ""]
    #[doc = " @param [in]  context         Library context"]
    #[doc = " @param [in]  keytab          Key table handle"]
    #[doc = " @param [out] cursor          Cursor"]
    #[doc = ""]
    #[doc = " Prepare to read sequentially every key in the specified key table.  Use"]
    #[doc = " krb5_kt_end_seq_get() to release the cursor when it is no longer needed."]
    #[doc = ""]
    #[doc = " @sa krb5_kt_next_entry(), krb5_kt_end_seq_get()"]
    #[doc = ""]
    #[doc = " @retval"]
    #[doc = " 0 Success"]
    #[doc = " @return"]
    #[doc = " Kerberos error codes"]
    pub fn krb5_kt_start_seq_get(
        context: krb5_context,
        keytab: krb5_keytab,
        cursor: *mut krb5_kt_cursor,
    ) -> krb5_error_code;
}
extern "C" {
    #[doc = " Retrieve the next entry from the key table."]
    #[doc = ""]
    #[doc = " @param [in]  context         Library context"]
    #[doc = " @param [in]  keytab          Key table handle"]
    #[doc = " @param [out] entry           Returned key table entry"]
    #[doc = " @param [in]  cursor          Key table cursor"]
    #[doc = ""]
    #[doc = " Return the next sequential entry in @a keytab and advance @a cursor."]
    #[doc = " Callers must release the returned entry with krb5_kt_free_entry()."]
    #[doc = ""]
    #[doc = " @sa krb5_kt_start_seq_get(), krb5_kt_end_seq_get()"]
    #[doc = ""]
    #[doc = " @retval"]
    #[doc = " 0 Success"]
    #[doc = " @retval"]
    #[doc = " KRB5_KT_END - if the last entry was reached"]
    #[doc = " @return"]
    #[doc = " Kerberos error codes"]
    pub fn krb5_kt_next_entry(
        context: krb5_context,
        keytab: krb5_keytab,
        entry: *mut krb5_keytab_entry,
        cursor: *mut krb5_kt_cursor,
    ) -> krb5_error_code;
}
extern "C" {
    #[doc = " Release a keytab cursor."]
    #[doc = ""]
    #[doc = " @param [in]  context         Library context"]
    #[doc = " @param [in]  keytab          Key table handle"]
    #[doc = " @param [out] cursor          Cursor"]
    #[doc = ""]
    #[doc = " This function should be called to release the cursor created by"]
    #[doc = " krb5_kt_start_seq_get()."]
    #[doc = ""]
    #[doc = " @retval"]
    #[doc = " 0 Success"]
    #[doc = " @return"]
    #[doc = " Kerberos error codes"]
    pub fn krb5_kt_end_seq_get(
        context: krb5_context,
        keytab: krb5_keytab,
        cursor: *mut krb5_kt_cursor,
    ) -> krb5_error_code;
}
extern "C" {
    #[doc = " Check if a keytab exists and contains entries."]
    #[doc = ""]
    #[doc = " @param [in]  context         Library context"]
    #[doc = " @param [in]  keytab          Key table handle"]
    #[doc = ""]
    #[doc = " @version New in 1.11"]
    #[doc = ""]
    #[doc = " @retval 0 Keytab exists and contains entries"]
    #[doc = " @retval KRB5_KT_NOTFOUND Keytab does not contain entries"]
    pub fn krb5_kt_have_content(context: krb5_context, keytab: krb5_keytab) -> krb5_error_code;
}
extern "C" {
    #[doc = " Create a krb5 library context."]
    #[doc = ""]
    #[doc = " @param [out] context         Library context"]
    #[doc = ""]
    #[doc = " The @a context must be released by calling krb5_free_context() when"]
    #[doc = " it is no longer needed."]
    #[doc = ""]
    #[doc = " @warning Any program or module that needs the Kerberos code to not trust the"]
    #[doc = " environment must use krb5_init_secure_context(), or clean out the"]
    #[doc = " environment."]
    #[doc = ""]
    #[doc = " @retval"]
    #[doc = " 0 Success"]
    #[doc = " @return"]
    #[doc = " Kerberos error codes"]
    pub fn krb5_init_context(context: *mut krb5_context) -> krb5_error_code;
}
extern "C" {
    #[doc = " Create a krb5 library context using only configuration files."]
    #[doc = ""]
    #[doc = " @param [out] context         Library context"]
    #[doc = ""]
    #[doc = " Create a context structure, using only system configuration files.  All"]
    #[doc = " information passed through the environment variables is ignored."]
    #[doc = ""]
    #[doc = " The @a context must be released by calling krb5_free_context() when"]
    #[doc = " it is no longer needed."]
    #[doc = ""]
    #[doc = " @retval"]
    #[doc = " 0 Success"]
    #[doc = " @return"]
    #[doc = " Kerberos error codes"]
    pub fn krb5_init_secure_context(context: *mut krb5_context) -> krb5_error_code;
}
extern "C" {
    #[doc = " Create a krb5 library context using a specified profile."]
    #[doc = ""]
    #[doc = " @param [in]  profile         Profile object (NULL to create default profile)"]
    #[doc = " @param [in]  flags           Context initialization flags"]
    #[doc = " @param [out] context         Library context"]
    #[doc = ""]
    #[doc = " Create a context structure, optionally using a specified profile and"]
    #[doc = " initialization flags.  If @a profile is NULL, the default profile will be"]
    #[doc = " created from config files.  If @a profile is non-null, a copy of it will be"]
    #[doc = " made for the new context; the caller should still clean up its copy.  Valid"]
    #[doc = " flag values are:"]
    #[doc = ""]
    #[doc = " @li #KRB5_INIT_CONTEXT_SECURE Ignore environment variables"]
    #[doc = " @li #KRB5_INIT_CONTEXT_KDC    Use KDC configuration if creating profile"]
    pub fn krb5_init_context_profile(
        profile: *mut _profile_t,
        flags: krb5_flags,
        context: *mut krb5_context,
    ) -> krb5_error_code;
}
extern "C" {
    #[doc = " Free a krb5 library context."]
    #[doc = ""]
    #[doc = " @param [in] context          Library context"]
    #[doc = ""]
    #[doc = " This function frees a @a context that was created by krb5_init_context()"]
    #[doc = " or krb5_init_secure_context()."]
    pub fn krb5_free_context(context: krb5_context);
}
extern "C" {
    #[doc = " Copy a krb5_context structure."]
    #[doc = ""]
    #[doc = " @param [in]  ctx             Library context"]
    #[doc = " @param [out] nctx_out        New context structure"]
    #[doc = ""]
    #[doc = " The newly created context must be released by calling krb5_free_context()"]
    #[doc = " when it is no longer needed."]
    #[doc = ""]
    #[doc = " @retval"]
    #[doc = " 0 Success"]
    #[doc = " @return"]
    #[doc = " Kerberos error codes"]
    pub fn krb5_copy_context(ctx: krb5_context, nctx_out: *mut krb5_context) -> krb5_error_code;
}
extern "C" {
    #[doc = " Set default TGS encryption types in a krb5_context structure."]
    #[doc = ""]
    #[doc = " @param [in] context          Library context"]
    #[doc = " @param [in] etypes           Encryption type(s) to set"]
    #[doc = ""]
    #[doc = " This function sets the default enctype list for TGS requests"]
    #[doc = " made using @a context to @a etypes."]
    #[doc = ""]
    #[doc = " @note This overrides the default list (from config file or built-in)."]
    #[doc = ""]
    #[doc = " @retval"]
    #[doc = "  0    Success"]
    #[doc = " @retval"]
    #[doc = "  KRB5_PROG_ETYPE_NOSUPP Program lacks support for encryption type"]
    #[doc = " @return"]
    #[doc = " Kerberos error codes"]
    pub fn krb5_set_default_tgs_enctypes(
        context: krb5_context,
        etypes: *const krb5_enctype,
    ) -> krb5_error_code;
}
extern "C" {
    #[doc = " Return a list of encryption types permitted for session keys."]
    #[doc = ""]
    #[doc = " @param [in]  context         Library context"]
    #[doc = " @param [out] ktypes          Zero-terminated list of encryption types"]
    #[doc = ""]
    #[doc = " This function returns the list of encryption types permitted for session"]
    #[doc = " keys within @a context, as determined by configuration or by a previous call"]
    #[doc = " to krb5_set_default_tgs_enctypes()."]
    #[doc = ""]
    #[doc = " Use krb5_free_enctypes() to free @a ktypes when it is no longer needed."]
    #[doc = ""]
    #[doc = " @retval 0 Success; otherwise - Kerberos error codes"]
    pub fn krb5_get_permitted_enctypes(
        context: krb5_context,
        ktypes: *mut *mut krb5_enctype,
    ) -> krb5_error_code;
}
extern "C" {
    #[doc = " Test whether the Kerberos library was built with multithread support."]
    #[doc = ""]
    #[doc = " @retval"]
    #[doc = " TRUE if the library is threadsafe; FALSE otherwise"]
    pub fn krb5_is_thread_safe() -> krb5_boolean;
}
extern "C" {
    #[doc = " Decrypt a ticket using the specified key table."]
    #[doc = ""]
    #[doc = " @param [in] context          Library context"]
    #[doc = " @param [in] kt               Key table"]
    #[doc = " @param [in] ticket           Ticket to be decrypted"]
    #[doc = ""]
    #[doc = " This function takes a @a ticket as input and decrypts it using"]
    #[doc = " key data from @a kt.  The result is placed into @a ticket->enc_part2."]
    #[doc = ""]
    #[doc = " @retval 0 Success; otherwise - Kerberos error codes"]
    pub fn krb5_server_decrypt_ticket_keytab(
        context: krb5_context,
        kt: krb5_keytab,
        ticket: *mut krb5_ticket,
    ) -> krb5_error_code;
}
extern "C" {
    #[doc = " Free an array of credential structures."]
    #[doc = ""]
    #[doc = " @param [in] context          Library context"]
    #[doc = " @param [in] tgts             Null-terminated array of credentials to free"]
    #[doc = ""]
    #[doc = " @note The last entry in the array @a tgts must be a NULL pointer."]
    pub fn krb5_free_tgt_creds(context: krb5_context, tgts: *mut *mut krb5_creds);
}
extern "C" {
    #[doc = " Get an additional ticket."]
    #[doc = ""]
    #[doc = " @param [in]  context         Library context"]
    #[doc = " @param [in]  options         Options"]
    #[doc = " @param [in]  ccache          Credential cache handle"]
    #[doc = " @param [in]  in_creds        Input credentials"]
    #[doc = " @param [out] out_creds       Output updated credentials"]
    #[doc = ""]
    #[doc = " Use @a ccache or a TGS exchange to get a service ticket matching @a"]
    #[doc = " in_creds."]
    #[doc = ""]
    #[doc = " Valid values for @a options are:"]
    #[doc = " @li #KRB5_GC_CACHED     Search only credential cache for the ticket"]
    #[doc = " @li #KRB5_GC_USER_USER  Return a user to user authentication ticket"]
    #[doc = ""]
    #[doc = " @a in_creds must be non-null.  @a in_creds->client and @a in_creds->server"]
    #[doc = " must be filled in to specify the client and the server respectively.  If any"]
    #[doc = " authorization data needs to be requested for the service ticket (such as"]
    #[doc = " restrictions on how the ticket can be used), specify it in @a"]
    #[doc = " in_creds->authdata; otherwise set @a in_creds->authdata to NULL.  The"]
    #[doc = " session key type is specified in @a in_creds->keyblock.enctype, if it is"]
    #[doc = " nonzero."]
    #[doc = ""]
    #[doc = " The expiration date is specified in @a in_creds->times.endtime."]
    #[doc = " The KDC may return tickets with an earlier expiration date."]
    #[doc = " If @a in_creds->times.endtime is set to 0, the latest possible"]
    #[doc = " expiration date will be requested."]
    #[doc = ""]
    #[doc = " Any returned ticket and intermediate ticket-granting tickets are stored"]
    #[doc = " in @a ccache."]
    #[doc = ""]
    #[doc = " Use krb5_free_creds() to free @a out_creds when it is no longer needed."]
    #[doc = ""]
    #[doc = " @retval"]
    #[doc = "  0  Success"]
    #[doc = " @return"]
    #[doc = " Kerberos error codes"]
    pub fn krb5_get_credentials(
        context: krb5_context,
        options: krb5_flags,
        ccache: krb5_ccache,
        in_creds: *mut krb5_creds,
        out_creds: *mut *mut krb5_creds,
    ) -> krb5_error_code;
}
extern "C" {
    #[doc = " @deprecated Replaced by krb5_get_validated_creds."]
    pub fn krb5_get_credentials_validate(
        context: krb5_context,
        options: krb5_flags,
        ccache: krb5_ccache,
        in_creds: *mut krb5_creds,
        out_creds: *mut *mut krb5_creds,
    ) -> krb5_error_code;
}
extern "C" {
    #[doc = " @deprecated Replaced by krb5_get_renewed_creds."]
    pub fn krb5_get_credentials_renew(
        context: krb5_context,
        options: krb5_flags,
        ccache: krb5_ccache,
        in_creds: *mut krb5_creds,
        out_creds: *mut *mut krb5_creds,
    ) -> krb5_error_code;
}
extern "C" {
    #[doc = " Create a @c KRB_AP_REQ message."]
    #[doc = ""]
    #[doc = " @param [in]     context        Library context"]
    #[doc = " @param [in,out] auth_context   Pre-existing or newly created auth context"]
    #[doc = " @param [in]     ap_req_options @ref AP_OPTS options"]
    #[doc = " @param [in]     service        Service name, or NULL to use @c \"host\""]
    #[doc = " @param [in]     hostname       Host name, or NULL to use local hostname"]
    #[doc = " @param [in]     in_data        Application data to be checksummed in the"]
    #[doc = "                                authenticator, or NULL"]
    #[doc = " @param [in]     ccache         Credential cache used to obtain credentials"]
    #[doc = "                                for the desired service."]
    #[doc = " @param [out]    outbuf         @c AP-REQ message"]
    #[doc = ""]
    #[doc = " This function is similar to krb5_mk_req_extended() except that it uses a"]
    #[doc = " given @a hostname, @a service, and @a ccache to construct a service"]
    #[doc = " principal name and obtain credentials."]
    #[doc = ""]
    #[doc = " Use krb5_free_data_contents() to free @a outbuf when it is no longer needed."]
    #[doc = ""]
    #[doc = " @retval 0 Success; otherwise - Kerberos error codes"]
    pub fn krb5_mk_req(
        context: krb5_context,
        auth_context: *mut krb5_auth_context,
        ap_req_options: krb5_flags,
        service: *const ::std::os::raw::c_char,
        hostname: *const ::std::os::raw::c_char,
        in_data: *mut krb5_data,
        ccache: krb5_ccache,
        outbuf: *mut krb5_data,
    ) -> krb5_error_code;
}
extern "C" {
    #[doc = " Create a @c KRB_AP_REQ message using supplied credentials."]
    #[doc = ""]
    #[doc = " @param [in]     context        Library context"]
    #[doc = " @param [in,out] auth_context   Pre-existing or newly created auth context"]
    #[doc = " @param [in]     ap_req_options @ref AP_OPTS options"]
    #[doc = " @param [in]     in_data        Application data to be checksummed in the"]
    #[doc = "                                authenticator, or NULL"]
    #[doc = " @param [in]     in_creds       Credentials for the service with valid ticket"]
    #[doc = "                                and key"]
    #[doc = " @param [out]    outbuf         @c AP-REQ message"]
    #[doc = ""]
    #[doc = " Valid @a ap_req_options are:"]
    #[doc = " @li #AP_OPTS_USE_SESSION_KEY - Use the session key when creating the"]
    #[doc = "                                request used for user to user"]
    #[doc = "                                authentication."]
    #[doc = " @li #AP_OPTS_MUTUAL_REQUIRED - Request a mutual authentication packet from"]
    #[doc = "                                the receiver."]
    #[doc = " @li #AP_OPTS_USE_SUBKEY      - Generate a subsession key from the current"]
    #[doc = "                                session key obtained from the credentials."]
    #[doc = ""]
    #[doc = " This function creates a KRB_AP_REQ message using supplied credentials @a"]
    #[doc = " in_creds.  @a auth_context may point to an existing auth context or to NULL,"]
    #[doc = " in which case a new one will be created.  If @a in_data is non-null, a"]
    #[doc = " checksum of it will be included in the authenticator contained in the"]
    #[doc = " KRB_AP_REQ message.  Use krb5_free_data_contents() to free @a outbuf when it"]
    #[doc = " is no longer needed."]
    #[doc = ""]
    #[doc = " On successful return, the authenticator is stored in @a auth_context with"]
    #[doc = " the @a client and @a checksum fields nulled out.  (This is to prevent"]
    #[doc = " pointer-sharing problems; the caller should not need these fields anyway,"]
    #[doc = " since the caller supplied them.)"]
    #[doc = ""]
    #[doc = " @sa krb5_mk_req()"]
    #[doc = ""]
    #[doc = " @retval 0 Success; otherwise - Kerberos error codes"]
    pub fn krb5_mk_req_extended(
        context: krb5_context,
        auth_context: *mut krb5_auth_context,
        ap_req_options: krb5_flags,
        in_data: *mut krb5_data,
        in_creds: *mut krb5_creds,
        outbuf: *mut krb5_data,
    ) -> krb5_error_code;
}
extern "C" {
    #[doc = " Format and encrypt a @c KRB_AP_REP message."]
    #[doc = ""]
    #[doc = " @param [in]  context         Library context"]
    #[doc = " @param [in]  auth_context    Authentication context"]
    #[doc = " @param [out] outbuf          @c AP-REP message"]
    #[doc = ""]
    #[doc = " This function fills in @a outbuf with an AP-REP message using information"]
    #[doc = " from @a auth_context."]
    #[doc = ""]
    #[doc = " If the flags in @a auth_context indicate that a sequence number should be"]
    #[doc = " used (either #KRB5_AUTH_CONTEXT_DO_SEQUENCE or"]
    #[doc = " #KRB5_AUTH_CONTEXT_RET_SEQUENCE) and the local sequence number in @a"]
    #[doc = " auth_context is 0, a new number will be generated with"]
    #[doc = " krb5_generate_seq_number()."]
    #[doc = ""]
    #[doc = " Use krb5_free_data_contents() to free @a outbuf when it is no longer needed."]
    #[doc = ""]
    #[doc = " @retval 0 Success; otherwise - Kerberos error codes"]
    pub fn krb5_mk_rep(
        context: krb5_context,
        auth_context: krb5_auth_context,
        outbuf: *mut krb5_data,
    ) -> krb5_error_code;
}
extern "C" {
    #[doc = " Format and encrypt a @c KRB_AP_REP message for DCE RPC."]
    #[doc = ""]
    #[doc = " @param [in]  context         Library context"]
    #[doc = " @param [in]  auth_context    Authentication context"]
    #[doc = " @param [out] outbuf          @c AP-REP message"]
    #[doc = ""]
    #[doc = " Use krb5_free_data_contents() to free @a outbuf when it is no longer needed."]
    #[doc = ""]
    #[doc = " @retval 0 Success; otherwise - Kerberos error codes"]
    pub fn krb5_mk_rep_dce(
        context: krb5_context,
        auth_context: krb5_auth_context,
        outbuf: *mut krb5_data,
    ) -> krb5_error_code;
}
extern "C" {
    #[doc = " Parse and decrypt a @c KRB_AP_REP message."]
    #[doc = ""]
    #[doc = " @param [in]  context         Library context"]
    #[doc = " @param [in]  auth_context    Authentication context"]
    #[doc = " @param [in]  inbuf           AP-REP message"]
    #[doc = " @param [out] repl            Decrypted reply message"]
    #[doc = ""]
    #[doc = " This function parses, decrypts and verifies a message from @a inbuf and"]
    #[doc = " fills in @a repl with a pointer to allocated memory containing the fields"]
    #[doc = " from the encrypted response."]
    #[doc = ""]
    #[doc = " Use krb5_free_ap_rep_enc_part() to free @a repl when it is no longer needed."]
    #[doc = ""]
    #[doc = " @retval 0 Success; otherwise - Kerberos error codes"]
    pub fn krb5_rd_rep(
        context: krb5_context,
        auth_context: krb5_auth_context,
        inbuf: *const krb5_data,
        repl: *mut *mut krb5_ap_rep_enc_part,
    ) -> krb5_error_code;
}
extern "C" {
    #[doc = " Parse and decrypt a @c KRB_AP_REP message for DCE RPC."]
    #[doc = ""]
    #[doc = " @param [in]  context         Library context"]
    #[doc = " @param [in]  auth_context    Authentication context"]
    #[doc = " @param [in]  inbuf           AP-REP message"]
    #[doc = " @param [out] nonce           Sequence number from the decrypted reply"]
    #[doc = ""]
    #[doc = " This function parses, decrypts and verifies a message from @a inbuf and"]
    #[doc = " fills in @a nonce with a decrypted reply sequence number."]
    #[doc = ""]
    #[doc = " @retval 0 Success; otherwise - Kerberos error codes"]
    pub fn krb5_rd_rep_dce(
        context: krb5_context,
        auth_context: krb5_auth_context,
        inbuf: *const krb5_data,
        nonce: *mut krb5_ui_4,
    ) -> krb5_error_code;
}
extern "C" {
    #[doc = " Format and encode a @c KRB_ERROR message."]
    #[doc = ""]
    #[doc = " @param [in]  context         Library context"]
    #[doc = " @param [in]  dec_err         Error structure to be encoded"]
    #[doc = " @param [out] enc_err         Encoded error structure"]
    #[doc = ""]
    #[doc = " This function creates a @c KRB_ERROR message in @a enc_err.  Use"]
    #[doc = " krb5_free_data_contents() to free @a enc_err when it is no longer needed."]
    #[doc = ""]
    #[doc = " @retval 0 Success; otherwise - Kerberos error codes"]
    pub fn krb5_mk_error(
        context: krb5_context,
        dec_err: *const krb5_error,
        enc_err: *mut krb5_data,
    ) -> krb5_error_code;
}
extern "C" {
    #[doc = " Decode a @c KRB-ERROR message."]
    #[doc = ""]
    #[doc = " @param [in]  context         Library context"]
    #[doc = " @param [in]  enc_errbuf      Encoded error message"]
    #[doc = " @param [out] dec_error       Decoded error message"]
    #[doc = ""]
    #[doc = " This function processes @c KRB-ERROR message @a enc_errbuf and returns"]
    #[doc = " an allocated structure @a dec_error containing the error message."]
    #[doc = " Use krb5_free_error() to free @a dec_error when it is no longer needed."]
    #[doc = ""]
    #[doc = " @retval 0 Success; otherwise - Kerberos error codes"]
    pub fn krb5_rd_error(
        context: krb5_context,
        enc_errbuf: *const krb5_data,
        dec_error: *mut *mut krb5_error,
    ) -> krb5_error_code;
}
extern "C" {
    #[doc = " Process @c KRB-SAFE message."]
    #[doc = ""]
    #[doc = " @param [in]  context         Library context"]
    #[doc = " @param [in]  auth_context    Authentication context"]
    #[doc = " @param [in]  inbuf           @c KRB-SAFE message to be parsed"]
    #[doc = " @param [out] userdata_out    Data parsed from @c KRB-SAFE message"]
    #[doc = " @param [out] rdata_out       Replay data. Specify NULL if not needed"]
    #[doc = ""]
    #[doc = " This function parses a @c KRB-SAFE message, verifies its integrity, and"]
    #[doc = " stores its data into @a userdata_out."]
    #[doc = ""]
    #[doc = " @note The @a rdata_out argument is required if the"]
    #[doc = " #KRB5_AUTH_CONTEXT_RET_TIME or #KRB5_AUTH_CONTEXT_RET_SEQUENCE flag is set"]
    #[doc = " in @a auth_context."]
    #[doc = ""]
    #[doc = " If @a auth_context has a remote address set, the address will be used to"]
    #[doc = " verify the sender address in the KRB-SAFE message.  If @a auth_context has a"]
    #[doc = " local address set, it will be used to verify the receiver address in the"]
    #[doc = " KRB-SAFE message if the message contains one."]
    #[doc = ""]
    #[doc = " If the #KRB5_AUTH_CONTEXT_DO_SEQUENCE flag is set in @a auth_context, the"]
    #[doc = " sequence number of the KRB-SAFE message is checked against the remote"]
    #[doc = " sequence number field of @a auth_context.  Otherwise, the sequence number is"]
    #[doc = " not used."]
    #[doc = ""]
    #[doc = " If the #KRB5_AUTH_CONTEXT_DO_TIME flag is set in @a auth_context, then the"]
    #[doc = " timestamp in the message is verified to be within the permitted clock skew"]
    #[doc = " of the current time, and the message is checked against an in-memory replay"]
    #[doc = " cache to detect reflections or replays."]
    #[doc = ""]
    #[doc = " Use krb5_free_data_contents() to free @a userdata_out when it is no longer"]
    #[doc = " needed."]
    #[doc = ""]
    #[doc = " @retval 0 Success; otherwise - Kerberos error codes"]
    pub fn krb5_rd_safe(
        context: krb5_context,
        auth_context: krb5_auth_context,
        inbuf: *const krb5_data,
        userdata_out: *mut krb5_data,
        rdata_out: *mut krb5_replay_data,
    ) -> krb5_error_code;
}
extern "C" {
    #[doc = " Process a @c KRB-PRIV message."]
    #[doc = ""]
    #[doc = " @param [in]  context         Library context"]
    #[doc = " @param [in]  auth_context    Authentication structure"]
    #[doc = " @param [in]  inbuf           @c KRB-PRIV message to be parsed"]
    #[doc = " @param [out] userdata_out    Data parsed from @c KRB-PRIV message"]
    #[doc = " @param [out] rdata_out       Replay data. Specify NULL if not needed"]
    #[doc = ""]
    #[doc = " This function parses a @c KRB-PRIV message, verifies its integrity, and"]
    #[doc = " stores its unencrypted data into @a userdata_out."]
    #[doc = ""]
    #[doc = " @note The @a rdata_out argument is required if the"]
    #[doc = " #KRB5_AUTH_CONTEXT_RET_TIME or #KRB5_AUTH_CONTEXT_RET_SEQUENCE flag is set"]
    #[doc = " in @a auth_context."]
    #[doc = ""]
    #[doc = " If @a auth_context has a remote address set, the address will be used to"]
    #[doc = " verify the sender address in the KRB-PRIV message.  If @a auth_context has a"]
    #[doc = " local address set, it will be used to verify the receiver address in the"]
    #[doc = " KRB-PRIV message if the message contains one."]
    #[doc = ""]
    #[doc = " If the #KRB5_AUTH_CONTEXT_DO_SEQUENCE flag is set in @a auth_context, the"]
    #[doc = " sequence number of the KRB-PRIV message is checked against the remote"]
    #[doc = " sequence number field of @a auth_context.  Otherwise, the sequence number is"]
    #[doc = " not used."]
    #[doc = ""]
    #[doc = " If the #KRB5_AUTH_CONTEXT_DO_TIME flag is set in @a auth_context, then the"]
    #[doc = " timestamp in the message is verified to be within the permitted clock skew"]
    #[doc = " of the current time, and the message is checked against an in-memory replay"]
    #[doc = " cache to detect reflections or replays."]
    #[doc = ""]
    #[doc = " Use krb5_free_data_contents() to free @a userdata_out when it is no longer"]
    #[doc = " needed."]
    #[doc = ""]
    #[doc = " @retval 0 Success; otherwise - Kerberos error codes"]
    pub fn krb5_rd_priv(
        context: krb5_context,
        auth_context: krb5_auth_context,
        inbuf: *const krb5_data,
        userdata_out: *mut krb5_data,
        rdata_out: *mut krb5_replay_data,
    ) -> krb5_error_code;
}
extern "C" {
    #[doc = " Convert a string principal name to a krb5_principal structure."]
    #[doc = ""]
    #[doc = " @param [in]  context         Library context"]
    #[doc = " @param [in]  name            String representation of a principal name"]
    #[doc = " @param [out] principal_out   New principal"]
    #[doc = ""]
    #[doc = " Convert a string representation of a principal name to a krb5_principal"]
    #[doc = " structure."]
    #[doc = ""]
    #[doc = " A string representation of a Kerberos name consists of one or more principal"]
    #[doc = " name components, separated by slashes, optionally followed by the \\@"]
    #[doc = " character and a realm name.  If the realm name is not specified, the local"]
    #[doc = " realm is used."]
    #[doc = ""]
    #[doc = " To use the slash and \\@ symbols as part of a component (quoted) instead of"]
    #[doc = " using them as a component separator or as a realm prefix), put a backslash"]
    #[doc = " (\\) character in front of the symbol.  Similarly, newline, tab, backspace,"]
    #[doc = " and NULL characters can be included in a component by using @c n, @c t, @c b"]
    #[doc = " or @c 0, respectively."]
    #[doc = ""]
    #[doc = " @note The realm in a Kerberos @a name cannot contain slash, colon,"]
    #[doc = " or NULL characters."]
    #[doc = ""]
    #[doc = " Use krb5_free_principal() to free @a principal_out when it is no longer"]
    #[doc = " needed."]
    #[doc = ""]
    #[doc = " @retval"]
    #[doc = " 0 Success"]
    #[doc = " @return"]
    #[doc = " Kerberos error codes"]
    pub fn krb5_parse_name(
        context: krb5_context,
        name: *const ::std::os::raw::c_char,
        principal_out: *mut krb5_principal,
    ) -> krb5_error_code;
}
extern "C" {
    #[doc = " Convert a string principal name to a krb5_principal with flags."]
    #[doc = ""]
    #[doc = " @param [in]  context         Library context"]
    #[doc = " @param [in]  name            String representation of a principal name"]
    #[doc = " @param [in]  flags           Flag"]
    #[doc = " @param [out] principal_out   New principal"]
    #[doc = ""]
    #[doc = " Similar to krb5_parse_name(), this function converts a single-string"]
    #[doc = " representation of a principal name to a krb5_principal structure."]
    #[doc = ""]
    #[doc = " The following flags are valid:"]
    #[doc = " @li #KRB5_PRINCIPAL_PARSE_NO_REALM - no realm must be present in @a name"]
    #[doc = " @li #KRB5_PRINCIPAL_PARSE_REQUIRE_REALM - realm must be present in @a name"]
    #[doc = " @li #KRB5_PRINCIPAL_PARSE_ENTERPRISE - create single-component enterprise"]
    #[doc = "                                        principal"]
    #[doc = " @li #KRB5_PRINCIPAL_PARSE_IGNORE_REALM - ignore realm if present in @a name"]
    #[doc = ""]
    #[doc = " If @c KRB5_PRINCIPAL_PARSE_NO_REALM or @c KRB5_PRINCIPAL_PARSE_IGNORE_REALM"]
    #[doc = " is specified in @a flags, the realm of the new principal will be empty."]
    #[doc = " Otherwise, the default realm for @a context will be used if @a name does not"]
    #[doc = " specify a realm."]
    #[doc = ""]
    #[doc = " Use krb5_free_principal() to free @a principal_out when it is no longer"]
    #[doc = " needed."]
    #[doc = ""]
    #[doc = " @retval"]
    #[doc = " 0 Success"]
    #[doc = " @return"]
    #[doc = " Kerberos error codes"]
    pub fn krb5_parse_name_flags(
        context: krb5_context,
        name: *const ::std::os::raw::c_char,
        flags: ::std::os::raw::c_int,
        principal_out: *mut krb5_principal,
    ) -> krb5_error_code;
}
extern "C" {
    #[doc = " Convert a krb5_principal structure to a string representation."]
    #[doc = ""]
    #[doc = " @param [in]  context         Library context"]
    #[doc = " @param [in]  principal       Principal"]
    #[doc = " @param [out] name            String representation of principal name"]
    #[doc = ""]
    #[doc = " The resulting string representation uses the format and quoting conventions"]
    #[doc = " described for krb5_parse_name()."]
    #[doc = ""]
    #[doc = " Use krb5_free_unparsed_name() to free @a name when it is no longer needed."]
    #[doc = ""]
    #[doc = " @retval"]
    #[doc = " 0 Success"]
    #[doc = " @return"]
    #[doc = " Kerberos error codes"]
    pub fn krb5_unparse_name(
        context: krb5_context,
        principal: krb5_const_principal,
        name: *mut *mut ::std::os::raw::c_char,
    ) -> krb5_error_code;
}
extern "C" {
    #[doc = " Convert krb5_principal structure to string and length."]
    #[doc = ""]
    #[doc = " @param [in]     context      Library context"]
    #[doc = " @param [in]     principal    Principal"]
    #[doc = " @param [in,out] name         String representation of principal name"]
    #[doc = " @param [in,out] size         Size of unparsed name"]
    #[doc = ""]
    #[doc = " This function is similar to krb5_unparse_name(), but allows the use of an"]
    #[doc = " existing buffer for the result.  If size is not NULL, then @a name must"]
    #[doc = " point to either NULL or an existing buffer of at least the size pointed to"]
    #[doc = " by @a size.  The buffer will be allocated or resized if necessary, with the"]
    #[doc = " new pointer stored into @a name.  Whether or not the buffer is resized, the"]
    #[doc = " necessary space for the result, including null terminator, will be stored"]
    #[doc = " into @a size."]
    #[doc = ""]
    #[doc = " If size is NULL, this function behaves exactly as krb5_unparse_name()."]
    #[doc = ""]
    #[doc = " @retval"]
    #[doc = " 0 Success"]
    #[doc = " @return"]
    #[doc = " Kerberos error codes. On failure @a name is set to NULL"]
    pub fn krb5_unparse_name_ext(
        context: krb5_context,
        principal: krb5_const_principal,
        name: *mut *mut ::std::os::raw::c_char,
        size: *mut ::std::os::raw::c_uint,
    ) -> krb5_error_code;
}
extern "C" {
    #[doc = " Convert krb5_principal structure to a string with flags."]
    #[doc = ""]
    #[doc = " @param [in]  context         Library context"]
    #[doc = " @param [in]  principal       Principal"]
    #[doc = " @param [in]  flags           Flags"]
    #[doc = " @param [out] name            String representation of principal name"]
    #[doc = ""]
    #[doc = " Similar to krb5_unparse_name(), this function converts a krb5_principal"]
    #[doc = " structure to a string representation."]
    #[doc = ""]
    #[doc = " The following flags are valid:"]
    #[doc = " @li #KRB5_PRINCIPAL_UNPARSE_SHORT - omit realm if it is the local realm"]
    #[doc = " @li #KRB5_PRINCIPAL_UNPARSE_NO_REALM - omit realm"]
    #[doc = " @li #KRB5_PRINCIPAL_UNPARSE_DISPLAY - do not quote special characters"]
    #[doc = ""]
    #[doc = " Use krb5_free_unparsed_name() to free @a name when it is no longer needed."]
    #[doc = ""]
    #[doc = " @retval"]
    #[doc = " 0 Success"]
    #[doc = " @return"]
    #[doc = " Kerberos error codes. On failure @a name is set to NULL"]
    pub fn krb5_unparse_name_flags(
        context: krb5_context,
        principal: krb5_const_principal,
        flags: ::std::os::raw::c_int,
        name: *mut *mut ::std::os::raw::c_char,
    ) -> krb5_error_code;
}
extern "C" {
    #[doc = " Convert krb5_principal structure to string format with flags."]
    #[doc = ""]
    #[doc = " @param [in]  context         Library context"]
    #[doc = " @param [in]  principal       Principal"]
    #[doc = " @param [in]  flags           Flags"]
    #[doc = " @param [out] name            Single string format of principal name"]
    #[doc = " @param [out] size            Size of unparsed name buffer"]
    #[doc = ""]
    #[doc = " @sa krb5_unparse_name() krb5_unparse_name_flags() krb5_unparse_name_ext()"]
    #[doc = ""]
    #[doc = " @retval"]
    #[doc = " 0 Success"]
    #[doc = " @return"]
    #[doc = " Kerberos error codes. On failure @a name is set to NULL"]
    pub fn krb5_unparse_name_flags_ext(
        context: krb5_context,
        principal: krb5_const_principal,
        flags: ::std::os::raw::c_int,
        name: *mut *mut ::std::os::raw::c_char,
        size: *mut ::std::os::raw::c_uint,
    ) -> krb5_error_code;
}
extern "C" {
    #[doc = " Set the realm field of a principal"]
    #[doc = ""]
    #[doc = " @param [in] context          Library context"]
    #[doc = " @param [in] principal        Principal name"]
    #[doc = " @param [in] realm            Realm name"]
    #[doc = ""]
    #[doc = " Set the realm name part of @a principal to @a realm, overwriting the"]
    #[doc = " previous realm."]
    #[doc = ""]
    #[doc = " @retval"]
    #[doc = " 0   Success"]
    #[doc = " @return"]
    #[doc = " Kerberos error codes"]
    pub fn krb5_set_principal_realm(
        context: krb5_context,
        principal: krb5_principal,
        realm: *const ::std::os::raw::c_char,
    ) -> krb5_error_code;
}
extern "C" {
    #[doc = " Search a list of addresses for a specified address."]
    #[doc = ""]
    #[doc = " @param [in] context          Library context"]
    #[doc = " @param [in] addr             Address to search for"]
    #[doc = " @param [in] addrlist         Address list to be searched (or NULL)"]
    #[doc = ""]
    #[doc = " @note If @a addrlist contains only a NetBIOS addresses, it will be treated"]
    #[doc = "       as a null list."]
    #[doc = ""]
    #[doc = " @return"]
    #[doc = " TRUE if @a addr is listed in @a addrlist, or @c addrlist is NULL; FALSE"]
    #[doc = " otherwise"]
    pub fn krb5_address_search(
        context: krb5_context,
        addr: *const krb5_address,
        addrlist: *const *mut krb5_address,
    ) -> krb5_boolean;
}
extern "C" {
    #[doc = " Compare two Kerberos addresses."]
    #[doc = ""]
    #[doc = " @param [in] context          Library context"]
    #[doc = " @param [in] addr1            First address to be compared"]
    #[doc = " @param [in] addr2            Second address to be compared"]
    #[doc = ""]
    #[doc = " @return"]
    #[doc = " TRUE if the addresses are the same, FALSE otherwise"]
    pub fn krb5_address_compare(
        context: krb5_context,
        addr1: *const krb5_address,
        addr2: *const krb5_address,
    ) -> krb5_boolean;
}
extern "C" {
    #[doc = " Return an ordering of the specified addresses."]
    #[doc = ""]
    #[doc = " @param [in] context          Library context"]
    #[doc = " @param [in] addr1            First address"]
    #[doc = " @param [in] addr2            Second address"]
    #[doc = ""]
    #[doc = " @retval"]
    #[doc = "  0 The two addresses are the same"]
    #[doc = " @retval"]
    #[doc = "  \\< 0 First address is less than second"]
    #[doc = " @retval"]
    #[doc = "  \\> 0 First address is greater than second"]
    pub fn krb5_address_order(
        context: krb5_context,
        addr1: *const krb5_address,
        addr2: *const krb5_address,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    #[doc = " Compare the realms of two principals."]
    #[doc = ""]
    #[doc = " @param [in] context          Library context"]
    #[doc = " @param [in] princ1           First principal"]
    #[doc = " @param [in] princ2           Second principal"]
    #[doc = ""]
    #[doc = " @retval"]
    #[doc = " TRUE if the realm names are the same; FALSE otherwise"]
    pub fn krb5_realm_compare(
        context: krb5_context,
        princ1: krb5_const_principal,
        princ2: krb5_const_principal,
    ) -> krb5_boolean;
}
extern "C" {
    #[doc = " Compare two principals."]
    #[doc = ""]
    #[doc = " @param [in] context          Library context"]
    #[doc = " @param [in] princ1           First principal"]
    #[doc = " @param [in] princ2           Second principal"]
    #[doc = ""]
    #[doc = " @retval"]
    #[doc = " TRUE if the principals are the same; FALSE otherwise"]
    pub fn krb5_principal_compare(
        context: krb5_context,
        princ1: krb5_const_principal,
        princ2: krb5_const_principal,
    ) -> krb5_boolean;
}
extern "C" {
    #[doc = " Compare two principals ignoring realm components."]
    #[doc = ""]
    #[doc = " @param [in] context          Library context"]
    #[doc = " @param [in] princ1           First principal"]
    #[doc = " @param [in] princ2           Second principal"]
    #[doc = ""]
    #[doc = " Similar to krb5_principal_compare(), but do not compare the realm"]
    #[doc = " components of the principals."]
    #[doc = ""]
    #[doc = " @retval"]
    #[doc = " TRUE if the principals are the same; FALSE otherwise"]
    pub fn krb5_principal_compare_any_realm(
        context: krb5_context,
        princ1: krb5_const_principal,
        princ2: krb5_const_principal,
    ) -> krb5_boolean;
}
extern "C" {
    #[doc = " Compare two principals with additional flags."]
    #[doc = ""]
    #[doc = " @param [in] context           Library context"]
    #[doc = " @param [in] princ1            First principal"]
    #[doc = " @param [in] princ2            Second principal"]
    #[doc = " @param [in] flags             Flags"]
    #[doc = ""]
    #[doc = " Valid flags are:"]
    #[doc = " @li #KRB5_PRINCIPAL_COMPARE_IGNORE_REALM - ignore realm component"]
    #[doc = " @li #KRB5_PRINCIPAL_COMPARE_ENTERPRISE - UPNs as real principals"]
    #[doc = " @li #KRB5_PRINCIPAL_COMPARE_CASEFOLD case-insensitive"]
    #[doc = " @li #KRB5_PRINCIPAL_COMPARE_UTF8 - treat principals as UTF-8"]
    #[doc = ""]
    #[doc = " @sa krb5_principal_compare()"]
    #[doc = ""]
    #[doc = " @retval"]
    #[doc = " TRUE if the principal names are the same; FALSE otherwise"]
    pub fn krb5_principal_compare_flags(
        context: krb5_context,
        princ1: krb5_const_principal,
        princ2: krb5_const_principal,
        flags: ::std::os::raw::c_int,
    ) -> krb5_boolean;
}
extern "C" {
    #[doc = " Initialize an empty @c krb5_keyblock."]
    #[doc = ""]
    #[doc = " @param [in]  context         Library context"]
    #[doc = " @param [in]  enctype         Encryption type"]
    #[doc = " @param [in]  length          Length of keyblock (or 0)"]
    #[doc = " @param [out] out             New keyblock structure"]
    #[doc = ""]
    #[doc = " Initialize a new keyblock and allocate storage for the contents of the key."]
    #[doc = " It is legal to pass in a length of 0, in which case contents are left"]
    #[doc = " unallocated.  Use krb5_free_keyblock() to free @a out when it is no longer"]
    #[doc = " needed."]
    #[doc = ""]
    #[doc = " @note If @a length is set to 0, contents are left unallocated."]
    #[doc = ""]
    #[doc = " @retval 0 Success; otherwise - Kerberos error codes"]
    pub fn krb5_init_keyblock(
        context: krb5_context,
        enctype: krb5_enctype,
        length: size_t,
        out: *mut *mut krb5_keyblock,
    ) -> krb5_error_code;
}
extern "C" {
    #[doc = " Copy a keyblock."]
    #[doc = ""]
    #[doc = " @param [in]  context         Library context"]
    #[doc = " @param [in]  from            Keyblock to be copied"]
    #[doc = " @param [out] to              Copy of keyblock @a from"]
    #[doc = ""]
    #[doc = " This function creates a new keyblock with the same contents as @a from.  Use"]
    #[doc = " krb5_free_keyblock() to free @a to when it is no longer needed."]
    #[doc = ""]
    #[doc = " @retval 0 Success; otherwise - Kerberos error codes"]
    pub fn krb5_copy_keyblock(
        context: krb5_context,
        from: *const krb5_keyblock,
        to: *mut *mut krb5_keyblock,
    ) -> krb5_error_code;
}
extern "C" {
    #[doc = " Copy the contents of a keyblock."]
    #[doc = ""]
    #[doc = " @param [in]  context         Library context"]
    #[doc = " @param [in]  from            Key to be copied"]
    #[doc = " @param [out] to              Output key"]
    #[doc = ""]
    #[doc = " This function copies the contents of @a from to @a to.  Use"]
    #[doc = " krb5_free_keyblock_contents() to free @a to when it is no longer needed."]
    #[doc = ""]
    #[doc = " @retval 0 Success; otherwise - Kerberos error codes"]
    pub fn krb5_copy_keyblock_contents(
        context: krb5_context,
        from: *const krb5_keyblock,
        to: *mut krb5_keyblock,
    ) -> krb5_error_code;
}
extern "C" {
    #[doc = " Copy a krb5_creds structure."]
    #[doc = ""]
    #[doc = " @param [in]  context         Library context"]
    #[doc = " @param [in]  incred          Credentials structure to be copied"]
    #[doc = " @param [out] outcred         Copy of @a incred"]
    #[doc = ""]
    #[doc = " This function creates a new credential with the contents of @a incred.  Use"]
    #[doc = " krb5_free_creds() to free @a outcred when it is no longer needed."]
    #[doc = ""]
    #[doc = " @retval 0 Success; otherwise - Kerberos error codes"]
    pub fn krb5_copy_creds(
        context: krb5_context,
        incred: *const krb5_creds,
        outcred: *mut *mut krb5_creds,
    ) -> krb5_error_code;
}
extern "C" {
    #[doc = " Copy a krb5_data object."]
    #[doc = ""]
    #[doc = " @param [in]  context           Library context"]
    #[doc = " @param [in]  indata            Data object to be copied"]
    #[doc = " @param [out] outdata           Copy of @a indata"]
    #[doc = ""]
    #[doc = " This function creates a new krb5_data object with the contents of @a indata."]
    #[doc = " Use krb5_free_data() to free @a outdata when it is no longer needed."]
    #[doc = ""]
    #[doc = " @retval 0 Success; otherwise - Kerberos error codes"]
    pub fn krb5_copy_data(
        context: krb5_context,
        indata: *const krb5_data,
        outdata: *mut *mut krb5_data,
    ) -> krb5_error_code;
}
extern "C" {
    #[doc = " Copy a principal."]
    #[doc = ""]
    #[doc = " @param [in]  context         Library context"]
    #[doc = " @param [in]  inprinc         Principal to be copied"]
    #[doc = " @param [out] outprinc        Copy of @a inprinc"]
    #[doc = ""]
    #[doc = " This function creates a new principal structure with the contents of @a"]
    #[doc = " inprinc.  Use krb5_free_principal() to free @a outprinc when it is no longer"]
    #[doc = " needed."]
    #[doc = ""]
    #[doc = " @retval 0 Success; otherwise - Kerberos error codes"]
    pub fn krb5_copy_principal(
        context: krb5_context,
        inprinc: krb5_const_principal,
        outprinc: *mut krb5_principal,
    ) -> krb5_error_code;
}
extern "C" {
    #[doc = " Copy an array of addresses."]
    #[doc = ""]
    #[doc = " @param [in]  context         Library context"]
    #[doc = " @param [in]  inaddr          Array of addresses to be copied"]
    #[doc = " @param [out] outaddr         Copy of array of addresses"]
    #[doc = ""]
    #[doc = " This function creates a new address array containing a copy of @a inaddr."]
    #[doc = " Use krb5_free_addresses() to free @a outaddr when it is no longer needed."]
    #[doc = ""]
    #[doc = " @retval 0 Success; otherwise - Kerberos error codes"]
    pub fn krb5_copy_addresses(
        context: krb5_context,
        inaddr: *const *mut krb5_address,
        outaddr: *mut *mut *mut krb5_address,
    ) -> krb5_error_code;
}
extern "C" {
    #[doc = " Copy a krb5_ticket structure."]
    #[doc = ""]
    #[doc = " @param [in]  context         Library context"]
    #[doc = " @param [in]  from            Ticket to be copied"]
    #[doc = " @param [out] pto             Copy of ticket"]
    #[doc = ""]
    #[doc = " This function creates a new krb5_ticket structure containing the contents of"]
    #[doc = " @a from.  Use krb5_free_ticket() to free @a pto when it is no longer needed."]
    #[doc = ""]
    #[doc = " @retval 0 Success; otherwise - Kerberos error codes"]
    pub fn krb5_copy_ticket(
        context: krb5_context,
        from: *const krb5_ticket,
        pto: *mut *mut krb5_ticket,
    ) -> krb5_error_code;
}
extern "C" {
    #[doc = " Copy an authorization data list."]
    #[doc = ""]
    #[doc = " @param [in]  context         Library context"]
    #[doc = " @param [in]  in_authdat      List of @a krb5_authdata structures"]
    #[doc = " @param [out] out             New array of @a krb5_authdata structures"]
    #[doc = ""]
    #[doc = " This function creates a new authorization data list containing a copy of @a"]
    #[doc = " in_authdat, which must be null-terminated.  Use krb5_free_authdata() to free"]
    #[doc = " @a out when it is no longer needed."]
    #[doc = ""]
    #[doc = " @note The last array entry in @a in_authdat must be a NULL pointer."]
    #[doc = ""]
    #[doc = " @retval 0 Success; otherwise - Kerberos error codes"]
    pub fn krb5_copy_authdata(
        context: krb5_context,
        in_authdat: *const *mut krb5_authdata,
        out: *mut *mut *mut krb5_authdata,
    ) -> krb5_error_code;
}
extern "C" {
    #[doc = " Find authorization data elements."]
    #[doc = ""]
    #[doc = " @param [in]  context         Library context"]
    #[doc = " @param [in]  ticket_authdata Authorization data list from ticket"]
    #[doc = " @param [in]  ap_req_authdata Authorization data list from AP request"]
    #[doc = " @param [in]  ad_type         Authorization data type to find"]
    #[doc = " @param [out] results         List of matching entries"]
    #[doc = ""]
    #[doc = " This function searches @a ticket_authdata and @a ap_req_authdata for"]
    #[doc = " elements of type @a ad_type.  Either input list may be NULL, in which case"]
    #[doc = " it will not be searched; otherwise, the input lists must be terminated by"]
    #[doc = " NULL entries.  This function will search inside AD-IF-RELEVANT containers if"]
    #[doc = " found in either list.  Use krb5_free_authdata() to free @a results when it"]
    #[doc = " is no longer needed."]
    #[doc = ""]
    #[doc = " @version New in 1.10"]
    pub fn krb5_find_authdata(
        context: krb5_context,
        ticket_authdata: *const *mut krb5_authdata,
        ap_req_authdata: *const *mut krb5_authdata,
        ad_type: krb5_authdatatype,
        results: *mut *mut *mut krb5_authdata,
    ) -> krb5_error_code;
}
extern "C" {
    #[doc = " Merge two authorization data lists into a new list."]
    #[doc = ""]
    #[doc = " @param [in]  context         Library context"]
    #[doc = " @param [in]  inauthdat1      First list of @a krb5_authdata structures"]
    #[doc = " @param [in]  inauthdat2      Second list of @a krb5_authdata structures"]
    #[doc = " @param [out] outauthdat      Merged list of @a krb5_authdata structures"]
    #[doc = ""]
    #[doc = " Merge two authdata arrays, such as the array from a ticket"]
    #[doc = " and authenticator."]
    #[doc = " Use krb5_free_authdata() to free @a outauthdat when it is no longer needed."]
    #[doc = ""]
    #[doc = " @note The last array entry in @a inauthdat1 and @a inauthdat2"]
    #[doc = " must be a NULL pointer."]
    #[doc = ""]
    #[doc = " @retval 0 Success; otherwise - Kerberos error codes"]
    pub fn krb5_merge_authdata(
        context: krb5_context,
        inauthdat1: *const *mut krb5_authdata,
        inauthdat2: *const *mut krb5_authdata,
        outauthdat: *mut *mut *mut krb5_authdata,
    ) -> krb5_error_code;
}
extern "C" {
    #[doc = " Copy a krb5_authenticator structure."]
    #[doc = ""]
    #[doc = " @param [in]  context         Library context"]
    #[doc = " @param [in]  authfrom        krb5_authenticator structure to be copied"]
    #[doc = " @param [out] authto          Copy of krb5_authenticator structure"]
    #[doc = ""]
    #[doc = " This function creates a new krb5_authenticator structure with the content of"]
    #[doc = " @a authfrom.  Use krb5_free_authenticator() to free @a authto when it is no"]
    #[doc = " longer needed."]
    #[doc = ""]
    #[doc = " @retval 0 Success; otherwise - Kerberos error codes"]
    pub fn krb5_copy_authenticator(
        context: krb5_context,
        authfrom: *const krb5_authenticator,
        authto: *mut *mut krb5_authenticator,
    ) -> krb5_error_code;
}
extern "C" {
    #[doc = " Copy a krb5_checksum structure."]
    #[doc = ""]
    #[doc = " @param [in]  context         Library context"]
    #[doc = " @param [in]  ckfrom          Checksum to be copied"]
    #[doc = " @param [out] ckto            Copy of krb5_checksum structure"]
    #[doc = ""]
    #[doc = " This function creates a new krb5_checksum structure with the contents of @a"]
    #[doc = " ckfrom.  Use krb5_free_checksum() to free @a ckto when it is no longer"]
    #[doc = " needed."]
    #[doc = ""]
    #[doc = " @retval 0 Success; otherwise - Kerberos error codes"]
    pub fn krb5_copy_checksum(
        context: krb5_context,
        ckfrom: *const krb5_checksum,
        ckto: *mut *mut krb5_checksum,
    ) -> krb5_error_code;
}
extern "C" {
    #[doc = " Generate a replay cache object for server use and open it."]
    #[doc = ""]
    #[doc = " @param [in]  context         Library context"]
    #[doc = " @param [in]  piece           Unused (replay cache identifier)"]
    #[doc = " @param [out] rcptr           Handle to an open rcache"]
    #[doc = ""]
    #[doc = " This function creates a handle to the default replay cache.  Use"]
    #[doc = " krb5_rc_close() to close @a rcptr when it is no longer needed."]
    #[doc = ""]
    #[doc = " @version Prior to release 1.18, this function creates a handle to a"]
    #[doc = " different replay cache for each unique value of @a piece."]
    #[doc = ""]
    #[doc = " @retval 0 Success; otherwise - Kerberos error codes"]
    pub fn krb5_get_server_rcache(
        context: krb5_context,
        piece: *const krb5_data,
        rcptr: *mut krb5_rcache,
    ) -> krb5_error_code;
}
extern "C" {
    #[doc = " Build a principal name using length-counted strings."]
    #[doc = ""]
    #[doc = " @param [in]  context  Library context"]
    #[doc = " @param [out] princ    Principal name"]
    #[doc = " @param [in]  rlen     Realm name length"]
    #[doc = " @param [in]  realm    Realm name"]
    #[doc = " @param [in]  ...      List of unsigned int/char * components, followed by 0"]
    #[doc = ""]
    #[doc = " This function creates a principal from a length-counted string and a"]
    #[doc = " variable-length list of length-counted components.  The list of components"]
    #[doc = " ends with the first 0 length argument (so it is not possible to specify an"]
    #[doc = " empty component with this function).  Call krb5_free_principal() to free"]
    #[doc = " allocated memory for principal when it is no longer needed."]
    #[doc = ""]
    #[doc = " @code"]
    #[doc = " Example of how to build principal WELLKNOWN/ANONYMOUS@R"]
    #[doc = "     krb5_build_principal_ext(context, &principal, strlen(\"R\"), \"R\","]
    #[doc = "         (unsigned int)strlen(KRB5_WELLKNOWN_NAMESTR),"]
    #[doc = "         KRB5_WELLKNOWN_NAMESTR,"]
    #[doc = "         (unsigned int)strlen(KRB5_ANONYMOUS_PRINCSTR),"]
    #[doc = "         KRB5_ANONYMOUS_PRINCSTR, 0);"]
    #[doc = " @endcode"]
    #[doc = ""]
    #[doc = " @retval"]
    #[doc = " 0  Success"]
    #[doc = " @return"]
    #[doc = " Kerberos error codes"]
    pub fn krb5_build_principal_ext(
        context: krb5_context,
        princ: *mut krb5_principal,
        rlen: ::std::os::raw::c_uint,
        realm: *const ::std::os::raw::c_char,
        ...
    ) -> krb5_error_code;
}
extern "C" {
    #[doc = " Build a principal name using null-terminated strings."]
    #[doc = ""]
    #[doc = " @param [in]  context         Library context"]
    #[doc = " @param [out] princ           Principal name"]
    #[doc = " @param [in]  rlen            Realm name length"]
    #[doc = " @param [in]  realm           Realm name"]
    #[doc = " @param [in]  ...             List of char * components, ending with NULL"]
    #[doc = ""]
    #[doc = " Call krb5_free_principal() to free @a princ when it is no longer needed."]
    #[doc = ""]
    #[doc = " @note krb5_build_principal() and krb5_build_principal_alloc_va() perform the"]
    #[doc = " same task.  krb5_build_principal() takes variadic arguments."]
    #[doc = " krb5_build_principal_alloc_va() takes a pre-computed @a varargs pointer."]
    #[doc = ""]
    #[doc = " @code"]
    #[doc = " Example of how to build principal H/S@R"]
    #[doc = "     krb5_build_principal(context, &principal,"]
    #[doc = "                          strlen(\"R\"), \"R\", \"H\", \"S\", (char*)NULL);"]
    #[doc = " @endcode"]
    #[doc = ""]
    #[doc = " @retval"]
    #[doc = " 0  Success"]
    #[doc = " @return"]
    #[doc = " Kerberos error codes"]
    pub fn krb5_build_principal(
        context: krb5_context,
        princ: *mut krb5_principal,
        rlen: ::std::os::raw::c_uint,
        realm: *const ::std::os::raw::c_char,
        ...
    ) -> krb5_error_code;
}
extern "C" {
    #[doc = " Build a principal name, using a precomputed variable argument list"]
    #[doc = ""]
    #[doc = " @param [in]  context         Library context"]
    #[doc = " @param [out] princ           Principal structure"]
    #[doc = " @param [in]  rlen            Realm name length"]
    #[doc = " @param [in]  realm           Realm name"]
    #[doc = " @param [in]  ap              List of char * components, ending with NULL"]
    #[doc = ""]
    #[doc = " Similar to krb5_build_principal(), this function builds a principal name,"]
    #[doc = " but its name components are specified as a va_list."]
    #[doc = ""]
    #[doc = " Use krb5_free_principal() to deallocate @a princ when it is no longer"]
    #[doc = " needed."]
    #[doc = ""]
    #[doc = " @code"]
    #[doc = " Function usage example:"]
    #[doc = "   va_list ap;"]
    #[doc = "   va_start(ap, realm);"]
    #[doc = "   krb5_build_principal_alloc_va(context, princ, rlen, realm, ap);"]
    #[doc = "   va_end(ap);"]
    #[doc = " @endcode"]
    #[doc = ""]
    #[doc = " @retval"]
    #[doc = " 0  Success"]
    #[doc = " @return"]
    #[doc = " Kerberos error codes"]
    pub fn krb5_build_principal_alloc_va(
        context: krb5_context,
        princ: *mut krb5_principal,
        rlen: ::std::os::raw::c_uint,
        realm: *const ::std::os::raw::c_char,
        ap: *mut __va_list_tag,
    ) -> krb5_error_code;
}
extern "C" {
    #[doc = " Convert a Kerberos V4 principal to a Kerberos V5 principal."]
    #[doc = ""]
    #[doc = " @param [in]  context         Library context"]
    #[doc = " @param [in]  name            V4 name"]
    #[doc = " @param [in]  instance        V4 instance"]
    #[doc = " @param [in]  realm           Realm"]
    #[doc = " @param [out] princ           V5 principal"]
    #[doc = ""]
    #[doc = " This function builds a @a princ from V4 specification based on given input"]
    #[doc = " @a name.instance\\@realm."]
    #[doc = ""]
    #[doc = " Use krb5_free_principal() to free @a princ when it is no longer needed."]
    #[doc = ""]
    #[doc = " @retval 0 Success; otherwise - Kerberos error codes"]
    pub fn krb5_425_conv_principal(
        context: krb5_context,
        name: *const ::std::os::raw::c_char,
        instance: *const ::std::os::raw::c_char,
        realm: *const ::std::os::raw::c_char,
        princ: *mut krb5_principal,
    ) -> krb5_error_code;
}
extern "C" {
    #[doc = " Convert a Kerberos V5 principal to a Kerberos V4 principal."]
    #[doc = ""]
    #[doc = " @param [in]  context         Library context"]
    #[doc = " @param [in]  princ           V5 Principal"]
    #[doc = " @param [out] name            V4 principal's name to be filled in"]
    #[doc = " @param [out] inst            V4 principal's instance name to be filled in"]
    #[doc = " @param [out] realm           Principal's realm name to be filled in"]
    #[doc = ""]
    #[doc = " This function separates a V5 principal @a princ into @a name, @a instance,"]
    #[doc = " and @a realm."]
    #[doc = ""]
    #[doc = " @retval"]
    #[doc = "  0  Success"]
    #[doc = " @retval"]
    #[doc = "  KRB5_INVALID_PRINCIPAL   Invalid principal name"]
    #[doc = " @retval"]
    #[doc = "  KRB5_CONFIG_CANTOPEN     Can't open or find Kerberos configuration file"]
    #[doc = " @return"]
    #[doc = " Kerberos error codes"]
    pub fn krb5_524_conv_principal(
        context: krb5_context,
        princ: krb5_const_principal,
        name: *mut ::std::os::raw::c_char,
        inst: *mut ::std::os::raw::c_char,
        realm: *mut ::std::os::raw::c_char,
    ) -> krb5_error_code;
}
#[doc = "@deprecated"]
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct credentials {
    _unused: [u8; 0],
}
extern "C" {
    #[doc = " Convert a Kerberos V5 credentials to a Kerberos V4 credentials"]
    #[doc = ""]
    #[doc = " @note Not implemented"]
    #[doc = ""]
    #[doc = " @retval KRB524_KRB4_DISABLED (always)"]
    pub fn krb5_524_convert_creds(
        context: krb5_context,
        v5creds: *mut krb5_creds,
        v4creds: *mut credentials,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    #[doc = " Get a handle for a key table."]
    #[doc = ""]
    #[doc = " @param [in]  context         Library context"]
    #[doc = " @param [in]  name            Name of the key table"]
    #[doc = " @param [out] ktid            Key table handle"]
    #[doc = ""]
    #[doc = " Resolve the key table name @a name and set @a ktid to a handle identifying"]
    #[doc = " the key table.  Use krb5_kt_close() to free @a ktid when it is no longer"]
    #[doc = " needed."]
    #[doc = ""]
    #[doc = " @a name must be of the form @c type:residual, where @a type must be a type"]
    #[doc = " known to the library and @a residual portion should be specific to the"]
    #[doc = " particular keytab type.  If no @a type is given, the default is @c FILE."]
    #[doc = ""]
    #[doc = " If @a name is of type @c FILE, the keytab file is not opened by this call."]
    #[doc = ""]
    #[doc = " @code"]
    #[doc = "  Example: krb5_kt_resolve(context, \"FILE:/tmp/filename\", &ktid);"]
    #[doc = " @endcode"]
    #[doc = ""]
    #[doc = " @retval"]
    #[doc = " 0  Success"]
    #[doc = " @return"]
    #[doc = " Kerberos error codes"]
    pub fn krb5_kt_resolve(
        context: krb5_context,
        name: *const ::std::os::raw::c_char,
        ktid: *mut krb5_keytab,
    ) -> krb5_error_code;
}
extern "C" {
    #[doc = " Duplicate keytab handle."]
    #[doc = ""]
    #[doc = " @param [in]  context         Library context"]
    #[doc = " @param [in]  in              Key table handle to be duplicated"]
    #[doc = " @param [out] out             Key table handle"]
    #[doc = ""]
    #[doc = " Create a new handle referring to the same key table as @a in.  The new"]
    #[doc = " handle and @a in can be closed independently."]
    #[doc = ""]
    #[doc = " @version New in 1.12"]
    pub fn krb5_kt_dup(
        context: krb5_context,
        in_: krb5_keytab,
        out: *mut krb5_keytab,
    ) -> krb5_error_code;
}
extern "C" {
    #[doc = " Get the default key table name."]
    #[doc = ""]
    #[doc = " @param [in]     context      Library context"]
    #[doc = " @param [out]    name         Default key table name"]
    #[doc = " @param [in]     name_size    Space available in @a name"]
    #[doc = ""]
    #[doc = " Fill @a name with the name of the default key table for @a context."]
    #[doc = ""]
    #[doc = " @sa MAX_KEYTAB_NAME_LEN"]
    #[doc = ""]
    #[doc = " @retval"]
    #[doc = " 0 Success"]
    #[doc = " @retval"]
    #[doc = " KRB5_CONFIG_NOTENUFSPACE Buffer is too short"]
    #[doc = " @return"]
    #[doc = " Kerberos error codes"]
    pub fn krb5_kt_default_name(
        context: krb5_context,
        name: *mut ::std::os::raw::c_char,
        name_size: ::std::os::raw::c_int,
    ) -> krb5_error_code;
}
extern "C" {
    #[doc = " Resolve the default key table."]
    #[doc = ""]
    #[doc = " @param [in]  context         Library context"]
    #[doc = " @param [out] id              Key table handle"]
    #[doc = ""]
    #[doc = " Set @a id to a handle to the default key table.  The key table is not"]
    #[doc = " opened."]
    #[doc = ""]
    #[doc = " @retval"]
    #[doc = " 0  Success"]
    #[doc = " @return"]
    #[doc = " Kerberos error codes"]
    pub fn krb5_kt_default(context: krb5_context, id: *mut krb5_keytab) -> krb5_error_code;
}
extern "C" {
    #[doc = " Resolve the default client key table."]
    #[doc = ""]
    #[doc = " @param [in]     context      Library context"]
    #[doc = " @param [out]    keytab_out   Key table handle"]
    #[doc = ""]
    #[doc = " Fill @a keytab_out with a handle to the default client key table."]
    #[doc = ""]
    #[doc = " @version New in 1.11"]
    #[doc = ""]
    #[doc = " @retval"]
    #[doc = " 0  Success"]
    #[doc = " @return"]
    #[doc = " Kerberos error codes"]
    pub fn krb5_kt_client_default(
        context: krb5_context,
        keytab_out: *mut krb5_keytab,
    ) -> krb5_error_code;
}
extern "C" {
    #[doc = " Free the contents of a key table entry."]
    #[doc = ""]
    #[doc = " @param [in] context          Library context"]
    #[doc = " @param [in] entry            Key table entry whose contents are to be freed"]
    #[doc = ""]
    #[doc = " @note The pointer is not freed."]
    #[doc = ""]
    #[doc = " @retval 0  Success; otherwise - Kerberos error codes"]
    pub fn krb5_free_keytab_entry_contents(
        context: krb5_context,
        entry: *mut krb5_keytab_entry,
    ) -> krb5_error_code;
}
extern "C" {
    #[doc = " @deprecated Use krb5_free_keytab_entry_contents instead."]
    pub fn krb5_kt_free_entry(
        context: krb5_context,
        entry: *mut krb5_keytab_entry,
    ) -> krb5_error_code;
}
extern "C" {
    #[doc = " Remove an entry from a key table."]
    #[doc = ""]
    #[doc = " @param [in] context          Library context"]
    #[doc = " @param [in] id               Key table handle"]
    #[doc = " @param [in] entry            Entry to remove from key table"]
    #[doc = ""]
    #[doc = " @retval"]
    #[doc = " 0 Success"]
    #[doc = " @retval"]
    #[doc = "  KRB5_KT_NOWRITE     Key table is not writable"]
    #[doc = " @return"]
    #[doc = " Kerberos error codes"]
    pub fn krb5_kt_remove_entry(
        context: krb5_context,
        id: krb5_keytab,
        entry: *mut krb5_keytab_entry,
    ) -> krb5_error_code;
}
extern "C" {
    #[doc = " Add a new entry to a key table."]
    #[doc = ""]
    #[doc = " @param [in] context          Library context"]
    #[doc = " @param [in] id               Key table handle"]
    #[doc = " @param [in] entry            Entry to be added"]
    #[doc = ""]
    #[doc = " @retval"]
    #[doc = " 0  Success"]
    #[doc = " @retval"]
    #[doc = "  ENOMEM    Insufficient memory"]
    #[doc = " @retval"]
    #[doc = "  KRB5_KT_NOWRITE  Key table is not writeable"]
    #[doc = " @return"]
    #[doc = " Kerberos error codes"]
    pub fn krb5_kt_add_entry(
        context: krb5_context,
        id: krb5_keytab,
        entry: *mut krb5_keytab_entry,
    ) -> krb5_error_code;
}
extern "C" {
    #[doc = " Convert a principal name into the default salt for that principal."]
    #[doc = ""]
    #[doc = " @param [in]  context         Library context"]
    #[doc = " @param [in]  pr              Principal name"]
    #[doc = " @param [out] ret             Default salt for @a pr to be filled in"]
    #[doc = ""]
    #[doc = " @retval 0 Success; otherwise - Kerberos error codes"]
    pub fn krb5_principal2salt(
        context: krb5_context,
        pr: krb5_const_principal,
        ret: *mut krb5_data,
    ) -> krb5_error_code;
}
extern "C" {
    #[doc = " Resolve a credential cache name."]
    #[doc = ""]
    #[doc = " @param [in]  context         Library context"]
    #[doc = " @param [in]  name            Credential cache name to be resolved"]
    #[doc = " @param [out] cache           Credential cache handle"]
    #[doc = ""]
    #[doc = " Fills in @a cache with a @a cache handle that corresponds to the name in @a"]
    #[doc = " name.  @a name should be of the form @c type:residual, and @a type must be a"]
    #[doc = " type known to the library.  If the @a name does not contain a colon,"]
    #[doc = " interpret it as a file name."]
    #[doc = ""]
    #[doc = " @code"]
    #[doc = " Example: krb5_cc_resolve(context, \"MEMORY:C_\", &cache);"]
    #[doc = " @endcode"]
    #[doc = ""]
    #[doc = " @retval"]
    #[doc = " 0  Success"]
    #[doc = " @return"]
    #[doc = " Kerberos error codes"]
    pub fn krb5_cc_resolve(
        context: krb5_context,
        name: *const ::std::os::raw::c_char,
        cache: *mut krb5_ccache,
    ) -> krb5_error_code;
}
extern "C" {
    #[doc = " Duplicate ccache handle."]
    #[doc = ""]
    #[doc = " @param [in]  context         Library context"]
    #[doc = " @param [in]  in              Credential cache handle to be duplicated"]
    #[doc = " @param [out] out             Credential cache handle"]
    #[doc = ""]
    #[doc = " Create a new handle referring to the same cache as @a in."]
    #[doc = " The new handle and @a in can be closed independently."]
    pub fn krb5_cc_dup(
        context: krb5_context,
        in_: krb5_ccache,
        out: *mut krb5_ccache,
    ) -> krb5_error_code;
}
extern "C" {
    #[doc = " Return the name of the default credential cache."]
    #[doc = ""]
    #[doc = " @param [in] context          Library context"]
    #[doc = ""]
    #[doc = " Return a pointer to the default credential cache name for @a context, as"]
    #[doc = " determined by a prior call to krb5_cc_set_default_name(), by the KRB5CCNAME"]
    #[doc = " environment variable, by the default_ccache_name profile variable, or by the"]
    #[doc = " operating system or build-time default value.  The returned value must not"]
    #[doc = " be modified or freed by the caller.  The returned value becomes invalid when"]
    #[doc = " @a context is destroyed krb5_free_context() or if a subsequent call to"]
    #[doc = " krb5_cc_set_default_name() is made on @a context."]
    #[doc = ""]
    #[doc = " The default credential cache name is cached in @a context between calls to"]
    #[doc = " this function, so if the value of KRB5CCNAME changes in the process"]
    #[doc = " environment after the first call to this function on, that change will not"]
    #[doc = " be reflected in later calls with the same context.  The caller can invoke"]
    #[doc = " krb5_cc_set_default_name() with a NULL value of @a name to clear the cached"]
    #[doc = " value and force the default name to be recomputed."]
    #[doc = ""]
    #[doc = " @return"]
    #[doc = " Name of default credential cache for the current user."]
    pub fn krb5_cc_default_name(context: krb5_context) -> *const ::std::os::raw::c_char;
}
extern "C" {
    #[doc = " Set the default credential cache name."]
    #[doc = ""]
    #[doc = " @param [in] context          Library context"]
    #[doc = " @param [in] name             Default credential cache name or NULL"]
    #[doc = ""]
    #[doc = " Set the default credential cache name to @a name for future operations using"]
    #[doc = " @a context.  If @a name is NULL, clear any previous application-set default"]
    #[doc = " name and forget any cached value of the default name for @a context."]
    #[doc = ""]
    #[doc = " Calls to this function invalidate the result of any previous calls to"]
    #[doc = " krb5_cc_default_name() using @a context."]
    #[doc = ""]
    #[doc = " @retval"]
    #[doc = "  0  Success"]
    #[doc = " @retval"]
    #[doc = "  KV5M_CONTEXT          Bad magic number for @c _krb5_context structure"]
    #[doc = " @return"]
    #[doc = " Kerberos error codes"]
    pub fn krb5_cc_set_default_name(
        context: krb5_context,
        name: *const ::std::os::raw::c_char,
    ) -> krb5_error_code;
}
extern "C" {
    #[doc = " Resolve the default credential cache name."]
    #[doc = ""]
    #[doc = " @param [in]  context         Library context"]
    #[doc = " @param [out] ccache          Pointer to credential cache name"]
    #[doc = ""]
    #[doc = " Create a handle to the default credential cache as given by"]
    #[doc = " krb5_cc_default_name()."]
    #[doc = ""]
    #[doc = " @retval"]
    #[doc = " 0  Success"]
    #[doc = " @retval"]
    #[doc = " KV5M_CONTEXT            Bad magic number for @c _krb5_context structure"]
    #[doc = " @retval"]
    #[doc = " KRB5_FCC_INTERNAL       The name of the default credential cache cannot be"]
    #[doc = "                         obtained"]
    #[doc = " @return"]
    #[doc = " Kerberos error codes"]
    pub fn krb5_cc_default(context: krb5_context, ccache: *mut krb5_ccache) -> krb5_error_code;
}
extern "C" {
    #[doc = " Copy a credential cache."]
    #[doc = ""]
    #[doc = " @param [in]  context         Library context"]
    #[doc = " @param [in]  incc            Credential cache to be copied"]
    #[doc = " @param [out] outcc           Copy of credential cache to be filled in"]
    #[doc = ""]
    #[doc = " @retval 0  Success; otherwise - Kerberos error codes"]
    pub fn krb5_cc_copy_creds(
        context: krb5_context,
        incc: krb5_ccache,
        outcc: krb5_ccache,
    ) -> krb5_error_code;
}
extern "C" {
    #[doc = " Get a configuration value from a credential cache."]
    #[doc = ""]
    #[doc = " @param [in]     context      Library context"]
    #[doc = " @param [in]     id           Credential cache handle"]
    #[doc = " @param [in]     principal    Configuration for this principal;"]
    #[doc = "                              if NULL, global for the whole cache"]
    #[doc = " @param [in]     key          Name of config variable"]
    #[doc = " @param [out]    data         Data to be fetched"]
    #[doc = ""]
    #[doc = " Use krb5_free_data_contents() to free @a data when it is no longer needed."]
    #[doc = ""]
    #[doc = " @retval"]
    #[doc = " 0  Success"]
    #[doc = " @return"]
    #[doc = " Kerberos error codes"]
    pub fn krb5_cc_get_config(
        context: krb5_context,
        id: krb5_ccache,
        principal: krb5_const_principal,
        key: *const ::std::os::raw::c_char,
        data: *mut krb5_data,
    ) -> krb5_error_code;
}
extern "C" {
    #[doc = " Store a configuration value in a credential cache."]
    #[doc = ""]
    #[doc = " @param [in]     context      Library context"]
    #[doc = " @param [in]     id           Credential cache handle"]
    #[doc = " @param [in]     principal    Configuration for a specific principal;"]
    #[doc = "                              if NULL, global for the whole cache"]
    #[doc = " @param [in]     key          Name of config variable"]
    #[doc = " @param [in]     data         Data to store, or NULL to remove"]
    #[doc = ""]
    #[doc = " @note Existing configuration under the same key is over-written."]
    #[doc = ""]
    #[doc = " @warning Before version 1.10 @a data was assumed to be always non-null."]
    #[doc = ""]
    #[doc = " @retval"]
    #[doc = " 0  Success"]
    #[doc = " @return"]
    #[doc = " Kerberos error codes"]
    pub fn krb5_cc_set_config(
        context: krb5_context,
        id: krb5_ccache,
        principal: krb5_const_principal,
        key: *const ::std::os::raw::c_char,
        data: *mut krb5_data,
    ) -> krb5_error_code;
}
extern "C" {
    #[doc = " Test whether a principal is a configuration principal."]
    #[doc = ""]
    #[doc = " @param [in] context          Library context"]
    #[doc = " @param [in] principal        Principal to check"]
    #[doc = ""]
    #[doc = " @return"]
    #[doc = " @c TRUE if the principal is a configuration principal (generated part of"]
    #[doc = " krb5_cc_set_config()); @c FALSE otherwise."]
    pub fn krb5_is_config_principal(
        context: krb5_context,
        principal: krb5_const_principal,
    ) -> krb5_boolean;
}
extern "C" {
    #[doc = " Make a credential cache the primary cache for its collection."]
    #[doc = ""]
    #[doc = " @param [in] context          Library context"]
    #[doc = " @param [in] cache            Credential cache handle"]
    #[doc = ""]
    #[doc = " If the type of @a cache supports it, set @a cache to be the primary"]
    #[doc = " credential cache for the collection it belongs to."]
    #[doc = ""]
    #[doc = " @retval"]
    #[doc = " 0  Success, or the type of @a cache doesn't support switching"]
    #[doc = " @return"]
    #[doc = " Kerberos error codes"]
    pub fn krb5_cc_switch(context: krb5_context, cache: krb5_ccache) -> krb5_error_code;
}
extern "C" {
    #[doc = " Determine whether a credential cache type supports switching."]
    #[doc = ""]
    #[doc = " @param [in] context          Library context"]
    #[doc = " @param [in] type             Credential cache type"]
    #[doc = ""]
    #[doc = " @version New in 1.10"]
    #[doc = ""]
    #[doc = " @retval TRUE if @a type supports switching"]
    #[doc = " @retval FALSE if it does not or is not a valid credential cache type."]
    pub fn krb5_cc_support_switch(
        context: krb5_context,
        type_: *const ::std::os::raw::c_char,
    ) -> krb5_boolean;
}
extern "C" {
    #[doc = " Find a credential cache with a specified client principal."]
    #[doc = ""]
    #[doc = " @param [in]  context         Library context"]
    #[doc = " @param [in]  client          Client principal"]
    #[doc = " @param [out] cache_out       Credential cache handle"]
    #[doc = ""]
    #[doc = " Find a cache within the collection whose default principal is @a client."]
    #[doc = " Use @a krb5_cc_close to close @a ccache when it is no longer needed."]
    #[doc = ""]
    #[doc = " @retval 0 Success"]
    #[doc = " @retval KRB5_CC_NOTFOUND"]
    #[doc = ""]
    #[doc = " @sa krb5_cccol_cursor_new"]
    #[doc = ""]
    #[doc = " @version New in 1.10"]
    pub fn krb5_cc_cache_match(
        context: krb5_context,
        client: krb5_principal,
        cache_out: *mut krb5_ccache,
    ) -> krb5_error_code;
}
extern "C" {
    #[doc = " Select a credential cache to use with a server principal."]
    #[doc = ""]
    #[doc = " @param [in]  context         Library context"]
    #[doc = " @param [in]  server          Server principal"]
    #[doc = " @param [out] cache_out       Credential cache handle"]
    #[doc = " @param [out] princ_out       Client principal"]
    #[doc = ""]
    #[doc = " Select a cache within the collection containing credentials most appropriate"]
    #[doc = " for use with @a server, according to configured rules and heuristics."]
    #[doc = ""]
    #[doc = " Use krb5_cc_close() to release @a cache_out when it is no longer needed."]
    #[doc = " Use krb5_free_principal() to release @a princ_out when it is no longer"]
    #[doc = " needed.  Note that @a princ_out is set in some error conditions."]
    #[doc = ""]
    #[doc = " @return"]
    #[doc = " If an appropriate cache is found, 0 is returned, @a cache_out is set to the"]
    #[doc = " selected cache, and @a princ_out is set to the default principal of that"]
    #[doc = " cache."]
    #[doc = ""]
    #[doc = " If the appropriate client principal can be authoritatively determined but"]
    #[doc = " the cache collection contains no credentials for that principal, then"]
    #[doc = " KRB5_CC_NOTFOUND is returned, @a cache_out is set to NULL, and @a princ_out"]
    #[doc = " is set to the appropriate client principal."]
    #[doc = ""]
    #[doc = " If no configured mechanism can determine the appropriate cache or principal,"]
    #[doc = " KRB5_CC_NOTFOUND is returned and @a cache_out and @a princ_out are set to"]
    #[doc = " NULL."]
    #[doc = ""]
    #[doc = " Any other error code indicates a fatal error in the processing of a cache"]
    #[doc = " selection mechanism."]
    #[doc = ""]
    #[doc = " @version New in 1.10"]
    pub fn krb5_cc_select(
        context: krb5_context,
        server: krb5_principal,
        cache_out: *mut krb5_ccache,
        princ_out: *mut krb5_principal,
    ) -> krb5_error_code;
}
extern "C" {
    #[doc = " Free the storage assigned to a principal."]
    #[doc = ""]
    #[doc = " @param [in] context          Library context"]
    #[doc = " @param [in] val              Principal to be freed"]
    pub fn krb5_free_principal(context: krb5_context, val: krb5_principal);
}
extern "C" {
    #[doc = " Free a krb5_authenticator structure."]
    #[doc = ""]
    #[doc = " @param [in] context          Library context"]
    #[doc = " @param [in] val              Authenticator structure to be freed"]
    #[doc = ""]
    #[doc = " This function frees the contents of @a val and the structure itself."]
    pub fn krb5_free_authenticator(context: krb5_context, val: *mut krb5_authenticator);
}
extern "C" {
    #[doc = " Free the data stored in array of addresses."]
    #[doc = ""]
    #[doc = " @param [in] context          Library context"]
    #[doc = " @param [in] val              Array of addresses to be freed"]
    #[doc = ""]
    #[doc = " This function frees the contents of @a val and the array itself."]
    #[doc = ""]
    #[doc = " @note The last entry in the array must be a NULL pointer."]
    pub fn krb5_free_addresses(context: krb5_context, val: *mut *mut krb5_address);
}
extern "C" {
    #[doc = " Free the storage assigned to array of authentication data."]
    #[doc = ""]
    #[doc = " @param [in] context          Library context"]
    #[doc = " @param [in] val              Array of authentication data to be freed"]
    #[doc = ""]
    #[doc = " This function frees the contents of @a val and the array itself."]
    #[doc = ""]
    #[doc = " @note The last entry in the array must be a NULL pointer."]
    pub fn krb5_free_authdata(context: krb5_context, val: *mut *mut krb5_authdata);
}
extern "C" {
    #[doc = " Free a ticket."]
    #[doc = ""]
    #[doc = " @param [in] context          Library context"]
    #[doc = " @param [in] val              Ticket to be freed"]
    #[doc = ""]
    #[doc = " This function frees the contents of @a val and the structure itself."]
    pub fn krb5_free_ticket(context: krb5_context, val: *mut krb5_ticket);
}
extern "C" {
    #[doc = " Free an error allocated by krb5_read_error() or krb5_sendauth()."]
    #[doc = ""]
    #[doc = " @param [in] context          Library context"]
    #[doc = " @param [in] val              Error data structure to be freed"]
    #[doc = ""]
    #[doc = " This function frees the contents of @a val and the structure itself."]
    pub fn krb5_free_error(context: krb5_context, val: *mut krb5_error);
}
extern "C" {
    #[doc = " Free a krb5_creds structure."]
    #[doc = ""]
    #[doc = " @param [in] context          Library context"]
    #[doc = " @param [in] val              Credential structure to be freed."]
    #[doc = ""]
    #[doc = " This function frees the contents of @a val and the structure itself."]
    pub fn krb5_free_creds(context: krb5_context, val: *mut krb5_creds);
}
extern "C" {
    #[doc = " Free the contents of a krb5_creds structure."]
    #[doc = ""]
    #[doc = " @param [in] context          Library context"]
    #[doc = " @param [in] val              Credential structure to free contents of"]
    #[doc = ""]
    #[doc = " This function frees the contents of @a val, but not the structure itself."]
    pub fn krb5_free_cred_contents(context: krb5_context, val: *mut krb5_creds);
}
extern "C" {
    #[doc = " Free a krb5_checksum structure."]
    #[doc = ""]
    #[doc = " @param [in] context          Library context"]
    #[doc = " @param [in] val              Checksum structure to be freed"]
    #[doc = ""]
    #[doc = " This function frees the contents of @a val and the structure itself."]
    pub fn krb5_free_checksum(context: krb5_context, val: *mut krb5_checksum);
}
extern "C" {
    #[doc = " Free the contents of a krb5_checksum structure."]
    #[doc = ""]
    #[doc = " @param [in] context          Library context"]
    #[doc = " @param [in] val              Checksum structure to free contents of"]
    #[doc = ""]
    #[doc = " This function frees the contents of @a val, but not the structure itself."]
    #[doc = " It sets the checksum's data pointer to null and (beginning in release 1.19)"]
    #[doc = " sets its length to zero."]
    pub fn krb5_free_checksum_contents(context: krb5_context, val: *mut krb5_checksum);
}
extern "C" {
    #[doc = " Free a krb5_keyblock structure."]
    #[doc = ""]
    #[doc = " @param [in] context          Library context"]
    #[doc = " @param [in] val              Keyblock to be freed"]
    #[doc = ""]
    #[doc = " This function frees the contents of @a val and the structure itself."]
    pub fn krb5_free_keyblock(context: krb5_context, val: *mut krb5_keyblock);
}
extern "C" {
    #[doc = " Free the contents of a krb5_keyblock structure."]
    #[doc = ""]
    #[doc = " @param [in] context          Library context"]
    #[doc = " @param [in] key              Keyblock to be freed"]
    #[doc = ""]
    #[doc = " This function frees the contents of @a key, but not the structure itself."]
    pub fn krb5_free_keyblock_contents(context: krb5_context, key: *mut krb5_keyblock);
}
extern "C" {
    #[doc = " Free a krb5_ap_rep_enc_part structure."]
    #[doc = ""]
    #[doc = " @param [in] context          Library context"]
    #[doc = " @param [in] val              AP-REP enc part to be freed"]
    #[doc = ""]
    #[doc = " This function frees the contents of @a val and the structure itself."]
    pub fn krb5_free_ap_rep_enc_part(context: krb5_context, val: *mut krb5_ap_rep_enc_part);
}
extern "C" {
    #[doc = " Free a krb5_data structure."]
    #[doc = ""]
    #[doc = " @param [in] context          Library context"]
    #[doc = " @param [in] val              Data structure to be freed"]
    #[doc = ""]
    #[doc = " This function frees the contents of @a val and the structure itself."]
    pub fn krb5_free_data(context: krb5_context, val: *mut krb5_data);
}
extern "C" {
    pub fn krb5_free_octet_data(context: krb5_context, val: *mut krb5_octet_data);
}
extern "C" {
    #[doc = " Free the contents of a krb5_data structure and zero the data field."]
    #[doc = ""]
    #[doc = " @param [in] context          Library context"]
    #[doc = " @param [in] val              Data structure to free contents of"]
    #[doc = ""]
    #[doc = " This function frees the contents of @a val, but not the structure itself."]
    #[doc = " It sets the structure's data pointer to null and (beginning in release 1.19)"]
    #[doc = " sets its length to zero."]
    pub fn krb5_free_data_contents(context: krb5_context, val: *mut krb5_data);
}
extern "C" {
    #[doc = " Free a string representation of a principal."]
    #[doc = ""]
    #[doc = " @param [in] context          Library context"]
    #[doc = " @param [in] val              Name string to be freed"]
    pub fn krb5_free_unparsed_name(context: krb5_context, val: *mut ::std::os::raw::c_char);
}
extern "C" {
    #[doc = " Free a string allocated by a krb5 function."]
    #[doc = ""]
    #[doc = " @param [in] context          Library context"]
    #[doc = " @param [in] val              String to be freed"]
    #[doc = ""]
    #[doc = " @version New in 1.10"]
    pub fn krb5_free_string(context: krb5_context, val: *mut ::std::os::raw::c_char);
}
extern "C" {
    #[doc = " Free an array of encryption types."]
    #[doc = ""]
    #[doc = " @param [in] context          Library context"]
    #[doc = " @param [in] val              Array of enctypes to be freed"]
    #[doc = ""]
    #[doc = " @version New in 1.12"]
    pub fn krb5_free_enctypes(context: krb5_context, val: *mut krb5_enctype);
}
extern "C" {
    #[doc = " Free an array of checksum types."]
    #[doc = ""]
    #[doc = " @param [in] context          Library context"]
    #[doc = " @param [in] val              Array of checksum types to be freed"]
    pub fn krb5_free_cksumtypes(context: krb5_context, val: *mut krb5_cksumtype);
}
extern "C" {
    #[doc = " Retrieve the system time of day, in sec and ms, since the epoch."]
    #[doc = ""]
    #[doc = " @param [in]  context         Library context"]
    #[doc = " @param [out] seconds         System timeofday, seconds portion"]
    #[doc = " @param [out] microseconds    System timeofday, microseconds portion"]
    #[doc = ""]
    #[doc = " This function retrieves the system time of day with the context"]
    #[doc = " specific time offset adjustment."]
    #[doc = ""]
    #[doc = " @sa krb5_crypto_us_timeofday()"]
    #[doc = ""]
    #[doc = " @retval"]
    #[doc = " 0  Success"]
    #[doc = " @return"]
    #[doc = " Kerberos error codes"]
    pub fn krb5_us_timeofday(
        context: krb5_context,
        seconds: *mut krb5_timestamp,
        microseconds: *mut krb5_int32,
    ) -> krb5_error_code;
}
extern "C" {
    #[doc = " Retrieve the current time with context specific time offset adjustment."]
    #[doc = ""]
    #[doc = " @param [in]  context         Library context"]
    #[doc = " @param [out] timeret         Timestamp to fill in"]
    #[doc = ""]
    #[doc = " This function retrieves the system time of day with the context specific"]
    #[doc = " time offset adjustment."]
    #[doc = ""]
    #[doc = " @retval"]
    #[doc = " 0  Success"]
    #[doc = " @return"]
    #[doc = " Kerberos error codes"]
    pub fn krb5_timeofday(context: krb5_context, timeret: *mut krb5_timestamp) -> krb5_error_code;
}
extern "C" {
    #[doc = " Check if a timestamp is within the allowed clock skew of the current time."]
    #[doc = ""]
    #[doc = " @param [in]     context      Library context"]
    #[doc = " @param [in]     date         Timestamp to check"]
    #[doc = ""]
    #[doc = " This function checks if @a date is close enough to the current time"]
    #[doc = " according to the configured allowable clock skew."]
    #[doc = ""]
    #[doc = " @version New in 1.10"]
    #[doc = ""]
    #[doc = " @retval 0 Success"]
    #[doc = " @retval KRB5KRB_AP_ERR_SKEW @a date is not within allowable clock skew"]
    pub fn krb5_check_clockskew(context: krb5_context, date: krb5_timestamp) -> krb5_error_code;
}
extern "C" {
    #[doc = " Return all interface addresses for this host."]
    #[doc = ""]
    #[doc = " @param [in]  context         Library context"]
    #[doc = " @param [out] addr            Array of krb5_address pointers, ending with"]
    #[doc = "                              NULL"]
    #[doc = ""]
    #[doc = " Use krb5_free_addresses() to free @a addr when it is no longer needed."]
    #[doc = ""]
    #[doc = " @retval 0 Success; otherwise - Kerberos error codes"]
    pub fn krb5_os_localaddr(
        context: krb5_context,
        addr: *mut *mut *mut krb5_address,
    ) -> krb5_error_code;
}
extern "C" {
    #[doc = " Retrieve the default realm."]
    #[doc = ""]
    #[doc = " @param [in]  context         Library context"]
    #[doc = " @param [out] lrealm          Default realm name"]
    #[doc = ""]
    #[doc = " Retrieves the default realm to be used if no user-specified realm is"]
    #[doc = " available."]
    #[doc = ""]
    #[doc = " Use krb5_free_default_realm() to free @a lrealm when it is no longer needed."]
    #[doc = ""]
    #[doc = " @retval"]
    #[doc = " 0  Success"]
    #[doc = " @return"]
    #[doc = " Kerberos error codes"]
    pub fn krb5_get_default_realm(
        context: krb5_context,
        lrealm: *mut *mut ::std::os::raw::c_char,
    ) -> krb5_error_code;
}
extern "C" {
    #[doc = " Override the default realm for the specified context."]
    #[doc = ""]
    #[doc = " @param [in]     context      Library context"]
    #[doc = " @param [in]     lrealm       Realm name for the default realm"]
    #[doc = ""]
    #[doc = " If @a lrealm is NULL, clear the default realm setting."]
    #[doc = ""]
    #[doc = " @retval"]
    #[doc = " 0  Success"]
    #[doc = " @return"]
    #[doc = " Kerberos error codes"]
    pub fn krb5_set_default_realm(
        context: krb5_context,
        lrealm: *const ::std::os::raw::c_char,
    ) -> krb5_error_code;
}
extern "C" {
    #[doc = " Free a default realm string returned by krb5_get_default_realm()."]
    #[doc = ""]
    #[doc = " @param [in] context          Library context"]
    #[doc = " @param [in] lrealm           Realm to be freed"]
    pub fn krb5_free_default_realm(context: krb5_context, lrealm: *mut ::std::os::raw::c_char);
}
extern "C" {
    #[doc = " Canonicalize a hostname, possibly using name service."]
    #[doc = ""]
    #[doc = " @param [in]  context         Library context"]
    #[doc = " @param [in]  host            Input hostname"]
    #[doc = " @param [out] canonhost_out   Canonicalized hostname"]
    #[doc = ""]
    #[doc = " This function canonicalizes orig_hostname, possibly using name service"]
    #[doc = " lookups if configuration permits.  Use krb5_free_string() to free @a"]
    #[doc = " canonhost_out when it is no longer needed."]
    #[doc = ""]
    #[doc = " @version New in 1.15"]
    pub fn krb5_expand_hostname(
        context: krb5_context,
        host: *const ::std::os::raw::c_char,
        canonhost_out: *mut *mut ::std::os::raw::c_char,
    ) -> krb5_error_code;
}
extern "C" {
    #[doc = " Generate a full principal name from a service name."]
    #[doc = ""]
    #[doc = " @param [in]  context         Library context"]
    #[doc = " @param [in]  hostname        Host name, or NULL to use local host"]
    #[doc = " @param [in]  sname           Service name, or NULL to use @c \"host\""]
    #[doc = " @param [in]  type            Principal type"]
    #[doc = " @param [out] ret_princ       Generated principal"]
    #[doc = ""]
    #[doc = " This function converts a @a hostname and @a sname into @a krb5_principal"]
    #[doc = " structure @a ret_princ.  The returned principal will be of the form @a"]
    #[doc = " sname\\/hostname\\@REALM where REALM is determined by krb5_get_host_realm()."]
    #[doc = " In some cases this may be the referral (empty) realm."]
    #[doc = ""]
    #[doc = " The @a type can be one of the following:"]
    #[doc = ""]
    #[doc = " @li #KRB5_NT_SRV_HST canonicalizes the host name before looking up the"]
    #[doc = " realm and generating the principal."]
    #[doc = ""]
    #[doc = " @li #KRB5_NT_UNKNOWN accepts the hostname as given, and does not"]
    #[doc = " canonicalize it."]
    #[doc = ""]
    #[doc = " Use krb5_free_principal to free @a ret_princ when it is no longer needed."]
    #[doc = ""]
    #[doc = " @retval"]
    #[doc = " 0  Success"]
    #[doc = " @return"]
    #[doc = " Kerberos error codes"]
    pub fn krb5_sname_to_principal(
        context: krb5_context,
        hostname: *const ::std::os::raw::c_char,
        sname: *const ::std::os::raw::c_char,
        type_: krb5_int32,
        ret_princ: *mut krb5_principal,
    ) -> krb5_error_code;
}
extern "C" {
    #[doc = " Test whether a principal matches a matching principal."]
    #[doc = ""]
    #[doc = " @param [in]  context         Library context"]
    #[doc = " @param [in]  matching        Matching principal"]
    #[doc = " @param [in]  princ           Principal to test"]
    #[doc = ""]
    #[doc = " @note A matching principal is a host-based principal with an empty realm"]
    #[doc = " and/or second data component (hostname).  Profile configuration may cause"]
    #[doc = " the hostname to be ignored even if it is present.  A principal matches a"]
    #[doc = " matching principal if the former has the same non-empty (and non-ignored)"]
    #[doc = " components of the latter."]
    #[doc = ""]
    #[doc = " If @a matching is NULL, return TRUE.  If @a matching is not a matching"]
    #[doc = " principal, return the value of krb5_principal_compare(context, matching,"]
    #[doc = " princ)."]
    #[doc = ""]
    #[doc = " @return"]
    #[doc = " TRUE if @a princ matches @a matching, FALSE otherwise."]
    pub fn krb5_sname_match(
        context: krb5_context,
        matching: krb5_const_principal,
        princ: krb5_const_principal,
    ) -> krb5_boolean;
}
extern "C" {
    #[doc = " Change a password for an existing Kerberos account."]
    #[doc = ""]
    #[doc = " @param [in]  context             Library context"]
    #[doc = " @param [in]  creds               Credentials for kadmin/changepw service"]
    #[doc = " @param [in]  newpw               New password"]
    #[doc = " @param [out] result_code         Numeric error code from server"]
    #[doc = " @param [out] result_code_string  String equivalent to @a result_code"]
    #[doc = " @param [out] result_string       Change password response from the KDC"]
    #[doc = ""]
    #[doc = " Change the password for the existing principal identified by @a creds."]
    #[doc = ""]
    #[doc = " The possible values of the output @a result_code are:"]
    #[doc = ""]
    #[doc = " @li #KRB5_KPASSWD_SUCCESS   (0) - success"]
    #[doc = " @li #KRB5_KPASSWD_MALFORMED (1) - Malformed request error"]
    #[doc = " @li #KRB5_KPASSWD_HARDERROR (2) - Server error"]
    #[doc = " @li #KRB5_KPASSWD_AUTHERROR (3) - Authentication error"]
    #[doc = " @li #KRB5_KPASSWD_SOFTERROR (4) - Password change rejected"]
    #[doc = ""]
    #[doc = " @retval 0 Success; otherwise - Kerberos error codes"]
    pub fn krb5_change_password(
        context: krb5_context,
        creds: *mut krb5_creds,
        newpw: *const ::std::os::raw::c_char,
        result_code: *mut ::std::os::raw::c_int,
        result_code_string: *mut krb5_data,
        result_string: *mut krb5_data,
    ) -> krb5_error_code;
}
extern "C" {
    #[doc = " Set a password for a principal using specified credentials."]
    #[doc = ""]
    #[doc = " @param [in]  context              Library context"]
    #[doc = " @param [in]  creds                Credentials for kadmin/changepw service"]
    #[doc = " @param [in]  newpw                New password"]
    #[doc = " @param [in]  change_password_for  Change the password for this principal"]
    #[doc = " @param [out] result_code          Numeric error code from server"]
    #[doc = " @param [out] result_code_string   String equivalent to @a result_code"]
    #[doc = " @param [out] result_string        Data returned from the remote system"]
    #[doc = ""]
    #[doc = " This function uses the credentials @a creds to set the password @a newpw for"]
    #[doc = " the principal @a change_password_for.  It implements the set password"]
    #[doc = " operation of RFC 3244, for interoperability with Microsoft Windows"]
    #[doc = " implementations."]
    #[doc = ""]
    #[doc = " @note If @a change_password_for is NULL, the change is performed on the"]
    #[doc = " current principal. If @a change_password_for is non-null, the change is"]
    #[doc = " performed on the principal name passed in @a change_password_for."]
    #[doc = ""]
    #[doc = " The error code and strings are returned in @a result_code,"]
    #[doc = " @a result_code_string and @a result_string."]
    #[doc = ""]
    #[doc = " @sa krb5_set_password_using_ccache()"]
    #[doc = ""]
    #[doc = " @retval"]
    #[doc = " 0  Success and result_code is set to #KRB5_KPASSWD_SUCCESS."]
    #[doc = " @return"]
    #[doc = " Kerberos error codes."]
    pub fn krb5_set_password(
        context: krb5_context,
        creds: *mut krb5_creds,
        newpw: *const ::std::os::raw::c_char,
        change_password_for: krb5_principal,
        result_code: *mut ::std::os::raw::c_int,
        result_code_string: *mut krb5_data,
        result_string: *mut krb5_data,
    ) -> krb5_error_code;
}
extern "C" {
    #[doc = " Set a password for a principal using cached credentials."]
    #[doc = ""]
    #[doc = " @param [in]  context              Library context"]
    #[doc = " @param [in]  ccache               Credential cache"]
    #[doc = " @param [in]  newpw                New password"]
    #[doc = " @param [in]  change_password_for  Change the password for this principal"]
    #[doc = " @param [out] result_code          Numeric error code from server"]
    #[doc = " @param [out] result_code_string   String equivalent to @a result_code"]
    #[doc = " @param [out] result_string        Data returned from the remote system"]
    #[doc = ""]
    #[doc = " This function uses the cached credentials from @a ccache to set the password"]
    #[doc = " @a newpw for the principal @a change_password_for.  It implements RFC 3244"]
    #[doc = " set password operation (interoperable with MS Windows implementations) using"]
    #[doc = " the credential cache."]
    #[doc = ""]
    #[doc = " The error code and strings are returned in @a result_code,"]
    #[doc = " @a result_code_string and @a result_string."]
    #[doc = ""]
    #[doc = " @note If @a change_password_for is set to NULL, the change is performed on"]
    #[doc = " the default principal in @a ccache. If @a change_password_for is non null,"]
    #[doc = " the change is performed on the specified principal."]
    #[doc = ""]
    #[doc = " @sa krb5_set_password()"]
    #[doc = ""]
    #[doc = " @retval"]
    #[doc = " 0  Success"]
    #[doc = " @return"]
    #[doc = " Kerberos error codes"]
    pub fn krb5_set_password_using_ccache(
        context: krb5_context,
        ccache: krb5_ccache,
        newpw: *const ::std::os::raw::c_char,
        change_password_for: krb5_principal,
        result_code: *mut ::std::os::raw::c_int,
        result_code_string: *mut krb5_data,
        result_string: *mut krb5_data,
    ) -> krb5_error_code;
}
extern "C" {
    #[doc = " Get a result message for changing or setting a password."]
    #[doc = ""]
    #[doc = " @param [in]  context            Library context"]
    #[doc = " @param [in]  server_string      Data returned from the remote system"]
    #[doc = " @param [out] message_out        A message displayable to the user"]
    #[doc = ""]
    #[doc = " This function processes the @a server_string returned in the @a"]
    #[doc = " result_string parameter of krb5_change_password(), krb5_set_password(), and"]
    #[doc = " related functions, and returns a displayable string.  If @a server_string"]
    #[doc = " contains Active Directory structured policy information, it will be"]
    #[doc = " converted into human-readable text."]
    #[doc = ""]
    #[doc = " Use krb5_free_string() to free @a message_out when it is no longer needed."]
    #[doc = ""]
    #[doc = " @retval"]
    #[doc = " 0 Success"]
    #[doc = " @return"]
    #[doc = " Kerberos error codes"]
    #[doc = ""]
    #[doc = " @version New in 1.11"]
    pub fn krb5_chpw_message(
        context: krb5_context,
        server_string: *const krb5_data,
        message_out: *mut *mut ::std::os::raw::c_char,
    ) -> krb5_error_code;
}
extern "C" {
    #[doc = " Retrieve configuration profile from the context."]
    #[doc = ""]
    #[doc = " @param [in]  context         Library context"]
    #[doc = " @param [out] profile         Pointer to data read from a configuration file"]
    #[doc = ""]
    #[doc = " This function creates a new @a profile object that reflects profile"]
    #[doc = " in the supplied @a context."]
    #[doc = ""]
    #[doc = " The @a profile object may be freed with profile_release() function."]
    #[doc = " See profile.h and profile API for more details."]
    #[doc = ""]
    #[doc = " @retval"]
    #[doc = " 0 Success"]
    #[doc = " @return"]
    #[doc = " Kerberos error codes"]
    pub fn krb5_get_profile(
        context: krb5_context,
        profile: *mut *mut _profile_t,
    ) -> krb5_error_code;
}
extern "C" {
    #[doc = " Parse and decrypt a @c KRB_AP_REQ message."]
    #[doc = ""]
    #[doc = " @param [in]     context        Library context"]
    #[doc = " @param [in,out] auth_context   Pre-existing or newly created auth context"]
    #[doc = " @param [in]     inbuf          AP-REQ message to be parsed"]
    #[doc = " @param [in]     server         Matching principal for server, or NULL to"]
    #[doc = "                                allow any principal in keytab"]
    #[doc = " @param [in]     keytab         Key table, or NULL to use the default"]
    #[doc = " @param [out]    ap_req_options If non-null, the AP-REQ flags on output"]
    #[doc = " @param [out]    ticket         If non-null, ticket from the AP-REQ message"]
    #[doc = ""]
    #[doc = " This function parses, decrypts and verifies a AP-REQ message from @a inbuf"]
    #[doc = " and stores the authenticator in @a auth_context."]
    #[doc = ""]
    #[doc = " If a keyblock was specified in @a auth_context using"]
    #[doc = " krb5_auth_con_setuseruserkey(), that key is used to decrypt the ticket in"]
    #[doc = " AP-REQ message and @a keytab is ignored.  In this case, @a server should be"]
    #[doc = " specified as a complete principal name to allow for proper transited-path"]
    #[doc = " checking and replay cache selection."]
    #[doc = ""]
    #[doc = " Otherwise, the decryption key is obtained from @a keytab, or from the"]
    #[doc = " default keytab if it is NULL.  In this case, @a server may be a complete"]
    #[doc = " principal name, a matching principal (see krb5_sname_match()), or NULL to"]
    #[doc = " match any principal name.  The keys tried against the encrypted part of the"]
    #[doc = " ticket are determined as follows:"]
    #[doc = ""]
    #[doc = " - If @a server is a complete principal name, then its entry in @a keytab is"]
    #[doc = "   tried."]
    #[doc = " - Otherwise, if @a keytab is iterable, then all entries in @a keytab which"]
    #[doc = "   match @a server are tried."]
    #[doc = " - Otherwise, the server principal in the ticket must match @a server, and"]
    #[doc = "   its entry in @a keytab is tried."]
    #[doc = ""]
    #[doc = " The client specified in the decrypted authenticator must match the client"]
    #[doc = " specified in the decrypted ticket."]
    #[doc = ""]
    #[doc = " If the @a remote_addr field of @a auth_context is set, the request must come"]
    #[doc = " from that address."]
    #[doc = ""]
    #[doc = " If a replay cache handle is provided in the @a auth_context, the"]
    #[doc = " authenticator and ticket are verified against it.  If no conflict is found,"]
    #[doc = " the new authenticator is then stored in the replay cache of @a auth_context."]
    #[doc = ""]
    #[doc = " Various other checks are performed on the decoded data, including"]
    #[doc = " cross-realm policy, clockskew, and ticket validation times."]
    #[doc = ""]
    #[doc = " On success the authenticator, subkey, and remote sequence number of the"]
    #[doc = " request are stored in @a auth_context. If the #AP_OPTS_MUTUAL_REQUIRED"]
    #[doc = " bit is set, the local sequence number is XORed with the remote sequence"]
    #[doc = " number in the request."]
    #[doc = ""]
    #[doc = " Use krb5_free_ticket() to free @a ticket when it is no longer needed."]
    #[doc = ""]
    #[doc = " @retval 0 Success; otherwise - Kerberos error codes"]
    pub fn krb5_rd_req(
        context: krb5_context,
        auth_context: *mut krb5_auth_context,
        inbuf: *const krb5_data,
        server: krb5_const_principal,
        keytab: krb5_keytab,
        ap_req_options: *mut krb5_flags,
        ticket: *mut *mut krb5_ticket,
    ) -> krb5_error_code;
}
extern "C" {
    #[doc = " Retrieve a service key from a key table."]
    #[doc = ""]
    #[doc = " @param [in]  context     Library context"]
    #[doc = " @param [in]  keyprocarg  Name of a key table (NULL to use default name)"]
    #[doc = " @param [in]  principal   Service principal"]
    #[doc = " @param [in]  vno         Key version number (0 for highest available)"]
    #[doc = " @param [in]  enctype     Encryption type (0 for any type)"]
    #[doc = " @param [out] key         Service key from key table"]
    #[doc = ""]
    #[doc = " Open and search the specified key table for the entry identified by @a"]
    #[doc = " principal, @a enctype, and @a vno. If no key is found, return an error code."]
    #[doc = ""]
    #[doc = " The default key table is used, unless @a keyprocarg is non-null."]
    #[doc = " @a keyprocarg designates a specific key table."]
    #[doc = ""]
    #[doc = " Use krb5_free_keyblock() to free @a key when it is no longer needed."]
    #[doc = ""]
    #[doc = " @retval"]
    #[doc = " 0 Success"]
    #[doc = " @return Kerberos error code if not found or @a keyprocarg is invalid."]
    pub fn krb5_kt_read_service_key(
        context: krb5_context,
        keyprocarg: krb5_pointer,
        principal: krb5_principal,
        vno: krb5_kvno,
        enctype: krb5_enctype,
        key: *mut *mut krb5_keyblock,
    ) -> krb5_error_code;
}
extern "C" {
    #[doc = " Format a @c KRB-SAFE message."]
    #[doc = ""]
    #[doc = " @param [in]  context         Library context"]
    #[doc = " @param [in]  auth_context    Authentication context"]
    #[doc = " @param [in]  userdata        User data in the message"]
    #[doc = " @param [out] der_out         Formatted @c KRB-SAFE buffer"]
    #[doc = " @param [out] rdata_out       Replay data. Specify NULL if not needed"]
    #[doc = ""]
    #[doc = " This function creates an integrity protected @c KRB-SAFE message"]
    #[doc = " using data supplied by the application."]
    #[doc = ""]
    #[doc = " Fields in @a auth_context specify the checksum type, the keyblock that"]
    #[doc = " can be used to seed the checksum, full addresses (host and port) for"]
    #[doc = " the sender and receiver, and @ref KRB5_AUTH_CONTEXT flags."]
    #[doc = ""]
    #[doc = " The local address in @a auth_context must be set, and is used to form the"]
    #[doc = " sender address used in the KRB-SAFE message.  The remote address is"]
    #[doc = " optional; if specified, it will be used to form the receiver address used in"]
    #[doc = " the message."]
    #[doc = ""]
    #[doc = " @note The @a rdata_out argument is required if the"]
    #[doc = " #KRB5_AUTH_CONTEXT_RET_TIME or #KRB5_AUTH_CONTEXT_RET_SEQUENCE flag is set"]
    #[doc = " in @a auth_context."]
    #[doc = ""]
    #[doc = " If the #KRB5_AUTH_CONTEXT_DO_TIME flag is set in @a auth_context, a"]
    #[doc = " timestamp is included in the KRB-SAFE message, and an entry for the message"]
    #[doc = " is entered in an in-memory replay cache to detect if the message is"]
    #[doc = " reflected by an attacker.  If #KRB5_AUTH_CONTEXT_DO_TIME is not set, no"]
    #[doc = " replay cache is used.  If #KRB5_AUTH_CONTEXT_RET_TIME is set in @a"]
    #[doc = " auth_context, a timestamp is included in the KRB-SAFE message and is stored"]
    #[doc = " in @a rdata_out."]
    #[doc = ""]
    #[doc = " If either #KRB5_AUTH_CONTEXT_DO_SEQUENCE or #KRB5_AUTH_CONTEXT_RET_SEQUENCE"]
    #[doc = " is set, the @a auth_context local sequence number is included in the"]
    #[doc = " KRB-SAFE message and then incremented.  If #KRB5_AUTH_CONTEXT_RET_SEQUENCE"]
    #[doc = " is set, the sequence number used is stored in @a rdata_out."]
    #[doc = ""]
    #[doc = " Use krb5_free_data_contents() to free @a der_out when it is no longer"]
    #[doc = " needed."]
    #[doc = ""]
    #[doc = " @retval 0 Success; otherwise - Kerberos error codes"]
    pub fn krb5_mk_safe(
        context: krb5_context,
        auth_context: krb5_auth_context,
        userdata: *const krb5_data,
        der_out: *mut krb5_data,
        rdata_out: *mut krb5_replay_data,
    ) -> krb5_error_code;
}
extern "C" {
    #[doc = " Format a @c KRB-PRIV message."]
    #[doc = ""]
    #[doc = " @param [in]  context         Library context"]
    #[doc = " @param [in]  auth_context    Authentication context"]
    #[doc = " @param [in]  userdata        User data for @c KRB-PRIV message"]
    #[doc = " @param [out] der_out         Formatted @c KRB-PRIV message"]
    #[doc = " @param [out] rdata_out       Replay data (NULL if not needed)"]
    #[doc = ""]
    #[doc = " This function is similar to krb5_mk_safe(), but the message is encrypted and"]
    #[doc = " integrity-protected, not just integrity-protected."]
    #[doc = ""]
    #[doc = " The local address in @a auth_context must be set, and is used to form the"]
    #[doc = " sender address used in the KRB-PRIV message.  The remote address is"]
    #[doc = " optional; if specified, it will be used to form the receiver address used in"]
    #[doc = " the message."]
    #[doc = ""]
    #[doc = " @note The @a rdata_out argument is required if the"]
    #[doc = " #KRB5_AUTH_CONTEXT_RET_TIME or #KRB5_AUTH_CONTEXT_RET_SEQUENCE flag is set"]
    #[doc = " in @a auth_context."]
    #[doc = ""]
    #[doc = " If the #KRB5_AUTH_CONTEXT_DO_TIME flag is set in @a auth_context, a"]
    #[doc = " timestamp is included in the KRB-PRIV message, and an entry for the message"]
    #[doc = " is entered in an in-memory replay cache to detect if the message is"]
    #[doc = " reflected by an attacker.  If #KRB5_AUTH_CONTEXT_DO_TIME is not set, no"]
    #[doc = " replay cache is used.  If #KRB5_AUTH_CONTEXT_RET_TIME is set in @a"]
    #[doc = " auth_context, a timestamp is included in the KRB-PRIV message and is stored"]
    #[doc = " in @a rdata_out."]
    #[doc = ""]
    #[doc = " If either #KRB5_AUTH_CONTEXT_DO_SEQUENCE or #KRB5_AUTH_CONTEXT_RET_SEQUENCE"]
    #[doc = " is set, the @a auth_context local sequence number is included in the"]
    #[doc = " KRB-PRIV message and then incremented.  If #KRB5_AUTH_CONTEXT_RET_SEQUENCE"]
    #[doc = " is set, the sequence number used is stored in @a rdata_out."]
    #[doc = ""]
    #[doc = " Use krb5_free_data_contents() to free @a der_out when it is no longer"]
    #[doc = " needed."]
    #[doc = ""]
    #[doc = " @retval 0 Success; otherwise - Kerberos error codes"]
    pub fn krb5_mk_priv(
        context: krb5_context,
        auth_context: krb5_auth_context,
        userdata: *const krb5_data,
        der_out: *mut krb5_data,
        rdata_out: *mut krb5_replay_data,
    ) -> krb5_error_code;
}
extern "C" {
    #[doc = " Client function for @c sendauth protocol."]
    #[doc = ""]
    #[doc = " @param [in]     context        Library context"]
    #[doc = " @param [in,out] auth_context   Pre-existing or newly created auth context"]
    #[doc = " @param [in]     fd             File descriptor that describes network socket"]
    #[doc = " @param [in]     appl_version   Application protocol version to be matched"]
    #[doc = "                                with the receiver's application version"]
    #[doc = " @param [in]     client         Client principal"]
    #[doc = " @param [in]     server         Server principal"]
    #[doc = " @param [in]     ap_req_options @ref AP_OPTS options"]
    #[doc = " @param [in]     in_data        Data to be sent to the server"]
    #[doc = " @param [in]     in_creds       Input credentials, or NULL to use @a ccache"]
    #[doc = " @param [in]     ccache         Credential cache"]
    #[doc = " @param [out]    error          If non-null, contains KRB_ERROR message"]
    #[doc = "                                returned from server"]
    #[doc = " @param [out]    rep_result     If non-null and @a ap_req_options is"]
    #[doc = "                                #AP_OPTS_MUTUAL_REQUIRED, contains the result"]
    #[doc = "                                of mutual authentication exchange"]
    #[doc = " @param [out]    out_creds      If non-null, the retrieved credentials"]
    #[doc = ""]
    #[doc = " This function performs the client side of a sendauth/recvauth exchange by"]
    #[doc = " sending and receiving messages over @a fd."]
    #[doc = ""]
    #[doc = " Credentials may be specified in three ways:"]
    #[doc = ""]
    #[doc = " @li If @a in_creds is NULL, credentials are obtained with"]
    #[doc = " krb5_get_credentials() using the principals @a client and @a server.  @a"]
    #[doc = " server must be non-null; @a client may NULL to use the default principal of"]
    #[doc = " @a ccache."]
    #[doc = ""]
    #[doc = " @li If @a in_creds is non-null, but does not contain a ticket, credentials"]
    #[doc = " for the exchange are obtained with krb5_get_credentials() using @a in_creds."]
    #[doc = " In this case, the values of @a client and @a server are unused."]
    #[doc = ""]
    #[doc = " @li If @a in_creds is a complete credentials structure, it used directly."]
    #[doc = " In this case, the values of @a client, @a server, and @a ccache are unused."]
    #[doc = ""]
    #[doc = " If the server is using a different application protocol than that specified"]
    #[doc = " in @a appl_version, an error will be returned."]
    #[doc = ""]
    #[doc = " Use krb5_free_creds() to free @a out_creds, krb5_free_ap_rep_enc_part() to"]
    #[doc = " free @a rep_result, and krb5_free_error() to free @a error when they are no"]
    #[doc = " longer needed."]
    #[doc = ""]
    #[doc = " @sa krb5_recvauth()"]
    #[doc = ""]
    #[doc = " @retval 0 Success; otherwise - Kerberos error codes"]
    pub fn krb5_sendauth(
        context: krb5_context,
        auth_context: *mut krb5_auth_context,
        fd: krb5_pointer,
        appl_version: *mut ::std::os::raw::c_char,
        client: krb5_principal,
        server: krb5_principal,
        ap_req_options: krb5_flags,
        in_data: *mut krb5_data,
        in_creds: *mut krb5_creds,
        ccache: krb5_ccache,
        error: *mut *mut krb5_error,
        rep_result: *mut *mut krb5_ap_rep_enc_part,
        out_creds: *mut *mut krb5_creds,
    ) -> krb5_error_code;
}
extern "C" {
    #[doc = " Server function for @a sendauth protocol."]
    #[doc = ""]
    #[doc = " @param [in]     context      Library context"]
    #[doc = " @param [in,out] auth_context Pre-existing or newly created auth context"]
    #[doc = " @param [in]     fd           File descriptor"]
    #[doc = " @param [in]     appl_version Application protocol version to be matched"]
    #[doc = "                              against the client's application version"]
    #[doc = " @param [in]     server       Server principal (NULL for any in @a keytab)"]
    #[doc = " @param [in]     flags        Additional specifications"]
    #[doc = " @param [in]     keytab       Key table containing service keys"]
    #[doc = " @param [out]    ticket       Ticket (NULL if not needed)"]
    #[doc = ""]
    #[doc = " This function performs the server side of a sendauth/recvauth exchange by"]
    #[doc = " sending and receiving messages over @a fd."]
    #[doc = ""]
    #[doc = " Use krb5_free_ticket() to free @a ticket when it is no longer needed."]
    #[doc = ""]
    #[doc = " @sa krb5_sendauth()"]
    #[doc = ""]
    #[doc = " @retval 0 Success; otherwise - Kerberos error codes"]
    pub fn krb5_recvauth(
        context: krb5_context,
        auth_context: *mut krb5_auth_context,
        fd: krb5_pointer,
        appl_version: *mut ::std::os::raw::c_char,
        server: krb5_principal,
        flags: krb5_int32,
        keytab: krb5_keytab,
        ticket: *mut *mut krb5_ticket,
    ) -> krb5_error_code;
}
extern "C" {
    #[doc = " Server function for @a sendauth protocol with version parameter."]
    #[doc = ""]
    #[doc = " @param [in]     context      Library context"]
    #[doc = " @param [in,out] auth_context Pre-existing or newly created auth context"]
    #[doc = " @param [in]     fd           File descriptor"]
    #[doc = " @param [in]     server       Server principal (NULL for any in @a keytab)"]
    #[doc = " @param [in]     flags        Additional specifications"]
    #[doc = " @param [in]     keytab       Decryption key"]
    #[doc = " @param [out]    ticket       Ticket (NULL if not needed)"]
    #[doc = " @param [out]    version      sendauth protocol version (NULL if not needed)"]
    #[doc = ""]
    #[doc = " This function is similar to krb5_recvauth() with the additional output"]
    #[doc = " information place into @a version."]
    #[doc = ""]
    #[doc = " @retval 0 Success; otherwise - Kerberos error codes"]
    pub fn krb5_recvauth_version(
        context: krb5_context,
        auth_context: *mut krb5_auth_context,
        fd: krb5_pointer,
        server: krb5_principal,
        flags: krb5_int32,
        keytab: krb5_keytab,
        ticket: *mut *mut krb5_ticket,
        version: *mut krb5_data,
    ) -> krb5_error_code;
}
extern "C" {
    #[doc = " Format a @c KRB-CRED message for an array of credentials."]
    #[doc = ""]
    #[doc = " @param [in]  context         Library context"]
    #[doc = " @param [in]  auth_context    Authentication context"]
    #[doc = " @param [in]  creds           Null-terminated array of credentials"]
    #[doc = " @param [out] der_out         Encoded credentials"]
    #[doc = " @param [out] rdata_out       Replay cache information (NULL if not needed)"]
    #[doc = ""]
    #[doc = " This function takes an array of credentials @a creds and formats"]
    #[doc = " a @c KRB-CRED message @a der_out to pass to krb5_rd_cred()."]
    #[doc = ""]
    #[doc = " The local and remote addresses in @a auth_context are optional; if either is"]
    #[doc = " specified, they are used to form the sender and receiver addresses in the"]
    #[doc = " KRB-CRED message."]
    #[doc = ""]
    #[doc = " @note The @a rdata_out argument is required if the"]
    #[doc = " #KRB5_AUTH_CONTEXT_RET_TIME or #KRB5_AUTH_CONTEXT_RET_SEQUENCE flag is set"]
    #[doc = " in @a auth_context."]
    #[doc = ""]
    #[doc = " If the #KRB5_AUTH_CONTEXT_DO_TIME flag is set in @a auth_context, an entry"]
    #[doc = " for the message is entered in an in-memory replay cache to detect if the"]
    #[doc = " message is reflected by an attacker.  If #KRB5_AUTH_CONTEXT_DO_TIME is not"]
    #[doc = " set, no replay cache is used.  If #KRB5_AUTH_CONTEXT_RET_TIME is set in @a"]
    #[doc = " auth_context, the timestamp used for the KRB-CRED message is stored in @a"]
    #[doc = " rdata_out."]
    #[doc = ""]
    #[doc = " If either #KRB5_AUTH_CONTEXT_DO_SEQUENCE or #KRB5_AUTH_CONTEXT_RET_SEQUENCE"]
    #[doc = " is set, the @a auth_context local sequence number is included in the"]
    #[doc = " KRB-CRED message and then incremented.  If #KRB5_AUTH_CONTEXT_RET_SEQUENCE"]
    #[doc = " is set, the sequence number used is stored in @a rdata_out."]
    #[doc = ""]
    #[doc = " Use krb5_free_data_contents() to free @a der_out when it is no longer"]
    #[doc = " needed."]
    #[doc = ""]
    #[doc = " The message will be encrypted using the send subkey of @a auth_context if it"]
    #[doc = " is present, or the session key otherwise.  If neither key is present, the"]
    #[doc = " credentials will not be encrypted, and the message should only be sent over"]
    #[doc = " a secure channel.  No replay cache entry is used in this case."]
    #[doc = ""]
    #[doc = " @retval"]
    #[doc = "  0 Success"]
    #[doc = " @retval"]
    #[doc = "  ENOMEM Insufficient memory"]
    #[doc = " @retval"]
    #[doc = "   KRB5_RC_REQUIRED Message replay detection requires @a rcache parameter"]
    #[doc = " @return"]
    #[doc = " Kerberos error codes"]
    pub fn krb5_mk_ncred(
        context: krb5_context,
        auth_context: krb5_auth_context,
        creds: *mut *mut krb5_creds,
        der_out: *mut *mut krb5_data,
        rdata_out: *mut krb5_replay_data,
    ) -> krb5_error_code;
}
extern "C" {
    #[doc = " Format a @c KRB-CRED message for a single set of credentials."]
    #[doc = ""]
    #[doc = " @param [in]  context         Library context"]
    #[doc = " @param [in]  auth_context    Authentication context"]
    #[doc = " @param [in]  creds           Pointer to credentials"]
    #[doc = " @param [out] der_out         Encoded credentials"]
    #[doc = " @param [out] rdata_out       Replay cache data (NULL if not needed)"]
    #[doc = ""]
    #[doc = " This is a convenience function that calls krb5_mk_ncred() with a single set"]
    #[doc = " of credentials."]
    #[doc = ""]
    #[doc = " @retval"]
    #[doc = " 0 Success"]
    #[doc = " @retval"]
    #[doc = "  ENOMEM Insufficient memory"]
    #[doc = " @retval"]
    #[doc = "  KRB5_RC_REQUIRED   Message replay detection requires @a rcache parameter"]
    #[doc = " @return"]
    #[doc = " Kerberos error codes"]
    pub fn krb5_mk_1cred(
        context: krb5_context,
        auth_context: krb5_auth_context,
        creds: *mut krb5_creds,
        der_out: *mut *mut krb5_data,
        rdata_out: *mut krb5_replay_data,
    ) -> krb5_error_code;
}
extern "C" {
    #[doc = " Read and validate a @c KRB-CRED message."]
    #[doc = ""]
    #[doc = " @param [in]  context         Library context"]
    #[doc = " @param [in]  auth_context    Authentication context"]
    #[doc = " @param [in]  creddata        @c KRB-CRED message"]
    #[doc = " @param [out] creds_out       Null-terminated array of forwarded credentials"]
    #[doc = " @param [out] rdata_out       Replay data (NULL if not needed)"]
    #[doc = ""]
    #[doc = " @note The @a rdata_out argument is required if the"]
    #[doc = " #KRB5_AUTH_CONTEXT_RET_TIME or #KRB5_AUTH_CONTEXT_RET_SEQUENCE flag is set"]
    #[doc = " in @a auth_context.`"]
    #[doc = ""]
    #[doc = " @a creddata will be decrypted using the receiving subkey if it is present in"]
    #[doc = " @a auth_context, or the session key if the receiving subkey is not present"]
    #[doc = " or fails to decrypt the message."]
    #[doc = ""]
    #[doc = " Use krb5_free_tgt_creds() to free @a creds_out when it is no longer needed."]
    #[doc = ""]
    #[doc = " @retval 0 Success; otherwise - Kerberos error codes"]
    pub fn krb5_rd_cred(
        context: krb5_context,
        auth_context: krb5_auth_context,
        creddata: *mut krb5_data,
        creds_out: *mut *mut *mut krb5_creds,
        rdata_out: *mut krb5_replay_data,
    ) -> krb5_error_code;
}
extern "C" {
    #[doc = " Get a forwarded TGT and format a @c KRB-CRED message."]
    #[doc = ""]
    #[doc = " @param [in] context          Library context"]
    #[doc = " @param [in] auth_context     Authentication context"]
    #[doc = " @param [in] rhost            Remote host"]
    #[doc = " @param [in] client           Client principal of TGT"]
    #[doc = " @param [in] server           Principal of server to receive TGT"]
    #[doc = " @param [in] cc               Credential cache handle (NULL to use default)"]
    #[doc = " @param [in] forwardable      Whether TGT should be forwardable"]
    #[doc = " @param [out] outbuf          KRB-CRED message"]
    #[doc = ""]
    #[doc = " Get a TGT for use at the remote host @a rhost and format it into a KRB-CRED"]
    #[doc = " message.  If @a rhost is NULL and @a server is of type #KRB5_NT_SRV_HST,"]
    #[doc = " the second component of @a server will be used."]
    #[doc = ""]
    #[doc = " @retval"]
    #[doc = "  0 Success"]
    #[doc = " @retval"]
    #[doc = "   ENOMEM Insufficient memory"]
    #[doc = " @retval"]
    #[doc = "   KRB5_PRINC_NOMATCH Requested principal and ticket do not match"]
    #[doc = " @retval"]
    #[doc = "   KRB5_NO_TKT_SUPPLIED Request did not supply a ticket"]
    #[doc = " @retval"]
    #[doc = "   KRB5_CC_BADNAME Credential cache name or principal name malformed"]
    #[doc = " @return"]
    #[doc = " Kerberos error codes"]
    pub fn krb5_fwd_tgt_creds(
        context: krb5_context,
        auth_context: krb5_auth_context,
        rhost: *const ::std::os::raw::c_char,
        client: krb5_principal,
        server: krb5_principal,
        cc: krb5_ccache,
        forwardable: ::std::os::raw::c_int,
        outbuf: *mut krb5_data,
    ) -> krb5_error_code;
}
extern "C" {
    #[doc = " Create and initialize an authentication context."]
    #[doc = ""]
    #[doc = " @param [in]  context         Library context"]
    #[doc = " @param [out] auth_context    Authentication context"]
    #[doc = ""]
    #[doc = " This function creates an authentication context to hold configuration and"]
    #[doc = " state relevant to krb5 functions for authenticating principals and"]
    #[doc = " protecting messages once authentication has occurred."]
    #[doc = ""]
    #[doc = " By default, flags for the context are set to enable the use of the replay"]
    #[doc = " cache (#KRB5_AUTH_CONTEXT_DO_TIME), but not sequence numbers.  Use"]
    #[doc = " krb5_auth_con_setflags() to change the flags."]
    #[doc = ""]
    #[doc = " The allocated @a auth_context must be freed with krb5_auth_con_free() when"]
    #[doc = " it is no longer needed."]
    #[doc = ""]
    #[doc = " @retval 0 Success; otherwise - Kerberos error codes"]
    pub fn krb5_auth_con_init(
        context: krb5_context,
        auth_context: *mut krb5_auth_context,
    ) -> krb5_error_code;
}
extern "C" {
    #[doc = " Free a krb5_auth_context structure."]
    #[doc = ""]
    #[doc = " @param [in] context          Library context"]
    #[doc = " @param [in] auth_context     Authentication context to be freed"]
    #[doc = ""]
    #[doc = " This function frees an auth context allocated by krb5_auth_con_init()."]
    #[doc = ""]
    #[doc = " @retval 0  (always)"]
    pub fn krb5_auth_con_free(
        context: krb5_context,
        auth_context: krb5_auth_context,
    ) -> krb5_error_code;
}
extern "C" {
    #[doc = " Set a flags field in a krb5_auth_context structure."]
    #[doc = ""]
    #[doc = " @param [in] context          Library context"]
    #[doc = " @param [in] auth_context     Authentication context"]
    #[doc = " @param [in] flags            Flags bit mask"]
    #[doc = ""]
    #[doc = " Valid values for @a flags are:"]
    #[doc = " @li #KRB5_AUTH_CONTEXT_DO_TIME Use timestamps"]
    #[doc = " @li #KRB5_AUTH_CONTEXT_RET_TIME Save timestamps"]
    #[doc = " @li #KRB5_AUTH_CONTEXT_DO_SEQUENCE Use sequence numbers"]
    #[doc = " @li #KRB5_AUTH_CONTEXT_RET_SEQUENCE Save sequence numbers"]
    #[doc = ""]
    #[doc = " @retval 0 (always)"]
    pub fn krb5_auth_con_setflags(
        context: krb5_context,
        auth_context: krb5_auth_context,
        flags: krb5_int32,
    ) -> krb5_error_code;
}
extern "C" {
    #[doc = " Retrieve flags from a krb5_auth_context structure."]
    #[doc = ""]
    #[doc = " @param [in]  context         Library context"]
    #[doc = " @param [in]  auth_context    Authentication context"]
    #[doc = " @param [out] flags           Flags bit mask"]
    #[doc = ""]
    #[doc = " Valid values for @a flags are:"]
    #[doc = " @li #KRB5_AUTH_CONTEXT_DO_TIME Use timestamps"]
    #[doc = " @li #KRB5_AUTH_CONTEXT_RET_TIME Save timestamps"]
    #[doc = " @li #KRB5_AUTH_CONTEXT_DO_SEQUENCE Use sequence numbers"]
    #[doc = " @li #KRB5_AUTH_CONTEXT_RET_SEQUENCE Save sequence numbers"]
    #[doc = ""]
    #[doc = " @retval 0 (always)"]
    pub fn krb5_auth_con_getflags(
        context: krb5_context,
        auth_context: krb5_auth_context,
        flags: *mut krb5_int32,
    ) -> krb5_error_code;
}
extern "C" {
    #[doc = " Set a checksum callback in an auth context."]
    #[doc = ""]
    #[doc = " @param [in] context          Library context"]
    #[doc = " @param [in] auth_context     Authentication context"]
    #[doc = " @param [in] func             Checksum callback"]
    #[doc = " @param [in] data             Callback argument"]
    #[doc = ""]
    #[doc = " Set a callback to obtain checksum data in krb5_mk_req().  The callback will"]
    #[doc = " be invoked after the subkey and local sequence number are stored in @a"]
    #[doc = " auth_context."]
    #[doc = ""]
    #[doc = " @retval 0 (always)"]
    pub fn krb5_auth_con_set_checksum_func(
        context: krb5_context,
        auth_context: krb5_auth_context,
        func: krb5_mk_req_checksum_func,
        data: *mut ::std::os::raw::c_void,
    ) -> krb5_error_code;
}
extern "C" {
    #[doc = " Get the checksum callback from an auth context."]
    #[doc = ""]
    #[doc = " @param [in]  context         Library context"]
    #[doc = " @param [in]  auth_context    Authentication context"]
    #[doc = " @param [out] func            Checksum callback"]
    #[doc = " @param [out] data            Callback argument"]
    #[doc = ""]
    #[doc = " @retval 0 (always)"]
    pub fn krb5_auth_con_get_checksum_func(
        context: krb5_context,
        auth_context: krb5_auth_context,
        func: *mut krb5_mk_req_checksum_func,
        data: *mut *mut ::std::os::raw::c_void,
    ) -> krb5_error_code;
}
extern "C" {
    #[doc = " Set the local and remote addresses in an auth context."]
    #[doc = ""]
    #[doc = " @param [in] context          Library context"]
    #[doc = " @param [in] auth_context     Authentication context"]
    #[doc = " @param [in] local_addr       Local address"]
    #[doc = " @param [in] remote_addr      Remote address"]
    #[doc = ""]
    #[doc = " This function releases the storage assigned to the contents of the local and"]
    #[doc = " remote addresses of @a auth_context and then sets them to @a local_addr and"]
    #[doc = " @a remote_addr respectively."]
    #[doc = ""]
    #[doc = " @sa krb5_auth_con_genaddrs()"]
    #[doc = ""]
    #[doc = " @retval 0 Success; otherwise - Kerberos error codes"]
    pub fn krb5_auth_con_setaddrs(
        context: krb5_context,
        auth_context: krb5_auth_context,
        local_addr: *mut krb5_address,
        remote_addr: *mut krb5_address,
    ) -> krb5_error_code;
}
extern "C" {
    #[doc = " Retrieve address fields from an auth context."]
    #[doc = ""]
    #[doc = " @param [in]  context         Library context"]
    #[doc = " @param [in]  auth_context    Authentication context"]
    #[doc = " @param [out] local_addr      Local address (NULL if not needed)"]
    #[doc = " @param [out] remote_addr     Remote address (NULL if not needed)"]
    #[doc = ""]
    #[doc = " @retval 0 Success; otherwise - Kerberos error codes"]
    pub fn krb5_auth_con_getaddrs(
        context: krb5_context,
        auth_context: krb5_auth_context,
        local_addr: *mut *mut krb5_address,
        remote_addr: *mut *mut krb5_address,
    ) -> krb5_error_code;
}
extern "C" {
    #[doc = " Set local and remote port fields in an auth context."]
    #[doc = ""]
    #[doc = " @param [in] context          Library context"]
    #[doc = " @param [in] auth_context     Authentication context"]
    #[doc = " @param [in] local_port       Local port"]
    #[doc = " @param [in] remote_port      Remote port"]
    #[doc = ""]
    #[doc = " This function releases the storage assigned to the contents of the local and"]
    #[doc = " remote ports of @a auth_context and then sets them to @a local_port and @a"]
    #[doc = " remote_port respectively."]
    #[doc = ""]
    #[doc = " @sa krb5_auth_con_genaddrs()"]
    #[doc = ""]
    #[doc = " @retval 0 Success; otherwise - Kerberos error codes"]
    pub fn krb5_auth_con_setports(
        context: krb5_context,
        auth_context: krb5_auth_context,
        local_port: *mut krb5_address,
        remote_port: *mut krb5_address,
    ) -> krb5_error_code;
}
extern "C" {
    #[doc = " Set the session key in an auth context."]
    #[doc = ""]
    #[doc = " @param [in] context          Library context"]
    #[doc = " @param [in] auth_context     Authentication context"]
    #[doc = " @param [in] keyblock         User key"]
    #[doc = ""]
    #[doc = " @retval 0 Success; otherwise - Kerberos error codes"]
    pub fn krb5_auth_con_setuseruserkey(
        context: krb5_context,
        auth_context: krb5_auth_context,
        keyblock: *mut krb5_keyblock,
    ) -> krb5_error_code;
}
extern "C" {
    #[doc = " Retrieve the session key from an auth context as a keyblock."]
    #[doc = ""]
    #[doc = " @param [in]  context         Library context"]
    #[doc = " @param [in]  auth_context    Authentication context"]
    #[doc = " @param [out] keyblock        Session key"]
    #[doc = ""]
    #[doc = " This function creates a keyblock containing the session key from @a"]
    #[doc = " auth_context.  Use krb5_free_keyblock() to free @a keyblock when it is no"]
    #[doc = " longer needed"]
    #[doc = ""]
    #[doc = " @retval 0 Success. Otherwise - Kerberos error codes"]
    pub fn krb5_auth_con_getkey(
        context: krb5_context,
        auth_context: krb5_auth_context,
        keyblock: *mut *mut krb5_keyblock,
    ) -> krb5_error_code;
}
extern "C" {
    #[doc = " Retrieve the session key from an auth context."]
    #[doc = ""]
    #[doc = " @param [in]  context         Library context"]
    #[doc = " @param [in]  auth_context    Authentication context"]
    #[doc = " @param [out] key             Session key"]
    #[doc = ""]
    #[doc = " This function sets @a key to the session key from @a auth_context.  Use"]
    #[doc = " krb5_k_free_key() to release @a key when it is no longer needed."]
    #[doc = ""]
    #[doc = " @retval 0 (always)"]
    pub fn krb5_auth_con_getkey_k(
        context: krb5_context,
        auth_context: krb5_auth_context,
        key: *mut krb5_key,
    ) -> krb5_error_code;
}
extern "C" {
    #[doc = " Retrieve the send subkey from an auth context as a keyblock."]
    #[doc = ""]
    #[doc = " @param [in]  ctx             Library context"]
    #[doc = " @param [in]  ac              Authentication context"]
    #[doc = " @param [out] keyblock        Send subkey"]
    #[doc = ""]
    #[doc = " This function creates a keyblock containing the send subkey from @a"]
    #[doc = " auth_context.  Use krb5_free_keyblock() to free @a keyblock when it is no"]
    #[doc = " longer needed."]
    #[doc = ""]
    #[doc = " @retval 0 Success; otherwise - Kerberos error codes"]
    pub fn krb5_auth_con_getsendsubkey(
        ctx: krb5_context,
        ac: krb5_auth_context,
        keyblock: *mut *mut krb5_keyblock,
    ) -> krb5_error_code;
}
extern "C" {
    #[doc = " Retrieve the send subkey from an auth context."]
    #[doc = ""]
    #[doc = " @param [in]  ctx             Library context"]
    #[doc = " @param [in]  ac              Authentication context"]
    #[doc = " @param [out] key             Send subkey"]
    #[doc = ""]
    #[doc = " This function sets @a key to the send subkey from @a auth_context.  Use"]
    #[doc = " krb5_k_free_key() to release @a key when it is no longer needed."]
    #[doc = ""]
    #[doc = " @retval 0 Success; otherwise - Kerberos error codes"]
    pub fn krb5_auth_con_getsendsubkey_k(
        ctx: krb5_context,
        ac: krb5_auth_context,
        key: *mut krb5_key,
    ) -> krb5_error_code;
}
extern "C" {
    #[doc = " Retrieve the receiving subkey from an auth context as a keyblock."]
    #[doc = ""]
    #[doc = " @param [in]  ctx             Library context"]
    #[doc = " @param [in]  ac              Authentication context"]
    #[doc = " @param [out] keyblock        Receiving subkey"]
    #[doc = ""]
    #[doc = " This function creates a keyblock containing the receiving subkey from @a"]
    #[doc = " auth_context.  Use krb5_free_keyblock() to free @a keyblock when it is no"]
    #[doc = " longer needed."]
    #[doc = ""]
    #[doc = " @retval 0 Success; otherwise - Kerberos error codes"]
    pub fn krb5_auth_con_getrecvsubkey(
        ctx: krb5_context,
        ac: krb5_auth_context,
        keyblock: *mut *mut krb5_keyblock,
    ) -> krb5_error_code;
}
extern "C" {
    #[doc = " Retrieve the receiving subkey from an auth context as a keyblock."]
    #[doc = ""]
    #[doc = " @param [in]  ctx             Library context"]
    #[doc = " @param [in]  ac              Authentication context"]
    #[doc = " @param [out] key             Receiving subkey"]
    #[doc = ""]
    #[doc = " This function sets @a key to the receiving subkey from @a auth_context.  Use"]
    #[doc = " krb5_k_free_key() to release @a key when it is no longer needed."]
    #[doc = ""]
    #[doc = " @retval 0 Success; otherwise - Kerberos error codes"]
    pub fn krb5_auth_con_getrecvsubkey_k(
        ctx: krb5_context,
        ac: krb5_auth_context,
        key: *mut krb5_key,
    ) -> krb5_error_code;
}
extern "C" {
    #[doc = " Set the send subkey in an auth context with a keyblock."]
    #[doc = ""]
    #[doc = " @param [in] ctx              Library context"]
    #[doc = " @param [in] ac               Authentication context"]
    #[doc = " @param [in] keyblock         Send subkey"]
    #[doc = ""]
    #[doc = " This function sets the send subkey in @a ac to a copy of @a keyblock."]
    #[doc = ""]
    #[doc = " @retval 0 Success. Otherwise - Kerberos error codes"]
    pub fn krb5_auth_con_setsendsubkey(
        ctx: krb5_context,
        ac: krb5_auth_context,
        keyblock: *mut krb5_keyblock,
    ) -> krb5_error_code;
}
extern "C" {
    #[doc = " Set the send subkey in an auth context."]
    #[doc = ""]
    #[doc = " @param [in]  ctx             Library context"]
    #[doc = " @param [in]  ac              Authentication context"]
    #[doc = " @param [out] key             Send subkey"]
    #[doc = ""]
    #[doc = " This function sets the send subkey in @a ac to @a key, incrementing its"]
    #[doc = " reference count."]
    #[doc = ""]
    #[doc = " @version New in 1.9"]
    #[doc = ""]
    #[doc = " @retval 0 Success; otherwise - Kerberos error codes"]
    pub fn krb5_auth_con_setsendsubkey_k(
        ctx: krb5_context,
        ac: krb5_auth_context,
        key: krb5_key,
    ) -> krb5_error_code;
}
extern "C" {
    #[doc = " Set the receiving subkey in an auth context with a keyblock."]
    #[doc = ""]
    #[doc = " @param [in] ctx              Library context"]
    #[doc = " @param [in] ac               Authentication context"]
    #[doc = " @param [in] keyblock         Receiving subkey"]
    #[doc = ""]
    #[doc = " This function sets the receiving subkey in @a ac to a copy of @a keyblock."]
    #[doc = ""]
    #[doc = " @retval 0 Success; otherwise - Kerberos error codes"]
    pub fn krb5_auth_con_setrecvsubkey(
        ctx: krb5_context,
        ac: krb5_auth_context,
        keyblock: *mut krb5_keyblock,
    ) -> krb5_error_code;
}
extern "C" {
    #[doc = " Set the receiving subkey in an auth context."]
    #[doc = ""]
    #[doc = " @param [in] ctx              Library context"]
    #[doc = " @param [in] ac               Authentication context"]
    #[doc = " @param [in] key              Receiving subkey"]
    #[doc = ""]
    #[doc = " This function sets the receiving subkey in @a ac to @a key, incrementing its"]
    #[doc = " reference count."]
    #[doc = ""]
    #[doc = " @version New in 1.9"]
    #[doc = ""]
    #[doc = " @retval 0 Success; otherwise - Kerberos error codes"]
    pub fn krb5_auth_con_setrecvsubkey_k(
        ctx: krb5_context,
        ac: krb5_auth_context,
        key: krb5_key,
    ) -> krb5_error_code;
}
extern "C" {
    #[doc = " Retrieve the local sequence number from an auth context."]
    #[doc = ""]
    #[doc = " @param [in]  context         Library context"]
    #[doc = " @param [in]  auth_context    Authentication context"]
    #[doc = " @param [out] seqnumber       Local sequence number"]
    #[doc = ""]
    #[doc = " Retrieve the local sequence number from @a auth_context and return it in @a"]
    #[doc = " seqnumber.  The #KRB5_AUTH_CONTEXT_DO_SEQUENCE flag must be set in @a"]
    #[doc = " auth_context for this function to be useful."]
    #[doc = ""]
    #[doc = " @retval 0 Success; otherwise - Kerberos error codes"]
    pub fn krb5_auth_con_getlocalseqnumber(
        context: krb5_context,
        auth_context: krb5_auth_context,
        seqnumber: *mut krb5_int32,
    ) -> krb5_error_code;
}
extern "C" {
    #[doc = " Retrieve the remote sequence number from an auth context."]
    #[doc = ""]
    #[doc = " @param [in]  context         Library context"]
    #[doc = " @param [in]  auth_context    Authentication context"]
    #[doc = " @param [out] seqnumber       Remote sequence number"]
    #[doc = ""]
    #[doc = " Retrieve the remote sequence number from @a auth_context and return it in @a"]
    #[doc = " seqnumber.  The #KRB5_AUTH_CONTEXT_DO_SEQUENCE flag must be set in @a"]
    #[doc = " auth_context for this function to be useful."]
    #[doc = ""]
    #[doc = " @retval 0 Success; otherwise - Kerberos error codes"]
    pub fn krb5_auth_con_getremoteseqnumber(
        context: krb5_context,
        auth_context: krb5_auth_context,
        seqnumber: *mut krb5_int32,
    ) -> krb5_error_code;
}
extern "C" {
    #[doc = " Cause an auth context to use cipher state."]
    #[doc = ""]
    #[doc = " @param [in]  context         Library context"]
    #[doc = " @param [in]  auth_context    Authentication context"]
    #[doc = ""]
    #[doc = " Prepare @a auth_context to use cipher state when krb5_mk_priv() or"]
    #[doc = " krb5_rd_priv() encrypt or decrypt data."]
    #[doc = ""]
    #[doc = " @retval 0 Success; otherwise - Kerberos error codes"]
    pub fn krb5_auth_con_initivector(
        context: krb5_context,
        auth_context: krb5_auth_context,
    ) -> krb5_error_code;
}
extern "C" {
    #[doc = " Set the replay cache in an auth context."]
    #[doc = ""]
    #[doc = " @param [in] context          Library context"]
    #[doc = " @param [in] auth_context     Authentication context"]
    #[doc = " @param [in] rcache           Replay cache haddle"]
    #[doc = ""]
    #[doc = " This function sets the replay cache in @a auth_context to @a rcache.  @a"]
    #[doc = " rcache will be closed when @a auth_context is freed, so the caller should"]
    #[doc = " relinquish that responsibility."]
    #[doc = ""]
    #[doc = " @retval 0 Success; otherwise - Kerberos error codes"]
    pub fn krb5_auth_con_setrcache(
        context: krb5_context,
        auth_context: krb5_auth_context,
        rcache: krb5_rcache,
    ) -> krb5_error_code;
}
extern "C" {
    #[doc = " Retrieve the replay cache from an auth context."]
    #[doc = ""]
    #[doc = " @param [in]  context         Library context"]
    #[doc = " @param [in]  auth_context    Authentication context"]
    #[doc = " @param [out] rcache          Replay cache handle"]
    #[doc = ""]
    #[doc = " This function fetches the replay cache from @a auth_context.  The caller"]
    #[doc = " should not close @a rcache."]
    #[doc = ""]
    #[doc = " @retval 0 (always)"]
    pub fn krb5_auth_con_getrcache(
        context: krb5_context,
        auth_context: krb5_auth_context,
        rcache: *mut krb5_rcache,
    ) -> krb5_error_code;
}
extern "C" {
    #[doc = " Retrieve the authenticator from an auth context."]
    #[doc = ""]
    #[doc = " @param [in]  context         Library context"]
    #[doc = " @param [in]  auth_context    Authentication context"]
    #[doc = " @param [out] authenticator   Authenticator"]
    #[doc = ""]
    #[doc = " Use krb5_free_authenticator() to free @a authenticator when it is no longer"]
    #[doc = " needed."]
    #[doc = ""]
    #[doc = " @retval 0 Success. Otherwise - Kerberos error codes"]
    pub fn krb5_auth_con_getauthenticator(
        context: krb5_context,
        auth_context: krb5_auth_context,
        authenticator: *mut *mut krb5_authenticator,
    ) -> krb5_error_code;
}
extern "C" {
    #[doc = " Set checksum type in an an auth context."]
    #[doc = ""]
    #[doc = " @param [in] context          Library context"]
    #[doc = " @param [in] auth_context     Authentication context"]
    #[doc = " @param [in] cksumtype        Checksum type"]
    #[doc = ""]
    #[doc = " This function sets the checksum type in @a auth_context to be used by"]
    #[doc = " krb5_mk_req() for the authenticator checksum."]
    #[doc = ""]
    #[doc = " @retval 0 Success. Otherwise - Kerberos error codes"]
    pub fn krb5_auth_con_set_req_cksumtype(
        context: krb5_context,
        auth_context: krb5_auth_context,
        cksumtype: krb5_cksumtype,
    ) -> krb5_error_code;
}
extern "C" {
    #[doc = " @brief Read a password from keyboard input."]
    #[doc = ""]
    #[doc = " @param [in]     context      Library context"]
    #[doc = " @param [in]     prompt       First user prompt when reading password"]
    #[doc = " @param [in]     prompt2      Second user prompt (NULL to prompt only once)"]
    #[doc = " @param [out]    return_pwd   Returned password"]
    #[doc = " @param [in,out] size_return  On input, maximum size of password; on output,"]
    #[doc = "                              size of password read"]
    #[doc = ""]
    #[doc = " This function reads a password from keyboard input and stores it in @a"]
    #[doc = " return_pwd.  @a size_return should be set by the caller to the amount of"]
    #[doc = " storage space available in @a return_pwd; on successful return, it will be"]
    #[doc = " set to the length of the password read."]
    #[doc = ""]
    #[doc = " @a prompt is printed to the terminal, followed by \": \", and then a password"]
    #[doc = " is read from the keyboard."]
    #[doc = ""]
    #[doc = " If @a prompt2 is NULL, the password is read only once.  Otherwise, @a"]
    #[doc = " prompt2 is printed to the terminal and a second password is read.  If the"]
    #[doc = " two passwords entered are not identical, KRB5_LIBOS_BADPWDMATCH is returned."]
    #[doc = ""]
    #[doc = " Echoing is turned off when the password is read."]
    #[doc = ""]
    #[doc = " @retval"]
    #[doc = "  0   Success"]
    #[doc = " @return"]
    #[doc = " Error in reading or verifying the password"]
    #[doc = " @return"]
    #[doc = " Kerberos error codes"]
    pub fn krb5_read_password(
        context: krb5_context,
        prompt: *const ::std::os::raw::c_char,
        prompt2: *const ::std::os::raw::c_char,
        return_pwd: *mut ::std::os::raw::c_char,
        size_return: *mut ::std::os::raw::c_uint,
    ) -> krb5_error_code;
}
extern "C" {
    #[doc = " Convert a principal name to a local name."]
    #[doc = ""]
    #[doc = " @param [in]  context         Library context"]
    #[doc = " @param [in]  aname           Principal name"]
    #[doc = " @param [in]  lnsize_in       Space available in @a lname"]
    #[doc = " @param [out] lname           Local name buffer to be filled in"]
    #[doc = ""]
    #[doc = " If @a aname does not correspond to any local account, KRB5_LNAME_NOTRANS is"]
    #[doc = " returned.  If @a lnsize_in is too small for the local name,"]
    #[doc = " KRB5_CONFIG_NOTENUFSPACE is returned."]
    #[doc = ""]
    #[doc = " Local names, rather than principal names, can be used by programs that"]
    #[doc = " translate to an environment-specific name (for example, a user account"]
    #[doc = " name)."]
    #[doc = ""]
    #[doc = " @retval"]
    #[doc = " 0  Success"]
    #[doc = " @retval"]
    #[doc = "  System errors"]
    #[doc = " @return"]
    #[doc = " Kerberos error codes"]
    pub fn krb5_aname_to_localname(
        context: krb5_context,
        aname: krb5_const_principal,
        lnsize_in: ::std::os::raw::c_int,
        lname: *mut ::std::os::raw::c_char,
    ) -> krb5_error_code;
}
extern "C" {
    #[doc = " Get the Kerberos realm names for a host."]
    #[doc = ""]
    #[doc = " @param [in]  context         Library context"]
    #[doc = " @param [in]  host            Host name (or NULL)"]
    #[doc = " @param [out] realmsp         Null-terminated list of realm names"]
    #[doc = ""]
    #[doc = " Fill in @a realmsp with a pointer to a null-terminated list of realm names."]
    #[doc = " If there are no known realms for the host, a list containing the referral"]
    #[doc = " (empty) realm is returned."]
    #[doc = ""]
    #[doc = " If @a host is NULL, the local host's realms are determined."]
    #[doc = ""]
    #[doc = " Use krb5_free_host_realm() to release @a realmsp when it is no longer"]
    #[doc = " needed."]
    #[doc = ""]
    #[doc = " @retval"]
    #[doc = "  0   Success"]
    #[doc = " @retval"]
    #[doc = "  ENOMEM  Insufficient memory"]
    #[doc = " @return"]
    #[doc = " Kerberos error codes"]
    pub fn krb5_get_host_realm(
        context: krb5_context,
        host: *const ::std::os::raw::c_char,
        realmsp: *mut *mut *mut ::std::os::raw::c_char,
    ) -> krb5_error_code;
}
extern "C" {
    #[doc = " @param [in] context           Library context"]
    #[doc = " @param [in] hdata             Host name (or NULL)"]
    #[doc = " @param [out] realmsp          Null-terminated list of realm names"]
    #[doc = ""]
    #[doc = " Fill in @a realmsp with a pointer to a null-terminated list of realm names"]
    #[doc = " obtained through heuristics or insecure resolution methods which have lower"]
    #[doc = " priority than KDC referrals."]
    #[doc = ""]
    #[doc = " If @a host is NULL, the local host's realms are determined."]
    #[doc = ""]
    #[doc = " Use krb5_free_host_realm() to release @a realmsp when it is no longer"]
    #[doc = " needed."]
    pub fn krb5_get_fallback_host_realm(
        context: krb5_context,
        hdata: *mut krb5_data,
        realmsp: *mut *mut *mut ::std::os::raw::c_char,
    ) -> krb5_error_code;
}
extern "C" {
    #[doc = " Free the memory allocated by krb5_get_host_realm()."]
    #[doc = ""]
    #[doc = " @param [in] context          Library context"]
    #[doc = " @param [in] realmlist        List of realm names to be released"]
    #[doc = ""]
    #[doc = " @retval"]
    #[doc = " 0  Success"]
    #[doc = " @return"]
    #[doc = " Kerberos error codes"]
    pub fn krb5_free_host_realm(
        context: krb5_context,
        realmlist: *const *mut ::std::os::raw::c_char,
    ) -> krb5_error_code;
}
extern "C" {
    #[doc = " Determine if a principal is authorized to log in as a local user."]
    #[doc = ""]
    #[doc = " @param [in] context          Library context"]
    #[doc = " @param [in] principal        Principal name"]
    #[doc = " @param [in] luser            Local username"]
    #[doc = ""]
    #[doc = " Determine whether @a principal is authorized to log in as a local user @a"]
    #[doc = " luser."]
    #[doc = ""]
    #[doc = " @retval"]
    #[doc = " TRUE Principal is authorized to log in as user; FALSE otherwise."]
    pub fn krb5_kuserok(
        context: krb5_context,
        principal: krb5_principal,
        luser: *const ::std::os::raw::c_char,
    ) -> krb5_boolean;
}
extern "C" {
    #[doc = " Generate auth context addresses from a connected socket."]
    #[doc = ""]
    #[doc = " @param [in] context          Library context"]
    #[doc = " @param [in] auth_context     Authentication context"]
    #[doc = " @param [in] infd             Connected socket descriptor"]
    #[doc = " @param [in] flags            Flags"]
    #[doc = ""]
    #[doc = " This function sets the local and/or remote addresses in @a auth_context"]
    #[doc = " based on the local and remote endpoints of the socket @a infd.  The"]
    #[doc = " following flags determine the operations performed:"]
    #[doc = ""]
    #[doc = " @li #KRB5_AUTH_CONTEXT_GENERATE_LOCAL_ADDR   Generate local address."]
    #[doc = " @li #KRB5_AUTH_CONTEXT_GENERATE_REMOTE_ADDR  Generate remote address."]
    #[doc = " @li #KRB5_AUTH_CONTEXT_GENERATE_LOCAL_FULL_ADDR  Generate local address and port."]
    #[doc = " @li #KRB5_AUTH_CONTEXT_GENERATE_REMOTE_FULL_ADDR Generate remote address and port."]
    #[doc = ""]
    #[doc = " @retval 0 Success; otherwise - Kerberos error codes"]
    pub fn krb5_auth_con_genaddrs(
        context: krb5_context,
        auth_context: krb5_auth_context,
        infd: ::std::os::raw::c_int,
        flags: ::std::os::raw::c_int,
    ) -> krb5_error_code;
}
extern "C" {
    #[doc = " Set time offset field in a krb5_context structure."]
    #[doc = ""]
    #[doc = " @param [in] context          Library context"]
    #[doc = " @param [in] seconds          Real time, seconds portion"]
    #[doc = " @param [in] microseconds     Real time, microseconds portion"]
    #[doc = ""]
    #[doc = " This function sets the time offset in @a context to the difference between"]
    #[doc = " the system time and the real time as determined by @a seconds and @a"]
    #[doc = " microseconds."]
    #[doc = ""]
    #[doc = " @retval 0 Success; otherwise - Kerberos error codes"]
    pub fn krb5_set_real_time(
        context: krb5_context,
        seconds: krb5_timestamp,
        microseconds: krb5_int32,
    ) -> krb5_error_code;
}
extern "C" {
    #[doc = " Return the time offsets from the os context."]
    #[doc = ""]
    #[doc = " @param [in]  context         Library context"]
    #[doc = " @param [out] seconds         Time offset, seconds portion"]
    #[doc = " @param [out] microseconds    Time offset, microseconds portion"]
    #[doc = ""]
    #[doc = " This function returns the time offsets in @a context."]
    #[doc = ""]
    #[doc = " @retval 0  Success; otherwise - Kerberos error codes"]
    pub fn krb5_get_time_offsets(
        context: krb5_context,
        seconds: *mut krb5_timestamp,
        microseconds: *mut krb5_int32,
    ) -> krb5_error_code;
}
extern "C" {
    #[doc = " Convert a string to an encryption type."]
    #[doc = ""]
    #[doc = " @param [in]  string          String to convert to an encryption type"]
    #[doc = " @param [out] enctypep        Encryption type"]
    #[doc = ""]
    #[doc = " @retval 0  Success; otherwise - EINVAL"]
    pub fn krb5_string_to_enctype(
        string: *mut ::std::os::raw::c_char,
        enctypep: *mut krb5_enctype,
    ) -> krb5_error_code;
}
extern "C" {
    #[doc = " Convert a string to a salt type."]
    #[doc = ""]
    #[doc = " @param [in]  string          String to convert to an encryption type"]
    #[doc = " @param [out] salttypep       Salt type to be filled in"]
    #[doc = ""]
    #[doc = " @retval 0  Success; otherwise - EINVAL"]
    pub fn krb5_string_to_salttype(
        string: *mut ::std::os::raw::c_char,
        salttypep: *mut krb5_int32,
    ) -> krb5_error_code;
}
extern "C" {
    #[doc = " Convert a string to a checksum type."]
    #[doc = ""]
    #[doc = " @param [in]  string          String to be converted"]
    #[doc = " @param [out] cksumtypep      Checksum type to be filled in"]
    #[doc = ""]
    #[doc = " @retval 0  Success; otherwise - EINVAL"]
    pub fn krb5_string_to_cksumtype(
        string: *mut ::std::os::raw::c_char,
        cksumtypep: *mut krb5_cksumtype,
    ) -> krb5_error_code;
}
extern "C" {
    #[doc = " Convert a string to a timestamp."]
    #[doc = ""]
    #[doc = " @param [in]  string          String to be converted"]
    #[doc = " @param [out] timestampp      Pointer to timestamp"]
    #[doc = ""]
    #[doc = " @retval 0  Success; otherwise - EINVAL"]
    pub fn krb5_string_to_timestamp(
        string: *mut ::std::os::raw::c_char,
        timestampp: *mut krb5_timestamp,
    ) -> krb5_error_code;
}
extern "C" {
    #[doc = " Convert a string to a delta time value."]
    #[doc = ""]
    #[doc = " @param [in]  string          String to be converted"]
    #[doc = " @param [out] deltatp         Delta time to be filled in"]
    #[doc = ""]
    #[doc = " @retval 0  Success; otherwise - KRB5_DELTAT_BADFORMAT"]
    pub fn krb5_string_to_deltat(
        string: *mut ::std::os::raw::c_char,
        deltatp: *mut krb5_deltat,
    ) -> krb5_error_code;
}
extern "C" {
    #[doc = " Convert an encryption type to a string."]
    #[doc = ""]
    #[doc = " @param [in]  enctype         Encryption type"]
    #[doc = " @param [out] buffer          Buffer to hold encryption type string"]
    #[doc = " @param [in]  buflen          Storage available in @a buffer"]
    #[doc = ""]
    #[doc = " @retval 0  Success; otherwise - Kerberos error codes"]
    pub fn krb5_enctype_to_string(
        enctype: krb5_enctype,
        buffer: *mut ::std::os::raw::c_char,
        buflen: size_t,
    ) -> krb5_error_code;
}
extern "C" {
    #[doc = " Convert an encryption type to a name or alias."]
    #[doc = ""]
    #[doc = " @param [in]  enctype         Encryption type"]
    #[doc = " @param [in]  shortest        Flag"]
    #[doc = " @param [out] buffer          Buffer to hold encryption type string"]
    #[doc = " @param [in]  buflen          Storage available in @a buffer"]
    #[doc = ""]
    #[doc = " If @a shortest is FALSE, this function returns the enctype's canonical name"]
    #[doc = " (like \"aes128-cts-hmac-sha1-96\").  If @a shortest is TRUE, it return the"]
    #[doc = " enctype's shortest alias (like \"aes128-cts\")."]
    #[doc = ""]
    #[doc = " @version New in 1.9"]
    #[doc = ""]
    #[doc = " @retval 0  Success; otherwise - Kerberos error codes"]
    pub fn krb5_enctype_to_name(
        enctype: krb5_enctype,
        shortest: krb5_boolean,
        buffer: *mut ::std::os::raw::c_char,
        buflen: size_t,
    ) -> krb5_error_code;
}
extern "C" {
    #[doc = " Convert a salt type to a string."]
    #[doc = ""]
    #[doc = " @param [in]  salttype        Salttype to convert"]
    #[doc = " @param [out] buffer          Buffer to receive the converted string"]
    #[doc = " @param [in]  buflen          Storage available in @a buffer"]
    #[doc = ""]
    #[doc = " @retval 0  Success; otherwise - Kerberos error codes"]
    pub fn krb5_salttype_to_string(
        salttype: krb5_int32,
        buffer: *mut ::std::os::raw::c_char,
        buflen: size_t,
    ) -> krb5_error_code;
}
extern "C" {
    #[doc = " Convert a checksum type to a string."]
    #[doc = ""]
    #[doc = " @param [in]  cksumtype       Checksum type"]
    #[doc = " @param [out] buffer          Buffer to hold converted checksum type"]
    #[doc = " @param [in]  buflen          Storage available in @a buffer"]
    #[doc = ""]
    #[doc = " @retval 0  Success; otherwise - Kerberos error codes"]
    pub fn krb5_cksumtype_to_string(
        cksumtype: krb5_cksumtype,
        buffer: *mut ::std::os::raw::c_char,
        buflen: size_t,
    ) -> krb5_error_code;
}
extern "C" {
    #[doc = " Convert a timestamp to a string."]
    #[doc = ""]
    #[doc = " @param [in]  timestamp       Timestamp to convert"]
    #[doc = " @param [out] buffer          Buffer to hold converted timestamp"]
    #[doc = " @param [in]  buflen          Storage available in @a buffer"]
    #[doc = ""]
    #[doc = " The string is returned in the locale's appropriate date and time"]
    #[doc = " representation."]
    #[doc = ""]
    #[doc = " @retval 0  Success; otherwise - Kerberos error codes"]
    pub fn krb5_timestamp_to_string(
        timestamp: krb5_timestamp,
        buffer: *mut ::std::os::raw::c_char,
        buflen: size_t,
    ) -> krb5_error_code;
}
extern "C" {
    #[doc = " Convert a timestamp to a string, with optional output padding"]
    #[doc = ""]
    #[doc = " @param [in]  timestamp       Timestamp to convert"]
    #[doc = " @param [out] buffer          Buffer to hold the converted timestamp"]
    #[doc = " @param [in]  buflen          Length of buffer"]
    #[doc = " @param [in]  pad             Optional value to pad @a buffer if converted"]
    #[doc = "                              timestamp does not fill it"]
    #[doc = ""]
    #[doc = " If @a pad is not NULL, @a buffer is padded out to @a buflen - 1 characters"]
    #[doc = " with the value of *@a pad."]
    #[doc = ""]
    #[doc = " @retval 0  Success; otherwise - Kerberos error codes"]
    pub fn krb5_timestamp_to_sfstring(
        timestamp: krb5_timestamp,
        buffer: *mut ::std::os::raw::c_char,
        buflen: size_t,
        pad: *mut ::std::os::raw::c_char,
    ) -> krb5_error_code;
}
extern "C" {
    #[doc = " Convert a relative time value to a string."]
    #[doc = ""]
    #[doc = " @param [in]  deltat          Relative time value to convert"]
    #[doc = " @param [out] buffer          Buffer to hold time string"]
    #[doc = " @param [in]  buflen          Storage available in @a buffer"]
    #[doc = ""]
    #[doc = " @retval 0  Success; otherwise - Kerberos error codes"]
    pub fn krb5_deltat_to_string(
        deltat: krb5_deltat,
        buffer: *mut ::std::os::raw::c_char,
        buflen: size_t,
    ) -> krb5_error_code;
}
#[doc = " Text for prompt used in prompter callback function."]
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _krb5_prompt {
    #[doc = "< The prompt to show to the user"]
    pub prompt: *mut ::std::os::raw::c_char,
    #[doc = "< Boolean; informative prompt or hidden (e.g. PIN)"]
    pub hidden: ::std::os::raw::c_int,
    #[doc = "< Must be allocated before call to  prompt routine"]
    pub reply: *mut krb5_data,
}
#[test]
fn bindgen_test_layout__krb5_prompt() {
    assert_eq!(
        ::std::mem::size_of::<_krb5_prompt>(),
        24usize,
        concat!("Size of: ", stringify!(_krb5_prompt))
    );
    assert_eq!(
        ::std::mem::align_of::<_krb5_prompt>(),
        8usize,
        concat!("Alignment of ", stringify!(_krb5_prompt))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_krb5_prompt>())).prompt as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_krb5_prompt),
            "::",
            stringify!(prompt)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_krb5_prompt>())).hidden as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(_krb5_prompt),
            "::",
            stringify!(hidden)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_krb5_prompt>())).reply as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(_krb5_prompt),
            "::",
            stringify!(reply)
        )
    );
}
#[doc = " Text for prompt used in prompter callback function."]
pub type krb5_prompt = _krb5_prompt;
#[doc = " Pointer to a prompter callback function."]
pub type krb5_prompter_fct = ::std::option::Option<
    unsafe extern "C" fn(
        context: krb5_context,
        data: *mut ::std::os::raw::c_void,
        name: *const ::std::os::raw::c_char,
        banner: *const ::std::os::raw::c_char,
        num_prompts: ::std::os::raw::c_int,
        prompts: *mut krb5_prompt,
    ) -> krb5_error_code,
>;
extern "C" {
    #[doc = " Prompt user for password."]
    #[doc = ""]
    #[doc = " @param [in] context          Library context"]
    #[doc = " @param      data             Unused (callback argument)"]
    #[doc = " @param [in] name             Name to output during prompt"]
    #[doc = " @param [in] banner           Banner to output during prompt"]
    #[doc = " @param [in] num_prompts      Number of prompts in @a prompts"]
    #[doc = " @param [in] prompts          Array of prompts and replies"]
    #[doc = ""]
    #[doc = " This function is intended to be used as a prompter callback for"]
    #[doc = " krb5_get_init_creds_password() or krb5_init_creds_init()."]
    #[doc = ""]
    #[doc = " Writes @a name and @a banner to stdout, each followed by a newline, then"]
    #[doc = " writes each prompt field in the @a prompts array, followed by \": \", and sets"]
    #[doc = " the reply field of the entry to a line of input read from stdin.  If the"]
    #[doc = " hidden flag is set for a prompt, then terminal echoing is turned off when"]
    #[doc = " input is read."]
    #[doc = ""]
    #[doc = " @retval"]
    #[doc = "  0   Success"]
    #[doc = " @return"]
    #[doc = " Kerberos error codes"]
    #[doc = ""]
    pub fn krb5_prompter_posix(
        context: krb5_context,
        data: *mut ::std::os::raw::c_void,
        name: *const ::std::os::raw::c_char,
        banner: *const ::std::os::raw::c_char,
        num_prompts: ::std::os::raw::c_int,
        prompts: *mut krb5_prompt,
    ) -> krb5_error_code;
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct krb5_responder_context_st {
    _unused: [u8; 0],
}
#[doc = " A container for a set of preauthentication questions and answers"]
#[doc = ""]
#[doc = " A responder context is supplied by the krb5 authentication system to a @ref"]
#[doc = " krb5_responder_fn callback.  It contains a list of questions and can receive"]
#[doc = " answers.  Questions contained in a responder context can be listed using"]
#[doc = " krb5_responder_list_questions(), retrieved using"]
#[doc = " krb5_responder_get_challenge(), or answered using"]
#[doc = " krb5_responder_set_answer().  The form of a question's challenge and"]
#[doc = " answer depend on the question name."]
#[doc = ""]
#[doc = " @version New in 1.11"]
pub type krb5_responder_context = *mut krb5_responder_context_st;
extern "C" {
    #[doc = " List the question names contained in the responder context."]
    #[doc = ""]
    #[doc = " @param [in] ctx              Library context"]
    #[doc = " @param [in] rctx             Responder context"]
    #[doc = ""]
    #[doc = " Return a pointer to a null-terminated list of question names which are"]
    #[doc = " present in @a rctx.  The pointer is an alias, valid only as long as the"]
    #[doc = " lifetime of @a rctx, and should not be modified or freed by the caller.  A"]
    #[doc = " question's challenge can be retrieved using krb5_responder_get_challenge()"]
    #[doc = " and answered using krb5_responder_set_answer()."]
    #[doc = ""]
    #[doc = " @version New in 1.11"]
    pub fn krb5_responder_list_questions(
        ctx: krb5_context,
        rctx: krb5_responder_context,
    ) -> *const *const ::std::os::raw::c_char;
}
extern "C" {
    #[doc = " Retrieve the challenge data for a given question in the responder context."]
    #[doc = ""]
    #[doc = " @param [in] ctx              Library context"]
    #[doc = " @param [in] rctx             Responder context"]
    #[doc = " @param [in] question         Question name"]
    #[doc = ""]
    #[doc = " Return a pointer to a C string containing the challenge for @a question"]
    #[doc = " within @a rctx, or NULL if the question is not present in @a rctx.  The"]
    #[doc = " structure of the question depends on the question name, but will always be"]
    #[doc = " printable UTF-8 text.  The returned pointer is an alias, valid only as long"]
    #[doc = " as the lifetime of @a rctx, and should not be modified or freed by the"]
    #[doc = " caller."]
    #[doc = ""]
    #[doc = " @version New in 1.11"]
    pub fn krb5_responder_get_challenge(
        ctx: krb5_context,
        rctx: krb5_responder_context,
        question: *const ::std::os::raw::c_char,
    ) -> *const ::std::os::raw::c_char;
}
extern "C" {
    #[doc = " Answer a named question in the responder context."]
    #[doc = ""]
    #[doc = " @param [in] ctx              Library context"]
    #[doc = " @param [in] rctx             Responder context"]
    #[doc = " @param [in] question         Question name"]
    #[doc = " @param [in] answer           The string to set (MUST be printable UTF-8)"]
    #[doc = ""]
    #[doc = " This function supplies an answer to @a question within @a rctx.  The"]
    #[doc = " appropriate form of the answer depends on the question name."]
    #[doc = ""]
    #[doc = " @retval EINVAL @a question is not present within @a rctx"]
    #[doc = ""]
    #[doc = " @version New in 1.11"]
    pub fn krb5_responder_set_answer(
        ctx: krb5_context,
        rctx: krb5_responder_context,
        question: *const ::std::os::raw::c_char,
        answer: *const ::std::os::raw::c_char,
    ) -> krb5_error_code;
}
#[doc = " Responder function for an initial credential exchange."]
#[doc = ""]
#[doc = " @param [in] ctx              Library context"]
#[doc = " @param [in] data             Callback data"]
#[doc = " @param [in] rctx             Responder context"]
#[doc = ""]
#[doc = " A responder function is like a prompter function, but is used for handling"]
#[doc = " questions and answers as potentially complex data types.  Client"]
#[doc = " preauthentication modules will insert a set of named \"questions\" into"]
#[doc = " the responder context.  Each question may optionally contain a challenge."]
#[doc = " This challenge is printable UTF-8, but may be an encoded value.  The"]
#[doc = " precise encoding and contents of the challenge are specific to the question"]
#[doc = " asked.  When the responder is called, it should answer all the questions it"]
#[doc = " understands.  Like the challenge, the answer MUST be printable UTF-8, but"]
#[doc = " may contain structured/encoded data formatted to the expected answer format"]
#[doc = " of the question."]
#[doc = ""]
#[doc = " If a required question is unanswered, the prompter may be called."]
pub type krb5_responder_fn = ::std::option::Option<
    unsafe extern "C" fn(
        ctx: krb5_context,
        data: *mut ::std::os::raw::c_void,
        rctx: krb5_responder_context,
    ) -> krb5_error_code,
>;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _krb5_responder_otp_tokeninfo {
    pub flags: krb5_flags,
    pub format: krb5_int32,
    pub length: krb5_int32,
    pub vendor: *mut ::std::os::raw::c_char,
    pub challenge: *mut ::std::os::raw::c_char,
    pub token_id: *mut ::std::os::raw::c_char,
    pub alg_id: *mut ::std::os::raw::c_char,
}
#[test]
fn bindgen_test_layout__krb5_responder_otp_tokeninfo() {
    assert_eq!(
        ::std::mem::size_of::<_krb5_responder_otp_tokeninfo>(),
        48usize,
        concat!("Size of: ", stringify!(_krb5_responder_otp_tokeninfo))
    );
    assert_eq!(
        ::std::mem::align_of::<_krb5_responder_otp_tokeninfo>(),
        8usize,
        concat!("Alignment of ", stringify!(_krb5_responder_otp_tokeninfo))
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_krb5_responder_otp_tokeninfo>())).flags as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_krb5_responder_otp_tokeninfo),
            "::",
            stringify!(flags)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_krb5_responder_otp_tokeninfo>())).format as *const _ as usize
        },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(_krb5_responder_otp_tokeninfo),
            "::",
            stringify!(format)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_krb5_responder_otp_tokeninfo>())).length as *const _ as usize
        },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(_krb5_responder_otp_tokeninfo),
            "::",
            stringify!(length)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_krb5_responder_otp_tokeninfo>())).vendor as *const _ as usize
        },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(_krb5_responder_otp_tokeninfo),
            "::",
            stringify!(vendor)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_krb5_responder_otp_tokeninfo>())).challenge as *const _ as usize
        },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(_krb5_responder_otp_tokeninfo),
            "::",
            stringify!(challenge)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_krb5_responder_otp_tokeninfo>())).token_id as *const _ as usize
        },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(_krb5_responder_otp_tokeninfo),
            "::",
            stringify!(token_id)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_krb5_responder_otp_tokeninfo>())).alg_id as *const _ as usize
        },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(_krb5_responder_otp_tokeninfo),
            "::",
            stringify!(alg_id)
        )
    );
}
pub type krb5_responder_otp_tokeninfo = _krb5_responder_otp_tokeninfo;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _krb5_responder_otp_challenge {
    pub service: *mut ::std::os::raw::c_char,
    pub tokeninfo: *mut *mut krb5_responder_otp_tokeninfo,
}
#[test]
fn bindgen_test_layout__krb5_responder_otp_challenge() {
    assert_eq!(
        ::std::mem::size_of::<_krb5_responder_otp_challenge>(),
        16usize,
        concat!("Size of: ", stringify!(_krb5_responder_otp_challenge))
    );
    assert_eq!(
        ::std::mem::align_of::<_krb5_responder_otp_challenge>(),
        8usize,
        concat!("Alignment of ", stringify!(_krb5_responder_otp_challenge))
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_krb5_responder_otp_challenge>())).service as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_krb5_responder_otp_challenge),
            "::",
            stringify!(service)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_krb5_responder_otp_challenge>())).tokeninfo as *const _ as usize
        },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(_krb5_responder_otp_challenge),
            "::",
            stringify!(tokeninfo)
        )
    );
}
pub type krb5_responder_otp_challenge = _krb5_responder_otp_challenge;
extern "C" {
    #[doc = " Decode the KRB5_RESPONDER_QUESTION_OTP to a C struct."]
    #[doc = ""]
    #[doc = " A convenience function which parses the KRB5_RESPONDER_QUESTION_OTP"]
    #[doc = " question challenge data, making it available in native C.  The main feature"]
    #[doc = " of this function is the ability to interact with OTP tokens without parsing"]
    #[doc = " the JSON."]
    #[doc = ""]
    #[doc = " The returned value must be passed to krb5_responder_otp_challenge_free() to"]
    #[doc = " be freed."]
    #[doc = ""]
    #[doc = " @param [in]  ctx             Library context"]
    #[doc = " @param [in]  rctx            Responder context"]
    #[doc = " @param [out] chl             Challenge structure"]
    #[doc = ""]
    #[doc = " @version New in 1.11"]
    pub fn krb5_responder_otp_get_challenge(
        ctx: krb5_context,
        rctx: krb5_responder_context,
        chl: *mut *mut krb5_responder_otp_challenge,
    ) -> krb5_error_code;
}
extern "C" {
    #[doc = " Answer the KRB5_RESPONDER_QUESTION_OTP question."]
    #[doc = ""]
    #[doc = " @param [in] ctx              Library context"]
    #[doc = " @param [in] rctx             Responder context"]
    #[doc = " @param [in] ti               The index of the tokeninfo selected"]
    #[doc = " @param [in] value            The value to set, or NULL for none"]
    #[doc = " @param [in] pin              The pin to set, or NULL for none"]
    #[doc = ""]
    #[doc = " @version New in 1.11"]
    pub fn krb5_responder_otp_set_answer(
        ctx: krb5_context,
        rctx: krb5_responder_context,
        ti: size_t,
        value: *const ::std::os::raw::c_char,
        pin: *const ::std::os::raw::c_char,
    ) -> krb5_error_code;
}
extern "C" {
    #[doc = " Free the value returned by krb5_responder_otp_get_challenge()."]
    #[doc = ""]
    #[doc = " @param [in] ctx              Library context"]
    #[doc = " @param [in] rctx             Responder context"]
    #[doc = " @param [in] chl              The challenge to free"]
    #[doc = ""]
    #[doc = " @version New in 1.11"]
    pub fn krb5_responder_otp_challenge_free(
        ctx: krb5_context,
        rctx: krb5_responder_context,
        chl: *mut krb5_responder_otp_challenge,
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _krb5_responder_pkinit_identity {
    pub identity: *mut ::std::os::raw::c_char,
    pub token_flags: krb5_int32,
}
#[test]
fn bindgen_test_layout__krb5_responder_pkinit_identity() {
    assert_eq!(
        ::std::mem::size_of::<_krb5_responder_pkinit_identity>(),
        16usize,
        concat!("Size of: ", stringify!(_krb5_responder_pkinit_identity))
    );
    assert_eq!(
        ::std::mem::align_of::<_krb5_responder_pkinit_identity>(),
        8usize,
        concat!("Alignment of ", stringify!(_krb5_responder_pkinit_identity))
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_krb5_responder_pkinit_identity>())).identity as *const _
                as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_krb5_responder_pkinit_identity),
            "::",
            stringify!(identity)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_krb5_responder_pkinit_identity>())).token_flags as *const _
                as usize
        },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(_krb5_responder_pkinit_identity),
            "::",
            stringify!(token_flags)
        )
    );
}
pub type krb5_responder_pkinit_identity = _krb5_responder_pkinit_identity;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _krb5_responder_pkinit_challenge {
    pub identities: *mut *mut krb5_responder_pkinit_identity,
}
#[test]
fn bindgen_test_layout__krb5_responder_pkinit_challenge() {
    assert_eq!(
        ::std::mem::size_of::<_krb5_responder_pkinit_challenge>(),
        8usize,
        concat!("Size of: ", stringify!(_krb5_responder_pkinit_challenge))
    );
    assert_eq!(
        ::std::mem::align_of::<_krb5_responder_pkinit_challenge>(),
        8usize,
        concat!(
            "Alignment of ",
            stringify!(_krb5_responder_pkinit_challenge)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_krb5_responder_pkinit_challenge>())).identities as *const _
                as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_krb5_responder_pkinit_challenge),
            "::",
            stringify!(identities)
        )
    );
}
pub type krb5_responder_pkinit_challenge = _krb5_responder_pkinit_challenge;
extern "C" {
    #[doc = " Decode the KRB5_RESPONDER_QUESTION_PKINIT to a C struct."]
    #[doc = ""]
    #[doc = " A convenience function which parses the KRB5_RESPONDER_QUESTION_PKINIT"]
    #[doc = " question challenge data, making it available in native C.  The main feature"]
    #[doc = " of this function is the ability to read the challenge without parsing"]
    #[doc = " the JSON."]
    #[doc = ""]
    #[doc = " The returned value must be passed to krb5_responder_pkinit_challenge_free()"]
    #[doc = " to be freed."]
    #[doc = ""]
    #[doc = " @param [in]  ctx             Library context"]
    #[doc = " @param [in]  rctx            Responder context"]
    #[doc = " @param [out] chl_out         Challenge structure"]
    #[doc = ""]
    #[doc = " @version New in 1.12"]
    pub fn krb5_responder_pkinit_get_challenge(
        ctx: krb5_context,
        rctx: krb5_responder_context,
        chl_out: *mut *mut krb5_responder_pkinit_challenge,
    ) -> krb5_error_code;
}
extern "C" {
    #[doc = " Answer the KRB5_RESPONDER_QUESTION_PKINIT question for one identity."]
    #[doc = ""]
    #[doc = " @param [in] ctx              Library context"]
    #[doc = " @param [in] rctx             Responder context"]
    #[doc = " @param [in] identity         The identity for which a PIN is being supplied"]
    #[doc = " @param [in] pin              The provided PIN, or NULL for none"]
    #[doc = ""]
    #[doc = " @version New in 1.12"]
    pub fn krb5_responder_pkinit_set_answer(
        ctx: krb5_context,
        rctx: krb5_responder_context,
        identity: *const ::std::os::raw::c_char,
        pin: *const ::std::os::raw::c_char,
    ) -> krb5_error_code;
}
extern "C" {
    #[doc = " Free the value returned by krb5_responder_pkinit_get_challenge()."]
    #[doc = ""]
    #[doc = " @param [in] ctx              Library context"]
    #[doc = " @param [in] rctx             Responder context"]
    #[doc = " @param [in] chl              The challenge to free"]
    #[doc = ""]
    #[doc = " @version New in 1.12"]
    pub fn krb5_responder_pkinit_challenge_free(
        ctx: krb5_context,
        rctx: krb5_responder_context,
        chl: *mut krb5_responder_pkinit_challenge,
    );
}
#[doc = " Store options for @c _krb5_get_init_creds"]
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _krb5_get_init_creds_opt {
    pub flags: krb5_flags,
    pub tkt_life: krb5_deltat,
    pub renew_life: krb5_deltat,
    pub forwardable: ::std::os::raw::c_int,
    pub proxiable: ::std::os::raw::c_int,
    pub etype_list: *mut krb5_enctype,
    pub etype_list_length: ::std::os::raw::c_int,
    pub address_list: *mut *mut krb5_address,
    pub preauth_list: *mut krb5_preauthtype,
    pub preauth_list_length: ::std::os::raw::c_int,
    pub salt: *mut krb5_data,
}
#[test]
fn bindgen_test_layout__krb5_get_init_creds_opt() {
    assert_eq!(
        ::std::mem::size_of::<_krb5_get_init_creds_opt>(),
        72usize,
        concat!("Size of: ", stringify!(_krb5_get_init_creds_opt))
    );
    assert_eq!(
        ::std::mem::align_of::<_krb5_get_init_creds_opt>(),
        8usize,
        concat!("Alignment of ", stringify!(_krb5_get_init_creds_opt))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_krb5_get_init_creds_opt>())).flags as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_krb5_get_init_creds_opt),
            "::",
            stringify!(flags)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_krb5_get_init_creds_opt>())).tkt_life as *const _ as usize
        },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(_krb5_get_init_creds_opt),
            "::",
            stringify!(tkt_life)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_krb5_get_init_creds_opt>())).renew_life as *const _ as usize
        },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(_krb5_get_init_creds_opt),
            "::",
            stringify!(renew_life)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_krb5_get_init_creds_opt>())).forwardable as *const _ as usize
        },
        12usize,
        concat!(
            "Offset of field: ",
            stringify!(_krb5_get_init_creds_opt),
            "::",
            stringify!(forwardable)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_krb5_get_init_creds_opt>())).proxiable as *const _ as usize
        },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(_krb5_get_init_creds_opt),
            "::",
            stringify!(proxiable)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_krb5_get_init_creds_opt>())).etype_list as *const _ as usize
        },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(_krb5_get_init_creds_opt),
            "::",
            stringify!(etype_list)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_krb5_get_init_creds_opt>())).etype_list_length as *const _
                as usize
        },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(_krb5_get_init_creds_opt),
            "::",
            stringify!(etype_list_length)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_krb5_get_init_creds_opt>())).address_list as *const _ as usize
        },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(_krb5_get_init_creds_opt),
            "::",
            stringify!(address_list)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_krb5_get_init_creds_opt>())).preauth_list as *const _ as usize
        },
        48usize,
        concat!(
            "Offset of field: ",
            stringify!(_krb5_get_init_creds_opt),
            "::",
            stringify!(preauth_list)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_krb5_get_init_creds_opt>())).preauth_list_length as *const _
                as usize
        },
        56usize,
        concat!(
            "Offset of field: ",
            stringify!(_krb5_get_init_creds_opt),
            "::",
            stringify!(preauth_list_length)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_krb5_get_init_creds_opt>())).salt as *const _ as usize },
        64usize,
        concat!(
            "Offset of field: ",
            stringify!(_krb5_get_init_creds_opt),
            "::",
            stringify!(salt)
        )
    );
}
#[doc = " Store options for @c _krb5_get_init_creds"]
pub type krb5_get_init_creds_opt = _krb5_get_init_creds_opt;
extern "C" {
    #[doc = " Allocate a new initial credential options structure."]
    #[doc = ""]
    #[doc = " @param [in]  context         Library context"]
    #[doc = " @param [out] opt             New options structure"]
    #[doc = ""]
    #[doc = " This function is the preferred way to create an options structure for"]
    #[doc = " getting initial credentials, and is required to make use of certain options."]
    #[doc = " Use krb5_get_init_creds_opt_free() to free @a opt when it is no longer"]
    #[doc = " needed."]
    #[doc = ""]
    #[doc = " @retval 0 - Success; Kerberos errors otherwise."]
    pub fn krb5_get_init_creds_opt_alloc(
        context: krb5_context,
        opt: *mut *mut krb5_get_init_creds_opt,
    ) -> krb5_error_code;
}
extern "C" {
    #[doc = " Free initial credential options."]
    #[doc = ""]
    #[doc = " @param [in] context          Library context"]
    #[doc = " @param [in] opt              Options structure to free"]
    #[doc = ""]
    #[doc = " @sa krb5_get_init_creds_opt_alloc()"]
    pub fn krb5_get_init_creds_opt_free(context: krb5_context, opt: *mut krb5_get_init_creds_opt);
}
extern "C" {
    #[doc = " @deprecated Use krb5_get_init_creds_opt_alloc() instead."]
    pub fn krb5_get_init_creds_opt_init(opt: *mut krb5_get_init_creds_opt);
}
extern "C" {
    #[doc = " Set the ticket lifetime in initial credential options."]
    #[doc = ""]
    #[doc = " @param [in] opt              Options structure"]
    #[doc = " @param [in] tkt_life         Ticket lifetime"]
    pub fn krb5_get_init_creds_opt_set_tkt_life(
        opt: *mut krb5_get_init_creds_opt,
        tkt_life: krb5_deltat,
    );
}
extern "C" {
    #[doc = " Set the ticket renewal lifetime in initial credential options."]
    #[doc = ""]
    #[doc = " @param [in] opt              Pointer to @a options field"]
    #[doc = " @param [in] renew_life       Ticket renewal lifetime"]
    pub fn krb5_get_init_creds_opt_set_renew_life(
        opt: *mut krb5_get_init_creds_opt,
        renew_life: krb5_deltat,
    );
}
extern "C" {
    #[doc = " Set or unset the forwardable flag in initial credential options."]
    #[doc = ""]
    #[doc = " @param [in] opt              Options structure"]
    #[doc = " @param [in] forwardable      Whether credentials should be forwardable"]
    pub fn krb5_get_init_creds_opt_set_forwardable(
        opt: *mut krb5_get_init_creds_opt,
        forwardable: ::std::os::raw::c_int,
    );
}
extern "C" {
    #[doc = " Set or unset the proxiable flag in initial credential options."]
    #[doc = ""]
    #[doc = " @param [in] opt              Options structure"]
    #[doc = " @param [in] proxiable        Whether credentials should be proxiable"]
    pub fn krb5_get_init_creds_opt_set_proxiable(
        opt: *mut krb5_get_init_creds_opt,
        proxiable: ::std::os::raw::c_int,
    );
}
extern "C" {
    #[doc = " Set or unset the canonicalize flag in initial credential options."]
    #[doc = ""]
    #[doc = " @param [in] opt              Options structure"]
    #[doc = " @param [in] canonicalize     Whether to canonicalize client principal"]
    pub fn krb5_get_init_creds_opt_set_canonicalize(
        opt: *mut krb5_get_init_creds_opt,
        canonicalize: ::std::os::raw::c_int,
    );
}
extern "C" {
    #[doc = " Set or unset the anonymous flag in initial credential options."]
    #[doc = ""]
    #[doc = " @param [in] opt              Options structure"]
    #[doc = " @param [in] anonymous        Whether to make an anonymous request"]
    #[doc = ""]
    #[doc = " This function may be used to request anonymous credentials from the KDC by"]
    #[doc = " setting @a anonymous to non-zero.  Note that anonymous credentials are only"]
    #[doc = " a request; clients must verify that credentials are anonymous if that is a"]
    #[doc = " requirement."]
    pub fn krb5_get_init_creds_opt_set_anonymous(
        opt: *mut krb5_get_init_creds_opt,
        anonymous: ::std::os::raw::c_int,
    );
}
extern "C" {
    #[doc = " Set allowable encryption types in initial credential options."]
    #[doc = ""]
    #[doc = " @param [in] opt               Options structure"]
    #[doc = " @param [in] etype_list        Array of encryption types"]
    #[doc = " @param [in] etype_list_length Length of @a etype_list"]
    pub fn krb5_get_init_creds_opt_set_etype_list(
        opt: *mut krb5_get_init_creds_opt,
        etype_list: *mut krb5_enctype,
        etype_list_length: ::std::os::raw::c_int,
    );
}
extern "C" {
    #[doc = " Set address restrictions in initial credential options."]
    #[doc = ""]
    #[doc = " @param [in] opt              Options structure"]
    #[doc = " @param [in] addresses        Null-terminated array of addresses"]
    pub fn krb5_get_init_creds_opt_set_address_list(
        opt: *mut krb5_get_init_creds_opt,
        addresses: *mut *mut krb5_address,
    );
}
extern "C" {
    #[doc = " Set preauthentication types in initial credential options."]
    #[doc = ""]
    #[doc = " @param [in] opt                 Options structure"]
    #[doc = " @param [in] preauth_list        Array of preauthentication types"]
    #[doc = " @param [in] preauth_list_length Length of @a preauth_list"]
    #[doc = ""]
    #[doc = " This function can be used to perform optimistic preauthentication when"]
    #[doc = " getting initial credentials, in combination with"]
    #[doc = " krb5_get_init_creds_opt_set_salt() and krb5_get_init_creds_opt_set_pa()."]
    pub fn krb5_get_init_creds_opt_set_preauth_list(
        opt: *mut krb5_get_init_creds_opt,
        preauth_list: *mut krb5_preauthtype,
        preauth_list_length: ::std::os::raw::c_int,
    );
}
extern "C" {
    #[doc = " Set salt for optimistic preauthentication in initial credential options."]
    #[doc = ""]
    #[doc = " @param [in] opt              Options structure"]
    #[doc = " @param [in] salt             Salt data"]
    #[doc = ""]
    #[doc = " When getting initial credentials with a password, a salt string it used to"]
    #[doc = " convert the password to a key.  Normally this salt is obtained from the"]
    #[doc = " first KDC reply, but when performing optimistic preauthentication, the"]
    #[doc = " client may need to supply the salt string with this function."]
    pub fn krb5_get_init_creds_opt_set_salt(
        opt: *mut krb5_get_init_creds_opt,
        salt: *mut krb5_data,
    );
}
extern "C" {
    #[doc = " Set or unset change-password-prompt flag in initial credential options."]
    #[doc = ""]
    #[doc = " @param [in] opt              Options structure"]
    #[doc = " @param [in] prompt           Whether to prompt to change password"]
    #[doc = ""]
    #[doc = " This flag is on by default.  It controls whether"]
    #[doc = " krb5_get_init_creds_password() will react to an expired-password error by"]
    #[doc = " prompting for a new password and attempting to change the old one."]
    pub fn krb5_get_init_creds_opt_set_change_password_prompt(
        opt: *mut krb5_get_init_creds_opt,
        prompt: ::std::os::raw::c_int,
    );
}
#[doc = " Generic preauth option attribute/value pairs"]
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _krb5_gic_opt_pa_data {
    pub attr: *mut ::std::os::raw::c_char,
    pub value: *mut ::std::os::raw::c_char,
}
#[test]
fn bindgen_test_layout__krb5_gic_opt_pa_data() {
    assert_eq!(
        ::std::mem::size_of::<_krb5_gic_opt_pa_data>(),
        16usize,
        concat!("Size of: ", stringify!(_krb5_gic_opt_pa_data))
    );
    assert_eq!(
        ::std::mem::align_of::<_krb5_gic_opt_pa_data>(),
        8usize,
        concat!("Alignment of ", stringify!(_krb5_gic_opt_pa_data))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_krb5_gic_opt_pa_data>())).attr as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_krb5_gic_opt_pa_data),
            "::",
            stringify!(attr)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_krb5_gic_opt_pa_data>())).value as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(_krb5_gic_opt_pa_data),
            "::",
            stringify!(value)
        )
    );
}
#[doc = " Generic preauth option attribute/value pairs"]
pub type krb5_gic_opt_pa_data = _krb5_gic_opt_pa_data;
extern "C" {
    #[doc = " Supply options for preauthentication in initial credential options."]
    #[doc = ""]
    #[doc = " @param [in] context          Library context"]
    #[doc = " @param [in] opt              Options structure"]
    #[doc = " @param [in] attr             Preauthentication option name"]
    #[doc = " @param [in] value            Preauthentication option value"]
    #[doc = ""]
    #[doc = " This function allows the caller to supply options for preauthentication."]
    #[doc = " The values of @a attr and @a value are supplied to each preauthentication"]
    #[doc = " module available within @a context."]
    pub fn krb5_get_init_creds_opt_set_pa(
        context: krb5_context,
        opt: *mut krb5_get_init_creds_opt,
        attr: *const ::std::os::raw::c_char,
        value: *const ::std::os::raw::c_char,
    ) -> krb5_error_code;
}
extern "C" {
    #[doc = " Set location of FAST armor ccache in initial credential options."]
    #[doc = ""]
    #[doc = " @param [in] context          Library context"]
    #[doc = " @param [in] opt              Options"]
    #[doc = " @param [in] fast_ccache_name Credential cache name"]
    #[doc = ""]
    #[doc = " Sets the location of a credential cache containing an armor ticket to"]
    #[doc = " protect an initial credential exchange using the FAST protocol extension."]
    #[doc = ""]
    #[doc = " In version 1.7, setting an armor ccache requires that FAST be used for the"]
    #[doc = " exchange.  In version 1.8 or later, setting the armor ccache causes FAST to"]
    #[doc = " be used if the KDC supports it; krb5_get_init_creds_opt_set_fast_flags()"]
    #[doc = " must be used to require that FAST be used."]
    pub fn krb5_get_init_creds_opt_set_fast_ccache_name(
        context: krb5_context,
        opt: *mut krb5_get_init_creds_opt,
        fast_ccache_name: *const ::std::os::raw::c_char,
    ) -> krb5_error_code;
}
extern "C" {
    #[doc = " Set FAST armor cache in initial credential options."]
    #[doc = ""]
    #[doc = " @param [in] context           Library context"]
    #[doc = " @param [in] opt               Options"]
    #[doc = " @param [in] ccache            Credential cache handle"]
    #[doc = ""]
    #[doc = " This function is similar to krb5_get_init_creds_opt_set_fast_ccache_name(),"]
    #[doc = " but uses a credential cache handle instead of a name."]
    #[doc = ""]
    #[doc = " @version New in 1.9"]
    pub fn krb5_get_init_creds_opt_set_fast_ccache(
        context: krb5_context,
        opt: *mut krb5_get_init_creds_opt,
        ccache: krb5_ccache,
    ) -> krb5_error_code;
}
extern "C" {
    #[doc = " Set an input credential cache in initial credential options."]
    #[doc = ""]
    #[doc = " @param [in] context          Library context"]
    #[doc = " @param [in] opt              Options"]
    #[doc = " @param [in] ccache           Credential cache handle"]
    #[doc = ""]
    #[doc = " If an input credential cache is set, then the krb5_get_init_creds family of"]
    #[doc = " APIs will read settings from it.  Setting an input ccache is desirable when"]
    #[doc = " the application wishes to perform authentication in the same way (using the"]
    #[doc = " same preauthentication mechanisms, and making the same non-security-"]
    #[doc = " sensitive choices) as the previous authentication attempt, which stored"]
    #[doc = " information in the passed-in ccache."]
    #[doc = ""]
    #[doc = " @version New in 1.11"]
    pub fn krb5_get_init_creds_opt_set_in_ccache(
        context: krb5_context,
        opt: *mut krb5_get_init_creds_opt,
        ccache: krb5_ccache,
    ) -> krb5_error_code;
}
extern "C" {
    #[doc = " Set an output credential cache in initial credential options."]
    #[doc = ""]
    #[doc = " @param [in] context          Library context"]
    #[doc = " @param [in] opt              Options"]
    #[doc = " @param [in] ccache           Credential cache handle"]
    #[doc = ""]
    #[doc = " If an output credential cache is set, then the krb5_get_init_creds family of"]
    #[doc = " APIs will write credentials to it.  Setting an output ccache is desirable"]
    #[doc = " both because it simplifies calling code and because it permits the"]
    #[doc = " krb5_get_init_creds APIs to write out configuration information about the"]
    #[doc = " realm to the ccache."]
    pub fn krb5_get_init_creds_opt_set_out_ccache(
        context: krb5_context,
        opt: *mut krb5_get_init_creds_opt,
        ccache: krb5_ccache,
    ) -> krb5_error_code;
}
extern "C" {
    #[doc = " @brief Ask the KDC to include or not include a PAC in the ticket"]
    #[doc = ""]
    #[doc = " @param [in] context          Library context"]
    #[doc = " @param [in] opt              Options structure"]
    #[doc = " @param [in] req_pac          Whether to request a PAC or not"]
    #[doc = ""]
    #[doc = " If this option is set, the AS request will include a PAC-REQUEST pa-data"]
    #[doc = " item explicitly asking the KDC to either include or not include a privilege"]
    #[doc = " attribute certificate in the ticket authorization data.  By default, no"]
    #[doc = " request is made; typically the KDC will default to including a PAC if it"]
    #[doc = " supports them."]
    #[doc = ""]
    #[doc = " @version New in 1.15"]
    pub fn krb5_get_init_creds_opt_set_pac_request(
        context: krb5_context,
        opt: *mut krb5_get_init_creds_opt,
        req_pac: krb5_boolean,
    ) -> krb5_error_code;
}
extern "C" {
    #[doc = " Set FAST flags in initial credential options."]
    #[doc = ""]
    #[doc = " @param [in] context          Library context"]
    #[doc = " @param [in] opt              Options"]
    #[doc = " @param [in] flags            FAST flags"]
    #[doc = ""]
    #[doc = " The following flag values are valid:"]
    #[doc = " @li #KRB5_FAST_REQUIRED - Require FAST to be used"]
    #[doc = ""]
    #[doc = " @retval"]
    #[doc = " 0 - Success; Kerberos errors otherwise."]
    pub fn krb5_get_init_creds_opt_set_fast_flags(
        context: krb5_context,
        opt: *mut krb5_get_init_creds_opt,
        flags: krb5_flags,
    ) -> krb5_error_code;
}
extern "C" {
    #[doc = " Retrieve FAST flags from initial credential options."]
    #[doc = ""]
    #[doc = " @param [in]  context         Library context"]
    #[doc = " @param [in]  opt             Options"]
    #[doc = " @param [out] out_flags       FAST flags"]
    #[doc = ""]
    #[doc = " @retval"]
    #[doc = " 0 - Success; Kerberos errors otherwise."]
    pub fn krb5_get_init_creds_opt_get_fast_flags(
        context: krb5_context,
        opt: *mut krb5_get_init_creds_opt,
        out_flags: *mut krb5_flags,
    ) -> krb5_error_code;
}
pub type krb5_expire_callback_func = ::std::option::Option<
    unsafe extern "C" fn(
        context: krb5_context,
        data: *mut ::std::os::raw::c_void,
        password_expiration: krb5_timestamp,
        account_expiration: krb5_timestamp,
        is_last_req: krb5_boolean,
    ),
>;
extern "C" {
    #[doc = " Set an expiration callback in initial credential options."]
    #[doc = ""]
    #[doc = " @param [in] context          Library context"]
    #[doc = " @param [in] opt              Options structure"]
    #[doc = " @param [in] cb               Callback function"]
    #[doc = " @param [in] data             Callback argument"]
    #[doc = ""]
    #[doc = " Set a callback to receive password and account expiration times."]
    #[doc = ""]
    #[doc = " @a cb will be invoked if and only if credentials are successfully acquired."]
    #[doc = " The callback will receive the @a context from the calling function and the"]
    #[doc = " @a data argument supplied with this API.  The remaining arguments should be"]
    #[doc = " interpreted as follows:"]
    #[doc = ""]
    #[doc = " If @a is_last_req is true, then the KDC reply contained last-req entries"]
    #[doc = " which unambiguously indicated the password expiration, account expiration,"]
    #[doc = " or both.  (If either value was not present, the corresponding argument will"]
    #[doc = " be 0.)  Furthermore, a non-zero @a password_expiration should be taken as a"]
    #[doc = " suggestion from the KDC that a warning be displayed."]
    #[doc = ""]
    #[doc = " If @a is_last_req is false, then @a account_expiration will be 0 and @a"]
    #[doc = " password_expiration will contain the expiration time of either the password"]
    #[doc = " or account, or 0 if no expiration time was indicated in the KDC reply.  The"]
    #[doc = " callback should independently decide whether to display a password"]
    #[doc = " expiration warning."]
    #[doc = ""]
    #[doc = " Note that @a cb may be invoked even if credentials are being acquired for"]
    #[doc = " the kadmin/changepw service in order to change the password.  It is the"]
    #[doc = " caller's responsibility to avoid displaying a password expiry warning in"]
    #[doc = " this case."]
    #[doc = ""]
    #[doc = " @warning Setting an expire callback with this API will cause"]
    #[doc = " krb5_get_init_creds_password() not to send password expiry warnings to the"]
    #[doc = " prompter, as it ordinarily may."]
    #[doc = ""]
    #[doc = " @version New in 1.9"]
    pub fn krb5_get_init_creds_opt_set_expire_callback(
        context: krb5_context,
        opt: *mut krb5_get_init_creds_opt,
        cb: krb5_expire_callback_func,
        data: *mut ::std::os::raw::c_void,
    ) -> krb5_error_code;
}
extern "C" {
    #[doc = " Set the responder function in initial credential options."]
    #[doc = ""]
    #[doc = " @param [in] context          Library context"]
    #[doc = " @param [in] opt              Options structure"]
    #[doc = " @param [in] responder        Responder function"]
    #[doc = " @param [in] data             Responder data argument"]
    #[doc = ""]
    #[doc = " @version New in 1.11"]
    pub fn krb5_get_init_creds_opt_set_responder(
        context: krb5_context,
        opt: *mut krb5_get_init_creds_opt,
        responder: krb5_responder_fn,
        data: *mut ::std::os::raw::c_void,
    ) -> krb5_error_code;
}
extern "C" {
    #[doc = " Get initial credentials using a password."]
    #[doc = ""]
    #[doc = " @param [in]  context         Library context"]
    #[doc = " @param [out] creds           New credentials"]
    #[doc = " @param [in]  client          Client principal"]
    #[doc = " @param [in]  password        Password (or NULL)"]
    #[doc = " @param [in]  prompter        Prompter function"]
    #[doc = " @param [in]  data            Prompter callback data"]
    #[doc = " @param [in]  start_time      Time when ticket becomes valid (0 for now)"]
    #[doc = " @param [in]  in_tkt_service  Service name of initial credentials (or NULL)"]
    #[doc = " @param [in]  k5_gic_options  Initial credential options"]
    #[doc = ""]
    #[doc = " This function requests KDC for an initial credentials for @a client using @a"]
    #[doc = " password.  If @a password is NULL, a password will be prompted for using @a"]
    #[doc = " prompter if necessary.  If @a in_tkt_service is specified, it is parsed as a"]
    #[doc = " principal name (with the realm ignored) and used as the service principal"]
    #[doc = " for the request; otherwise the ticket-granting service is used."]
    #[doc = ""]
    #[doc = " @sa krb5_verify_init_creds()"]
    #[doc = ""]
    #[doc = " @retval"]
    #[doc = "  0    Success"]
    #[doc = " @retval"]
    #[doc = "  EINVAL Invalid argument"]
    #[doc = " @retval"]
    #[doc = "  KRB5_KDC_UNREACH Cannot contact any KDC for requested realm"]
    #[doc = " @retval"]
    #[doc = "  KRB5_PREAUTH_FAILED Generic Pre-athentication failure"]
    #[doc = " @retval"]
    #[doc = "  KRB5_LIBOS_PWDINTR Password read interrupted"]
    #[doc = " @retval"]
    #[doc = "  KRB5_REALM_CANT_RESOLVE Cannot resolve network address for KDC in requested realm"]
    #[doc = " @retval"]
    #[doc = "  KRB5KDC_ERR_KEY_EXP Password has expired"]
    #[doc = " @retval"]
    #[doc = "  KRB5_LIBOS_BADPWDMATCH Password mismatch"]
    #[doc = " @retval"]
    #[doc = "  KRB5_CHPW_PWDNULL New password cannot be zero length"]
    #[doc = " @retval"]
    #[doc = "  KRB5_CHPW_FAIL Password change failed"]
    #[doc = " @return"]
    #[doc = " Kerberos error codes"]
    pub fn krb5_get_init_creds_password(
        context: krb5_context,
        creds: *mut krb5_creds,
        client: krb5_principal,
        password: *const ::std::os::raw::c_char,
        prompter: krb5_prompter_fct,
        data: *mut ::std::os::raw::c_void,
        start_time: krb5_deltat,
        in_tkt_service: *const ::std::os::raw::c_char,
        k5_gic_options: *mut krb5_get_init_creds_opt,
    ) -> krb5_error_code;
}
extern "C" {
    #[doc = " Retrieve enctype, salt and s2kparams from KDC"]
    #[doc = ""]
    #[doc = " @param [in]  context         Library context"]
    #[doc = " @param [in]  principal       Principal whose information is requested"]
    #[doc = " @param [in]  opt             Initial credential options"]
    #[doc = " @param [out] enctype_out     The enctype chosen by KDC"]
    #[doc = " @param [out] salt_out        Salt returned from KDC"]
    #[doc = " @param [out] s2kparams_out   String-to-key parameters returned from KDC"]
    #[doc = ""]
    #[doc = " Send an initial ticket request for @a principal and extract the encryption"]
    #[doc = " type, salt type, and string-to-key parameters from the KDC response.  If the"]
    #[doc = " KDC provides no etype-info, set @a enctype_out to @c ENCTYPE_NULL and set @a"]
    #[doc = " salt_out and @a s2kparams_out to empty.  If the KDC etype-info provides no"]
    #[doc = " salt, compute the default salt and place it in @a salt_out.  If the KDC"]
    #[doc = " etype-info provides no string-to-key parameters, set @a s2kparams_out to"]
    #[doc = " empty."]
    #[doc = ""]
    #[doc = " @a opt may be used to specify options which affect the initial request, such"]
    #[doc = " as request encryption types or a FAST armor cache (see"]
    #[doc = " krb5_get_init_creds_opt_set_etype_list() and"]
    #[doc = " krb5_get_init_creds_opt_set_fast_ccache_name())."]
    #[doc = ""]
    #[doc = " Use krb5_free_data_contents() to free @a salt_out and @a s2kparams_out when"]
    #[doc = " they are no longer needed."]
    #[doc = ""]
    #[doc = " @version New in 1.17"]
    #[doc = ""]
    #[doc = " @retval 0 Success"]
    #[doc = " @return A Kerberos error code"]
    pub fn krb5_get_etype_info(
        context: krb5_context,
        principal: krb5_principal,
        opt: *mut krb5_get_init_creds_opt,
        enctype_out: *mut krb5_enctype,
        salt_out: *mut krb5_data,
        s2kparams_out: *mut krb5_data,
    ) -> krb5_error_code;
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _krb5_init_creds_context {
    _unused: [u8; 0],
}
pub type krb5_init_creds_context = *mut _krb5_init_creds_context;
extern "C" {
    #[doc = " Free an initial credentials context."]
    #[doc = ""]
    #[doc = " @param [in] context          Library context"]
    #[doc = " @param [in] ctx              Initial credentials context"]
    #[doc = ""]
    #[doc = " @a context must be the same as the one passed to krb5_init_creds_init() for"]
    #[doc = " this initial credentials context."]
    pub fn krb5_init_creds_free(context: krb5_context, ctx: krb5_init_creds_context);
}
extern "C" {
    #[doc = " Acquire credentials using an initial credentials context."]
    #[doc = ""]
    #[doc = " @param [in] context          Library context"]
    #[doc = " @param [in] ctx              Initial credentials context"]
    #[doc = ""]
    #[doc = " This function synchronously obtains credentials using a context created by"]
    #[doc = " krb5_init_creds_init().  On successful return, the credentials can be"]
    #[doc = " retrieved with krb5_init_creds_get_creds()."]
    #[doc = ""]
    #[doc = " @a context must be the same as the one passed to krb5_init_creds_init() for"]
    #[doc = " this initial credentials context."]
    #[doc = ""]
    #[doc = " @retval 0 Success; otherwise - Kerberos error codes"]
    pub fn krb5_init_creds_get(
        context: krb5_context,
        ctx: krb5_init_creds_context,
    ) -> krb5_error_code;
}
extern "C" {
    #[doc = " Retrieve acquired credentials from an initial credentials context."]
    #[doc = ""]
    #[doc = " @param [in]  context         Library context"]
    #[doc = " @param [in]  ctx             Initial credentials context"]
    #[doc = " @param [out] creds           Acquired credentials"]
    #[doc = ""]
    #[doc = " This function copies the acquired initial credentials from @a ctx into @a"]
    #[doc = " creds, after the successful completion of krb5_init_creds_get() or"]
    #[doc = " krb5_init_creds_step().  Use krb5_free_cred_contents() to free @a creds when"]
    #[doc = " it is no longer needed."]
    #[doc = ""]
    #[doc = " @retval 0 Success; otherwise - Kerberos error codes"]
    pub fn krb5_init_creds_get_creds(
        context: krb5_context,
        ctx: krb5_init_creds_context,
        creds: *mut krb5_creds,
    ) -> krb5_error_code;
}
extern "C" {
    #[doc = " Get the last error from KDC from an initial credentials context."]
    #[doc = ""]
    #[doc = " @param [in]  context         Library context"]
    #[doc = " @param [in]  ctx             Initial credentials context"]
    #[doc = " @param [out] error           Error from KDC, or NULL if none was received"]
    #[doc = ""]
    #[doc = " @retval 0 Success; otherwise - Kerberos error codes"]
    pub fn krb5_init_creds_get_error(
        context: krb5_context,
        ctx: krb5_init_creds_context,
        error: *mut *mut krb5_error,
    ) -> krb5_error_code;
}
extern "C" {
    #[doc = " Create a context for acquiring initial credentials."]
    #[doc = ""]
    #[doc = " @param [in]  context         Library context"]
    #[doc = " @param [in]  client          Client principal to get initial creds for"]
    #[doc = " @param [in]  prompter        Prompter callback"]
    #[doc = " @param [in]  data            Prompter callback argument"]
    #[doc = " @param [in]  start_time      Time when credentials become valid (0 for now)"]
    #[doc = " @param [in]  options         Options structure (NULL for default)"]
    #[doc = " @param [out] ctx             New initial credentials context"]
    #[doc = ""]
    #[doc = " This function creates a new context for acquiring initial credentials.  Use"]
    #[doc = " krb5_init_creds_free() to free @a ctx when it is no longer needed."]
    #[doc = ""]
    #[doc = " Any subsequent calls to krb5_init_creds_step(), krb5_init_creds_get(), or"]
    #[doc = " krb5_init_creds_free() for this initial credentials context must use the"]
    #[doc = " same @a context argument as the one passed to this function."]
    #[doc = ""]
    #[doc = " @retval 0 Success; otherwise - Kerberos error codes"]
    pub fn krb5_init_creds_init(
        context: krb5_context,
        client: krb5_principal,
        prompter: krb5_prompter_fct,
        data: *mut ::std::os::raw::c_void,
        start_time: krb5_deltat,
        options: *mut krb5_get_init_creds_opt,
        ctx: *mut krb5_init_creds_context,
    ) -> krb5_error_code;
}
extern "C" {
    #[doc = " Specify a keytab to use for acquiring initial credentials."]
    #[doc = ""]
    #[doc = " @param [in] context          Library context"]
    #[doc = " @param [in] ctx              Initial credentials context"]
    #[doc = " @param [in] keytab           Key table handle"]
    #[doc = ""]
    #[doc = " This function supplies a keytab containing the client key for an initial"]
    #[doc = " credentials request."]
    #[doc = ""]
    #[doc = " @retval 0 Success; otherwise - Kerberos error codes"]
    pub fn krb5_init_creds_set_keytab(
        context: krb5_context,
        ctx: krb5_init_creds_context,
        keytab: krb5_keytab,
    ) -> krb5_error_code;
}
extern "C" {
    #[doc = " Get the next KDC request for acquiring initial credentials."]
    #[doc = ""]
    #[doc = " @param [in]  context         Library context"]
    #[doc = " @param [in]  ctx             Initial credentials context"]
    #[doc = " @param [in]  in              KDC response (empty on the first call)"]
    #[doc = " @param [out] out             Next KDC request"]
    #[doc = " @param [out] realm           Realm for next KDC request"]
    #[doc = " @param [out] flags           Output flags"]
    #[doc = ""]
    #[doc = " This function constructs the next KDC request in an initial credential"]
    #[doc = " exchange, allowing the caller to control the transport of KDC requests and"]
    #[doc = " replies.  On the first call, @a in should be set to an empty buffer; on"]
    #[doc = " subsequent calls, it should be set to the KDC's reply to the previous"]
    #[doc = " request."]
    #[doc = ""]
    #[doc = " If more requests are needed, @a flags will be set to"]
    #[doc = " #KRB5_INIT_CREDS_STEP_FLAG_CONTINUE and the next request will be placed in"]
    #[doc = " @a out.  If no more requests are needed, @a flags will not contain"]
    #[doc = " #KRB5_INIT_CREDS_STEP_FLAG_CONTINUE and @a out will be empty."]
    #[doc = ""]
    #[doc = " If this function returns @c KRB5KRB_ERR_RESPONSE_TOO_BIG, the caller should"]
    #[doc = " transmit the next request using TCP rather than UDP.  If this function"]
    #[doc = " returns any other error, the initial credential exchange has failed."]
    #[doc = ""]
    #[doc = " @a context must be the same as the one passed to krb5_init_creds_init() for"]
    #[doc = " this initial credentials context."]
    #[doc = ""]
    #[doc = " @retval 0 Success; otherwise - Kerberos error codes"]
    pub fn krb5_init_creds_step(
        context: krb5_context,
        ctx: krb5_init_creds_context,
        in_: *mut krb5_data,
        out: *mut krb5_data,
        realm: *mut krb5_data,
        flags: *mut ::std::os::raw::c_uint,
    ) -> krb5_error_code;
}
extern "C" {
    #[doc = " Set a password for acquiring initial credentials."]
    #[doc = ""]
    #[doc = " @param [in] context          Library context"]
    #[doc = " @param [in] ctx              Initial credentials context"]
    #[doc = " @param [in] password         Password"]
    #[doc = ""]
    #[doc = " This function supplies a password to be used to construct the client key for"]
    #[doc = " an initial credentials request."]
    #[doc = ""]
    #[doc = " @retval 0 Success; otherwise - Kerberos error codes"]
    pub fn krb5_init_creds_set_password(
        context: krb5_context,
        ctx: krb5_init_creds_context,
        password: *const ::std::os::raw::c_char,
    ) -> krb5_error_code;
}
extern "C" {
    #[doc = " Specify a service principal for acquiring initial credentials."]
    #[doc = ""]
    #[doc = " @param [in] context          Library context"]
    #[doc = " @param [in] ctx              Initial credentials context"]
    #[doc = " @param [in] service          Service principal string"]
    #[doc = ""]
    #[doc = " This function supplies a service principal string to acquire initial"]
    #[doc = " credentials for instead of the default krbtgt service.  @a service is parsed"]
    #[doc = " as a principal name; any realm part is ignored."]
    #[doc = ""]
    #[doc = " @retval 0 Success; otherwise - Kerberos error codes"]
    pub fn krb5_init_creds_set_service(
        context: krb5_context,
        ctx: krb5_init_creds_context,
        service: *const ::std::os::raw::c_char,
    ) -> krb5_error_code;
}
extern "C" {
    #[doc = " Retrieve ticket times from an initial credentials context."]
    #[doc = ""]
    #[doc = " @param [in]  context         Library context"]
    #[doc = " @param [in]  ctx             Initial credentials context"]
    #[doc = " @param [out] times           Ticket times for acquired credentials"]
    #[doc = ""]
    #[doc = " The initial credentials context must have completed obtaining credentials"]
    #[doc = " via either krb5_init_creds_get() or krb5_init_creds_step()."]
    #[doc = ""]
    #[doc = " @retval 0 Success; otherwise - Kerberos error codes"]
    pub fn krb5_init_creds_get_times(
        context: krb5_context,
        ctx: krb5_init_creds_context,
        times: *mut krb5_ticket_times,
    ) -> krb5_error_code;
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _krb5_tkt_creds_context {
    _unused: [u8; 0],
}
pub type krb5_tkt_creds_context = *mut _krb5_tkt_creds_context;
extern "C" {
    #[doc = " Create a context to get credentials from a KDC's Ticket Granting Service."]
    #[doc = ""]
    #[doc = " @param[in]  context          Library context"]
    #[doc = " @param[in]  ccache           Credential cache handle"]
    #[doc = " @param[in]  creds            Input credentials"]
    #[doc = " @param[in]  options          @ref KRB5_GC options for this request."]
    #[doc = " @param[out] ctx              New TGS request context"]
    #[doc = ""]
    #[doc = " This function prepares to obtain credentials matching @a creds, either by"]
    #[doc = " retrieving them from @a ccache or by making requests to ticket-granting"]
    #[doc = " services beginning with a ticket-granting ticket for the client principal's"]
    #[doc = " realm."]
    #[doc = ""]
    #[doc = " The resulting TGS acquisition context can be used asynchronously with"]
    #[doc = " krb5_tkt_creds_step() or synchronously with krb5_tkt_creds_get().  See also"]
    #[doc = " krb5_get_credentials() for synchronous use."]
    #[doc = ""]
    #[doc = " Use krb5_tkt_creds_free() to free @a ctx when it is no longer needed."]
    #[doc = ""]
    #[doc = " @version New in 1.9"]
    #[doc = ""]
    #[doc = " @retval 0  Success; otherwise - Kerberos error codes"]
    pub fn krb5_tkt_creds_init(
        context: krb5_context,
        ccache: krb5_ccache,
        creds: *mut krb5_creds,
        options: krb5_flags,
        ctx: *mut krb5_tkt_creds_context,
    ) -> krb5_error_code;
}
extern "C" {
    #[doc = " Synchronously obtain credentials using a TGS request context."]
    #[doc = ""]
    #[doc = " @param[in] context           Library context"]
    #[doc = " @param[in] ctx               TGS request context"]
    #[doc = ""]
    #[doc = " This function synchronously obtains credentials using a context created by"]
    #[doc = " krb5_tkt_creds_init().  On successful return, the credentials can be"]
    #[doc = " retrieved with krb5_tkt_creds_get_creds()."]
    #[doc = ""]
    #[doc = " @version New in 1.9"]
    #[doc = ""]
    #[doc = " @retval 0  Success; otherwise - Kerberos error codes"]
    pub fn krb5_tkt_creds_get(
        context: krb5_context,
        ctx: krb5_tkt_creds_context,
    ) -> krb5_error_code;
}
extern "C" {
    #[doc = " Retrieve acquired credentials from a TGS request context."]
    #[doc = ""]
    #[doc = " @param[in]  context          Library context"]
    #[doc = " @param[in]  ctx              TGS request context"]
    #[doc = " @param[out] creds            Acquired credentials"]
    #[doc = ""]
    #[doc = " This function copies the acquired initial credentials from @a ctx into @a"]
    #[doc = " creds, after the successful completion of krb5_tkt_creds_get() or"]
    #[doc = " krb5_tkt_creds_step().  Use krb5_free_cred_contents() to free @a creds when"]
    #[doc = " it is no longer needed."]
    #[doc = ""]
    #[doc = " @version New in 1.9"]
    #[doc = ""]
    #[doc = " @retval 0  Success; otherwise - Kerberos error codes"]
    pub fn krb5_tkt_creds_get_creds(
        context: krb5_context,
        ctx: krb5_tkt_creds_context,
        creds: *mut krb5_creds,
    ) -> krb5_error_code;
}
extern "C" {
    #[doc = " Free a TGS request context."]
    #[doc = ""]
    #[doc = " @param[in]  context  Library context"]
    #[doc = " @param[in]  ctx      TGS request context"]
    #[doc = ""]
    #[doc = " @version New in 1.9"]
    pub fn krb5_tkt_creds_free(context: krb5_context, ctx: krb5_tkt_creds_context);
}
extern "C" {
    #[doc = " Get the next KDC request in a TGS exchange."]
    #[doc = ""]
    #[doc = " @param[in]  context          Library context"]
    #[doc = " @param[in]  ctx              TGS request context"]
    #[doc = " @param[in]  in               KDC response (empty on the first call)"]
    #[doc = " @param[out] out              Next KDC request"]
    #[doc = " @param[out] realm            Realm for next KDC request"]
    #[doc = " @param[out] flags            Output flags"]
    #[doc = ""]
    #[doc = " This function constructs the next KDC request for a TGS exchange, allowing"]
    #[doc = " the caller to control the transport of KDC requests and replies.  On the"]
    #[doc = " first call, @a in should be set to an empty buffer; on subsequent calls, it"]
    #[doc = " should be set to the KDC's reply to the previous request."]
    #[doc = ""]
    #[doc = " If more requests are needed, @a flags will be set to"]
    #[doc = " #KRB5_TKT_CREDS_STEP_FLAG_CONTINUE and the next request will be placed in @a"]
    #[doc = " out.  If no more requests are needed, @a flags will not contain"]
    #[doc = " #KRB5_TKT_CREDS_STEP_FLAG_CONTINUE and @a out will be empty."]
    #[doc = ""]
    #[doc = " If this function returns @c KRB5KRB_ERR_RESPONSE_TOO_BIG, the caller should"]
    #[doc = " transmit the next request using TCP rather than UDP.  If this function"]
    #[doc = " returns any other error, the TGS exchange has failed."]
    #[doc = ""]
    #[doc = " @version New in 1.9"]
    #[doc = ""]
    #[doc = " @retval 0  Success; otherwise - Kerberos error codes"]
    pub fn krb5_tkt_creds_step(
        context: krb5_context,
        ctx: krb5_tkt_creds_context,
        in_: *mut krb5_data,
        out: *mut krb5_data,
        realm: *mut krb5_data,
        flags: *mut ::std::os::raw::c_uint,
    ) -> krb5_error_code;
}
extern "C" {
    #[doc = " Retrieve ticket times from a TGS request context."]
    #[doc = ""]
    #[doc = " @param[in]  context          Library context"]
    #[doc = " @param[in]  ctx              TGS request context"]
    #[doc = " @param[out] times            Ticket times for acquired credentials"]
    #[doc = ""]
    #[doc = " The TGS request context must have completed obtaining credentials via either"]
    #[doc = " krb5_tkt_creds_get() or krb5_tkt_creds_step()."]
    #[doc = ""]
    #[doc = " @version New in 1.9"]
    #[doc = ""]
    #[doc = " @retval 0  Success; otherwise - Kerberos error codes"]
    pub fn krb5_tkt_creds_get_times(
        context: krb5_context,
        ctx: krb5_tkt_creds_context,
        times: *mut krb5_ticket_times,
    ) -> krb5_error_code;
}
extern "C" {
    #[doc = " Get initial credentials using a key table."]
    #[doc = ""]
    #[doc = " @param [in]  context         Library context"]
    #[doc = " @param [out] creds           New credentials"]
    #[doc = " @param [in]  client          Client principal"]
    #[doc = " @param [in]  arg_keytab      Key table handle"]
    #[doc = " @param [in]  start_time      Time when ticket becomes valid (0 for now)"]
    #[doc = " @param [in]  in_tkt_service  Service name of initial credentials (or NULL)"]
    #[doc = " @param [in]  k5_gic_options  Initial credential options"]
    #[doc = ""]
    #[doc = " This function requests KDC for an initial credentials for @a client using a"]
    #[doc = " client key stored in @a arg_keytab.  If @a in_tkt_service is specified, it"]
    #[doc = " is parsed as a principal name (with the realm ignored) and used as the"]
    #[doc = " service principal for the request; otherwise the ticket-granting service is"]
    #[doc = " used."]
    #[doc = ""]
    #[doc = " @sa krb5_verify_init_creds()"]
    #[doc = ""]
    #[doc = " @retval"]
    #[doc = " 0 Success"]
    #[doc = " @return"]
    #[doc = " Kerberos error codes"]
    pub fn krb5_get_init_creds_keytab(
        context: krb5_context,
        creds: *mut krb5_creds,
        client: krb5_principal,
        arg_keytab: krb5_keytab,
        start_time: krb5_deltat,
        in_tkt_service: *const ::std::os::raw::c_char,
        k5_gic_options: *mut krb5_get_init_creds_opt,
    ) -> krb5_error_code;
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _krb5_verify_init_creds_opt {
    pub flags: krb5_flags,
    #[doc = "< boolean"]
    pub ap_req_nofail: ::std::os::raw::c_int,
}
#[test]
fn bindgen_test_layout__krb5_verify_init_creds_opt() {
    assert_eq!(
        ::std::mem::size_of::<_krb5_verify_init_creds_opt>(),
        8usize,
        concat!("Size of: ", stringify!(_krb5_verify_init_creds_opt))
    );
    assert_eq!(
        ::std::mem::align_of::<_krb5_verify_init_creds_opt>(),
        4usize,
        concat!("Alignment of ", stringify!(_krb5_verify_init_creds_opt))
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_krb5_verify_init_creds_opt>())).flags as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_krb5_verify_init_creds_opt),
            "::",
            stringify!(flags)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_krb5_verify_init_creds_opt>())).ap_req_nofail as *const _
                as usize
        },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(_krb5_verify_init_creds_opt),
            "::",
            stringify!(ap_req_nofail)
        )
    );
}
pub type krb5_verify_init_creds_opt = _krb5_verify_init_creds_opt;
extern "C" {
    #[doc = " Initialize a credential verification options structure."]
    #[doc = ""]
    #[doc = " @param [in] k5_vic_options   Verification options structure"]
    pub fn krb5_verify_init_creds_opt_init(k5_vic_options: *mut krb5_verify_init_creds_opt);
}
extern "C" {
    #[doc = " Set whether credential verification is required."]
    #[doc = ""]
    #[doc = " @param [in] k5_vic_options   Verification options structure"]
    #[doc = " @param [in] ap_req_nofail    Whether to require successful verification"]
    #[doc = ""]
    #[doc = " This function determines how krb5_verify_init_creds() behaves if no keytab"]
    #[doc = " information is available.  If @a ap_req_nofail is @c FALSE, verification"]
    #[doc = " will be skipped in this case and krb5_verify_init_creds() will return"]
    #[doc = " successfully.  If @a ap_req_nofail is @c TRUE, krb5_verify_init_creds() will"]
    #[doc = " not return successfully unless verification can be performed."]
    #[doc = ""]
    #[doc = " If this function is not used, the behavior of krb5_verify_init_creds() is"]
    #[doc = " determined through configuration."]
    pub fn krb5_verify_init_creds_opt_set_ap_req_nofail(
        k5_vic_options: *mut krb5_verify_init_creds_opt,
        ap_req_nofail: ::std::os::raw::c_int,
    );
}
extern "C" {
    #[doc = " Verify initial credentials against a keytab."]
    #[doc = ""]
    #[doc = " @param [in] context          Library context"]
    #[doc = " @param [in] creds            Initial credentials to be verified"]
    #[doc = " @param [in] server           Server principal (or NULL)"]
    #[doc = " @param [in] keytab           Key table (NULL to use default keytab)"]
    #[doc = " @param [in] ccache           Credential cache for fetched creds (or NULL)"]
    #[doc = " @param [in] options          Verification options (NULL for default options)"]
    #[doc = ""]
    #[doc = " This function attempts to verify that @a creds were obtained from a KDC with"]
    #[doc = " knowledge of a key in @a keytab, or the default keytab if @a keytab is NULL."]
    #[doc = " If @a server is provided, the highest-kvno key entry for that principal name"]
    #[doc = " is used to verify the credentials; otherwise, all unique \"host\" service"]
    #[doc = " principals in the keytab are tried."]
    #[doc = ""]
    #[doc = " If the specified keytab does not exist, or is empty, or cannot be read, or"]
    #[doc = " does not contain an entry for @a server, then credential verification may be"]
    #[doc = " skipped unless configuration demands that it succeed.  The caller can"]
    #[doc = " control this behavior by providing a verification options structure; see"]
    #[doc = " krb5_verify_init_creds_opt_init() and"]
    #[doc = " krb5_verify_init_creds_opt_set_ap_req_nofail()."]
    #[doc = ""]
    #[doc = " If @a ccache is NULL, any additional credentials fetched during the"]
    #[doc = " verification process will be destroyed.  If @a ccache points to NULL, a"]
    #[doc = " memory ccache will be created for the additional credentials and returned in"]
    #[doc = " @a ccache.  If @a ccache points to a valid credential cache handle, the"]
    #[doc = " additional credentials will be stored in that cache."]
    #[doc = ""]
    #[doc = " @retval 0  Success; otherwise - Kerberos error codes"]
    pub fn krb5_verify_init_creds(
        context: krb5_context,
        creds: *mut krb5_creds,
        server: krb5_principal,
        keytab: krb5_keytab,
        ccache: *mut krb5_ccache,
        options: *mut krb5_verify_init_creds_opt,
    ) -> krb5_error_code;
}
extern "C" {
    #[doc = " Get validated credentials from the KDC."]
    #[doc = ""]
    #[doc = " @param [in]  context         Library context"]
    #[doc = " @param [out] creds           Validated credentials"]
    #[doc = " @param [in]  client          Client principal name"]
    #[doc = " @param [in]  ccache          Credential cache"]
    #[doc = " @param [in]  in_tkt_service  Server principal string (or NULL)"]
    #[doc = ""]
    #[doc = " This function gets a validated credential using a postdated credential from"]
    #[doc = " @a ccache.  If @a in_tkt_service is specified, it is parsed (with the realm"]
    #[doc = " part ignored) and used as the server principal of the credential;"]
    #[doc = " otherwise, the ticket-granting service is used."]
    #[doc = ""]
    #[doc = " If successful, the validated credential is placed in @a creds."]
    #[doc = ""]
    #[doc = " @sa krb5_get_renewed_creds()"]
    #[doc = ""]
    #[doc = " @retval"]
    #[doc = " 0 Success"]
    #[doc = " @retval"]
    #[doc = " KRB5_NO_2ND_TKT Request missing second ticket"]
    #[doc = " @retval"]
    #[doc = " KRB5_NO_TKT_SUPPLIED Request did not supply a ticket"]
    #[doc = " @retval"]
    #[doc = " KRB5_PRINC_NOMATCH Requested principal and ticket do not match"]
    #[doc = " @retval"]
    #[doc = " KRB5_KDCREP_MODIFIED KDC reply did not match expectations"]
    #[doc = " @retval"]
    #[doc = " KRB5_KDCREP_SKEW Clock skew too great in KDC reply"]
    #[doc = " @return"]
    #[doc = " Kerberos error codes"]
    pub fn krb5_get_validated_creds(
        context: krb5_context,
        creds: *mut krb5_creds,
        client: krb5_principal,
        ccache: krb5_ccache,
        in_tkt_service: *const ::std::os::raw::c_char,
    ) -> krb5_error_code;
}
extern "C" {
    #[doc = " Get renewed credential from KDC using an existing credential."]
    #[doc = ""]
    #[doc = " @param [in]  context         Library context"]
    #[doc = " @param [out] creds           Renewed credentials"]
    #[doc = " @param [in]  client          Client principal name"]
    #[doc = " @param [in]  ccache          Credential cache"]
    #[doc = " @param [in]  in_tkt_service  Server principal string (or NULL)"]
    #[doc = ""]
    #[doc = " This function gets a renewed credential using an existing one from @a"]
    #[doc = " ccache.  If @a in_tkt_service is specified, it is parsed (with the realm"]
    #[doc = " part ignored) and used as the server principal of the credential; otherwise,"]
    #[doc = " the ticket-granting service is used."]
    #[doc = ""]
    #[doc = " If successful, the renewed credential is placed in @a creds."]
    #[doc = ""]
    #[doc = " @retval"]
    #[doc = " 0 Success"]
    #[doc = " @return"]
    #[doc = " Kerberos error codes"]
    pub fn krb5_get_renewed_creds(
        context: krb5_context,
        creds: *mut krb5_creds,
        client: krb5_principal,
        ccache: krb5_ccache,
        in_tkt_service: *const ::std::os::raw::c_char,
    ) -> krb5_error_code;
}
extern "C" {
    #[doc = " Decode an ASN.1-formatted ticket."]
    #[doc = ""]
    #[doc = " @param [in]  code            ASN.1-formatted ticket"]
    #[doc = " @param [out] rep             Decoded ticket information"]
    #[doc = ""]
    #[doc = " @retval 0  Success; otherwise - Kerberos error codes"]
    pub fn krb5_decode_ticket(
        code: *const krb5_data,
        rep: *mut *mut krb5_ticket,
    ) -> krb5_error_code;
}
extern "C" {
    #[doc = " Retrieve a string value from the appdefaults section of krb5.conf."]
    #[doc = ""]
    #[doc = " @param [in]  context         Library context"]
    #[doc = " @param [in]  appname         Application name"]
    #[doc = " @param [in]  realm           Realm name"]
    #[doc = " @param [in]  option          Option to be checked"]
    #[doc = " @param [in]  default_value   Default value to return if no match is found"]
    #[doc = " @param [out] ret_value       String value of @a option"]
    #[doc = ""]
    #[doc = " This function gets the application defaults for @a option based on the given"]
    #[doc = " @a appname and/or @a realm."]
    #[doc = ""]
    #[doc = " @sa krb5_appdefault_boolean()"]
    pub fn krb5_appdefault_string(
        context: krb5_context,
        appname: *const ::std::os::raw::c_char,
        realm: *const krb5_data,
        option: *const ::std::os::raw::c_char,
        default_value: *const ::std::os::raw::c_char,
        ret_value: *mut *mut ::std::os::raw::c_char,
    );
}
extern "C" {
    #[doc = " Retrieve a boolean value from the appdefaults section of krb5.conf."]
    #[doc = ""]
    #[doc = " @param [in]  context         Library context"]
    #[doc = " @param [in]  appname         Application name"]
    #[doc = " @param [in]  realm           Realm name"]
    #[doc = " @param [in]  option          Option to be checked"]
    #[doc = " @param [in]  default_value   Default value to return if no match is found"]
    #[doc = " @param [out] ret_value       Boolean value of @a option"]
    #[doc = ""]
    #[doc = " This function gets the application defaults for @a option based on the given"]
    #[doc = " @a appname and/or @a realm."]
    #[doc = ""]
    #[doc = " @sa krb5_appdefault_string()"]
    pub fn krb5_appdefault_boolean(
        context: krb5_context,
        appname: *const ::std::os::raw::c_char,
        realm: *const krb5_data,
        option: *const ::std::os::raw::c_char,
        default_value: ::std::os::raw::c_int,
        ret_value: *mut ::std::os::raw::c_int,
    );
}
pub type krb5_prompt_type = krb5_int32;
extern "C" {
    #[doc = " Get prompt types array from a context."]
    #[doc = ""]
    #[doc = " @param [in] context          Library context"]
    #[doc = ""]
    #[doc = " @return"]
    #[doc = " Pointer to an array of prompt types corresponding to the prompter's @a"]
    #[doc = " prompts arguments.  Each type has one of the following values:"]
    #[doc = "  @li #KRB5_PROMPT_TYPE_PASSWORD"]
    #[doc = "  @li #KRB5_PROMPT_TYPE_NEW_PASSWORD"]
    #[doc = "  @li #KRB5_PROMPT_TYPE_NEW_PASSWORD_AGAIN"]
    #[doc = "  @li #KRB5_PROMPT_TYPE_PREAUTH"]
    pub fn krb5_get_prompt_types(context: krb5_context) -> *mut krb5_prompt_type;
}
extern "C" {
    #[doc = " Set an extended error message for an error code."]
    #[doc = ""]
    #[doc = " @param [in] ctx              Library context"]
    #[doc = " @param [in] code             Error code"]
    #[doc = " @param [in] fmt              Error string for the error code"]
    #[doc = " @param [in] ...              printf(3) style parameters"]
    pub fn krb5_set_error_message(
        ctx: krb5_context,
        code: krb5_error_code,
        fmt: *const ::std::os::raw::c_char,
        ...
    );
}
extern "C" {
    #[doc = " Set an extended error message for an error code using a va_list."]
    #[doc = ""]
    #[doc = " @param [in] ctx              Library context"]
    #[doc = " @param [in] code             Error code"]
    #[doc = " @param [in] fmt              Error string for the error code"]
    #[doc = " @param [in] args             List of vprintf(3) style arguments"]
    pub fn krb5_vset_error_message(
        ctx: krb5_context,
        code: krb5_error_code,
        fmt: *const ::std::os::raw::c_char,
        args: *mut __va_list_tag,
    );
}
extern "C" {
    #[doc = " Add a prefix to the message for an error code."]
    #[doc = ""]
    #[doc = " @param [in] ctx              Library context"]
    #[doc = " @param [in] code             Error code"]
    #[doc = " @param [in] fmt              Format string for error message prefix"]
    #[doc = " @param [in] ...              printf(3) style parameters"]
    #[doc = ""]
    #[doc = " Format a message and prepend it to the current message for @a code.  The"]
    #[doc = " prefix will be separated from the old message with a colon and space."]
    pub fn krb5_prepend_error_message(
        ctx: krb5_context,
        code: krb5_error_code,
        fmt: *const ::std::os::raw::c_char,
        ...
    );
}
extern "C" {
    #[doc = " Add a prefix to the message for an error code using a va_list."]
    #[doc = ""]
    #[doc = " @param [in] ctx              Library context"]
    #[doc = " @param [in] code             Error code"]
    #[doc = " @param [in] fmt              Format string for error message prefix"]
    #[doc = " @param [in] args             List of vprintf(3) style arguments"]
    #[doc = ""]
    #[doc = " This function is similar to krb5_prepend_error_message(), but uses a"]
    #[doc = " va_list instead of variadic arguments."]
    pub fn krb5_vprepend_error_message(
        ctx: krb5_context,
        code: krb5_error_code,
        fmt: *const ::std::os::raw::c_char,
        args: *mut __va_list_tag,
    );
}
extern "C" {
    #[doc = " Add a prefix to a different error code's message."]
    #[doc = ""]
    #[doc = " @param [in] ctx              Library context"]
    #[doc = " @param [in] old_code         Previous error code"]
    #[doc = " @param [in] code             Error code"]
    #[doc = " @param [in] fmt              Format string for error message prefix"]
    #[doc = " @param [in] ...              printf(3) style parameters"]
    #[doc = ""]
    #[doc = " Format a message and prepend it to the message for @a old_code.  The prefix"]
    #[doc = " will be separated from the old message with a colon and space.  Set the"]
    #[doc = " resulting message as the extended error message for @a code."]
    pub fn krb5_wrap_error_message(
        ctx: krb5_context,
        old_code: krb5_error_code,
        code: krb5_error_code,
        fmt: *const ::std::os::raw::c_char,
        ...
    );
}
extern "C" {
    #[doc = " Add a prefix to a different error code's message using a va_list."]
    #[doc = ""]
    #[doc = " @param [in] ctx              Library context"]
    #[doc = " @param [in] old_code         Previous error code"]
    #[doc = " @param [in] code             Error code"]
    #[doc = " @param [in] fmt              Format string for error message prefix"]
    #[doc = " @param [in] args             List of vprintf(3) style arguments"]
    #[doc = ""]
    #[doc = " This function is similar to krb5_wrap_error_message(), but uses a"]
    #[doc = " va_list instead of variadic arguments."]
    pub fn krb5_vwrap_error_message(
        ctx: krb5_context,
        old_code: krb5_error_code,
        code: krb5_error_code,
        fmt: *const ::std::os::raw::c_char,
        args: *mut __va_list_tag,
    );
}
extern "C" {
    #[doc = " Copy the most recent extended error message from one context to another."]
    #[doc = ""]
    #[doc = " @param [in] dest_ctx         Library context to copy message to"]
    #[doc = " @param [in] src_ctx          Library context with current message"]
    pub fn krb5_copy_error_message(dest_ctx: krb5_context, src_ctx: krb5_context);
}
extern "C" {
    #[doc = " Get the (possibly extended) error message for a code."]
    #[doc = ""]
    #[doc = " @param [in] ctx              Library context"]
    #[doc = " @param [in] code             Error code"]
    #[doc = ""]
    #[doc = " The behavior of krb5_get_error_message() is only defined the first time it"]
    #[doc = " is called after a failed call to a krb5 function using the same context, and"]
    #[doc = " only when the error code passed in is the same as that returned by the krb5"]
    #[doc = " function."]
    #[doc = ""]
    #[doc = " This function never returns NULL, so its result may be used unconditionally"]
    #[doc = " as a C string."]
    #[doc = ""]
    #[doc = " The string returned by this function must be freed using"]
    #[doc = " krb5_free_error_message()"]
    #[doc = ""]
    #[doc = " @note Future versions may return the same string for the second"]
    #[doc = " and following calls."]
    pub fn krb5_get_error_message(
        ctx: krb5_context,
        code: krb5_error_code,
    ) -> *const ::std::os::raw::c_char;
}
extern "C" {
    #[doc = " Free an error message generated by krb5_get_error_message()."]
    #[doc = ""]
    #[doc = " @param [in] ctx              Library context"]
    #[doc = " @param [in] msg              Pointer to error message"]
    pub fn krb5_free_error_message(ctx: krb5_context, msg: *const ::std::os::raw::c_char);
}
extern "C" {
    #[doc = " Clear the extended error message in a context."]
    #[doc = ""]
    #[doc = " @param [in] ctx              Library context"]
    #[doc = ""]
    #[doc = " This function unsets the extended error message in a context, to ensure that"]
    #[doc = " it is not mistakenly applied to another occurrence of the same error code."]
    pub fn krb5_clear_error_message(ctx: krb5_context);
}
extern "C" {
    #[doc = " Unwrap authorization data."]
    #[doc = ""]
    #[doc = " @param [in]  context         Library context"]
    #[doc = " @param [in]  type            @ref KRB5_AUTHDATA type of @a container"]
    #[doc = " @param [in]  container       Authorization data to be decoded"]
    #[doc = " @param [out] authdata        List of decoded authorization data"]
    #[doc = ""]
    #[doc = " @sa krb5_encode_authdata_container()"]
    #[doc = ""]
    #[doc = " @retval 0 Success; otherwise - Kerberos error codes"]
    pub fn krb5_decode_authdata_container(
        context: krb5_context,
        type_: krb5_authdatatype,
        container: *const krb5_authdata,
        authdata: *mut *mut *mut krb5_authdata,
    ) -> krb5_error_code;
}
extern "C" {
    #[doc = " Wrap authorization data in a container."]
    #[doc = ""]
    #[doc = " @param [in]  context         Library context"]
    #[doc = " @param [in]  type            @ref KRB5_AUTHDATA type of @a container"]
    #[doc = " @param [in]  authdata        List of authorization data to be encoded"]
    #[doc = " @param [out] container       List of encoded authorization data"]
    #[doc = ""]
    #[doc = " The result is returned in @a container as a single-element list."]
    #[doc = ""]
    #[doc = " @sa krb5_decode_authdata_container()"]
    #[doc = ""]
    #[doc = " @retval 0 Success; otherwise - Kerberos error codes"]
    pub fn krb5_encode_authdata_container(
        context: krb5_context,
        type_: krb5_authdatatype,
        authdata: *const *mut krb5_authdata,
        container: *mut *mut *mut krb5_authdata,
    ) -> krb5_error_code;
}
extern "C" {
    #[doc = " Encode and sign AD-KDCIssued authorization data."]
    #[doc = ""]
    #[doc = " @param [in]  context         Library context"]
    #[doc = " @param [in]  key             Session key"]
    #[doc = " @param [in]  issuer          The name of the issuing principal"]
    #[doc = " @param [in]  authdata        List of authorization data to be signed"]
    #[doc = " @param [out] ad_kdcissued    List containing AD-KDCIssued authdata"]
    #[doc = ""]
    #[doc = " This function wraps a list of authorization data entries @a authdata in an"]
    #[doc = " AD-KDCIssued container (see RFC 4120 section 5.2.6.2) signed with @a key."]
    #[doc = " The result is returned in @a ad_kdcissued as a single-element list."]
    pub fn krb5_make_authdata_kdc_issued(
        context: krb5_context,
        key: *const krb5_keyblock,
        issuer: krb5_const_principal,
        authdata: *const *mut krb5_authdata,
        ad_kdcissued: *mut *mut *mut krb5_authdata,
    ) -> krb5_error_code;
}
extern "C" {
    #[doc = " Unwrap and verify AD-KDCIssued authorization data."]
    #[doc = ""]
    #[doc = " @param [in] context          Library context"]
    #[doc = " @param [in] key              Session key"]
    #[doc = " @param [in] ad_kdcissued     AD-KDCIssued authorization data to be unwrapped"]
    #[doc = " @param [out] issuer          Name of issuing principal (or NULL)"]
    #[doc = " @param [out] authdata        Unwrapped list of authorization data"]
    #[doc = ""]
    #[doc = " This function unwraps an AD-KDCIssued authdatum (see RFC 4120 section"]
    #[doc = " 5.2.6.2) and verifies its signature against @a key.  The issuer field of the"]
    #[doc = " authdatum element is returned in @a issuer, and the unwrapped list of"]
    #[doc = " authdata is returned in @a authdata."]
    pub fn krb5_verify_authdata_kdc_issued(
        context: krb5_context,
        key: *const krb5_keyblock,
        ad_kdcissued: *const krb5_authdata,
        issuer: *mut krb5_principal,
        authdata: *mut *mut *mut krb5_authdata,
    ) -> krb5_error_code;
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct krb5_pac_data {
    _unused: [u8; 0],
}
#[doc = " PAC data structure to convey authorization information"]
pub type krb5_pac = *mut krb5_pac_data;
extern "C" {
    #[doc = " Add a buffer to a PAC handle."]
    #[doc = ""]
    #[doc = " @param [in] context          Library context"]
    #[doc = " @param [in] pac              PAC handle"]
    #[doc = " @param [in] type             Buffer type"]
    #[doc = " @param [in] data             contents"]
    #[doc = ""]
    #[doc = " This function adds a buffer of type @a type and contents @a data to @a pac"]
    #[doc = " if there isn't already a buffer of this type present."]
    #[doc = ""]
    #[doc = " The valid values of @a type is one of the following:"]
    #[doc = " @li #KRB5_PAC_LOGON_INFO         -  Logon information"]
    #[doc = " @li #KRB5_PAC_CREDENTIALS_INFO   -  Credentials information"]
    #[doc = " @li #KRB5_PAC_SERVER_CHECKSUM    -  Server checksum"]
    #[doc = " @li #KRB5_PAC_PRIVSVR_CHECKSUM   -  KDC checksum"]
    #[doc = " @li #KRB5_PAC_CLIENT_INFO        -  Client name and ticket information"]
    #[doc = " @li #KRB5_PAC_DELEGATION_INFO    -  Constrained delegation information"]
    #[doc = " @li #KRB5_PAC_UPN_DNS_INFO       -  User principal name and DNS information"]
    #[doc = ""]
    #[doc = " @retval 0 Success; otherwise - Kerberos error codes"]
    pub fn krb5_pac_add_buffer(
        context: krb5_context,
        pac: krb5_pac,
        type_: krb5_ui_4,
        data: *const krb5_data,
    ) -> krb5_error_code;
}
extern "C" {
    #[doc = " Free a PAC handle."]
    #[doc = ""]
    #[doc = " @param [in] context         Library context"]
    #[doc = " @param [in] pac             PAC to be freed"]
    #[doc = ""]
    #[doc = " This function frees the contents of @a pac and the structure itself."]
    pub fn krb5_pac_free(context: krb5_context, pac: krb5_pac);
}
extern "C" {
    #[doc = " Retrieve a buffer value from a PAC."]
    #[doc = ""]
    #[doc = " @param [in]  context         Library context"]
    #[doc = " @param [in]  pac             PAC handle"]
    #[doc = " @param [in]  type            Type of buffer to retrieve"]
    #[doc = " @param [out] data            Buffer value"]
    #[doc = ""]
    #[doc = " Use krb5_free_data_contents() to free @a data when it is no longer needed."]
    #[doc = ""]
    #[doc = " @retval 0 Success; otherwise - Kerberos error codes"]
    pub fn krb5_pac_get_buffer(
        context: krb5_context,
        pac: krb5_pac,
        type_: krb5_ui_4,
        data: *mut krb5_data,
    ) -> krb5_error_code;
}
extern "C" {
    #[doc = " Return an array of buffer types in a PAC handle."]
    #[doc = ""]
    #[doc = " @param [in]  context         Library context"]
    #[doc = " @param [in]  pac             PAC handle"]
    #[doc = " @param [out] len             Number of entries in @a types"]
    #[doc = " @param [out] types           Array of buffer types"]
    #[doc = ""]
    #[doc = " @retval 0 Success; otherwise - Kerberos error codes"]
    pub fn krb5_pac_get_types(
        context: krb5_context,
        pac: krb5_pac,
        len: *mut size_t,
        types: *mut *mut krb5_ui_4,
    ) -> krb5_error_code;
}
extern "C" {
    #[doc = " Create an empty Privilege Attribute Certificate (PAC) handle."]
    #[doc = ""]
    #[doc = " @param [in]  context         Library context"]
    #[doc = " @param [out] pac             New PAC handle"]
    #[doc = ""]
    #[doc = " Use krb5_pac_free() to free @a pac when it is no longer needed."]
    #[doc = ""]
    #[doc = " @retval 0 Success; otherwise - Kerberos error codes"]
    pub fn krb5_pac_init(context: krb5_context, pac: *mut krb5_pac) -> krb5_error_code;
}
extern "C" {
    #[doc = " Unparse an encoded PAC into a new handle."]
    #[doc = ""]
    #[doc = " @param [in]  context         Library context"]
    #[doc = " @param [in]  ptr             PAC buffer"]
    #[doc = " @param [in]  len             Length of @a ptr"]
    #[doc = " @param [out] pac             PAC handle"]
    #[doc = ""]
    #[doc = " Use krb5_pac_free() to free @a pac when it is no longer needed."]
    #[doc = ""]
    #[doc = " @retval 0 Success; otherwise - Kerberos error codes"]
    pub fn krb5_pac_parse(
        context: krb5_context,
        ptr: *const ::std::os::raw::c_void,
        len: size_t,
        pac: *mut krb5_pac,
    ) -> krb5_error_code;
}
extern "C" {
    #[doc = " Verify a PAC."]
    #[doc = ""]
    #[doc = " @param [in] context          Library context"]
    #[doc = " @param [in] pac              PAC handle"]
    #[doc = " @param [in] authtime         Expected timestamp"]
    #[doc = " @param [in] principal        Expected principal name (or NULL)"]
    #[doc = " @param [in] server           Key to validate server checksum (or NULL)"]
    #[doc = " @param [in] privsvr          Key to validate KDC checksum (or NULL)"]
    #[doc = ""]
    #[doc = " This function validates @a pac against the supplied @a server, @a privsvr,"]
    #[doc = " @a principal and @a authtime.  If @a principal is NULL, the principal and"]
    #[doc = " authtime are not verified.  If @a server or @a privsvr is NULL, the"]
    #[doc = " corresponding checksum is not verified."]
    #[doc = ""]
    #[doc = " If successful, @a pac is marked as verified."]
    #[doc = ""]
    #[doc = " @note A checksum mismatch can occur if the PAC was copied from a cross-realm"]
    #[doc = " TGT by an ignorant KDC; also macOS Server Open Directory (as of 10.6)"]
    #[doc = " generates PACs with no server checksum at all.  One should consider not"]
    #[doc = " failing the whole authentication because of this reason, but, instead,"]
    #[doc = " treating the ticket as if it did not contain a PAC or marking the PAC"]
    #[doc = " information as non-verified."]
    #[doc = ""]
    #[doc = " @retval 0 Success; otherwise - Kerberos error codes"]
    pub fn krb5_pac_verify(
        context: krb5_context,
        pac: krb5_pac,
        authtime: krb5_timestamp,
        principal: krb5_const_principal,
        server: *const krb5_keyblock,
        privsvr: *const krb5_keyblock,
    ) -> krb5_error_code;
}
extern "C" {
    #[doc = " Verify a PAC, possibly from a specified realm."]
    #[doc = ""]
    #[doc = " @param [in] context          Library context"]
    #[doc = " @param [in] pac              PAC handle"]
    #[doc = " @param [in] authtime         Expected timestamp"]
    #[doc = " @param [in] principal        Expected principal name (or NULL)"]
    #[doc = " @param [in] server           Key to validate server checksum (or NULL)"]
    #[doc = " @param [in] privsvr          Key to validate KDC checksum (or NULL)"]
    #[doc = " @param [in] with_realm       If true, expect the realm of @a principal"]
    #[doc = ""]
    #[doc = " This function is similar to krb5_pac_verify(), but adds a parameter"]
    #[doc = " @a with_realm.  If @a with_realm is true, the PAC_CLIENT_INFO field is"]
    #[doc = " expected to include the realm of @a principal as well as the name.  This"]
    #[doc = " flag is necessary to verify PACs in cross-realm S4U2Self referral TGTs."]
    #[doc = ""]
    #[doc = " @version New in 1.17"]
    pub fn krb5_pac_verify_ext(
        context: krb5_context,
        pac: krb5_pac,
        authtime: krb5_timestamp,
        principal: krb5_const_principal,
        server: *const krb5_keyblock,
        privsvr: *const krb5_keyblock,
        with_realm: krb5_boolean,
    ) -> krb5_error_code;
}
extern "C" {
    #[doc = " Sign a PAC."]
    #[doc = ""]
    #[doc = " @param [in]  context         Library context"]
    #[doc = " @param [in]  pac             PAC handle"]
    #[doc = " @param [in]  authtime        Expected timestamp"]
    #[doc = " @param [in]  principal       Expected principal name (or NULL)"]
    #[doc = " @param [in]  server_key      Key for server checksum"]
    #[doc = " @param [in]  privsvr_key     Key for KDC checksum"]
    #[doc = " @param [out] data            Signed PAC encoding"]
    #[doc = ""]
    #[doc = " This function signs @a pac using the keys @a server_key and @a privsvr_key"]
    #[doc = " and returns the signed encoding in @a data.  @a pac is modified to include"]
    #[doc = " the server and KDC checksum buffers.  Use krb5_free_data_contents() to free"]
    #[doc = " @a data when it is no longer needed."]
    #[doc = ""]
    #[doc = " @version New in 1.10"]
    pub fn krb5_pac_sign(
        context: krb5_context,
        pac: krb5_pac,
        authtime: krb5_timestamp,
        principal: krb5_const_principal,
        server_key: *const krb5_keyblock,
        privsvr_key: *const krb5_keyblock,
        data: *mut krb5_data,
    ) -> krb5_error_code;
}
extern "C" {
    #[doc = " Sign a PAC, possibly with a specified realm."]
    #[doc = ""]
    #[doc = " @param [in]  context         Library context"]
    #[doc = " @param [in]  pac             PAC handle"]
    #[doc = " @param [in]  authtime        Expected timestamp"]
    #[doc = " @param [in]  principal       Principal name (or NULL)"]
    #[doc = " @param [in]  server_key      Key for server checksum"]
    #[doc = " @param [in]  privsvr_key     Key for KDC checksum"]
    #[doc = " @param [in]  with_realm      If true, include the realm of @a principal"]
    #[doc = " @param [out] data            Signed PAC encoding"]
    #[doc = ""]
    #[doc = " This function is similar to krb5_pac_sign(), but adds a parameter"]
    #[doc = " @a with_realm.  If @a with_realm is true, the PAC_CLIENT_INFO field of the"]
    #[doc = " signed PAC will include the realm of @a principal as well as the name.  This"]
    #[doc = " flag is necessary to generate PACs for cross-realm S4U2Self referrals."]
    #[doc = ""]
    #[doc = " @version New in 1.17"]
    pub fn krb5_pac_sign_ext(
        context: krb5_context,
        pac: krb5_pac,
        authtime: krb5_timestamp,
        principal: krb5_const_principal,
        server_key: *const krb5_keyblock,
        privsvr_key: *const krb5_keyblock,
        with_realm: krb5_boolean,
        data: *mut krb5_data,
    ) -> krb5_error_code;
}
extern "C" {
    pub fn krb5_pac_get_client_info(
        context: krb5_context,
        pac: krb5_pac,
        authtime_out: *mut krb5_timestamp,
        princname_out: *mut *mut ::std::os::raw::c_char,
    ) -> krb5_error_code;
}
extern "C" {
    #[doc = " Allow the application to override the profile's allow_weak_crypto setting."]
    #[doc = ""]
    #[doc = " @param [in] context          Library context"]
    #[doc = " @param [in] enable           Boolean flag"]
    #[doc = ""]
    #[doc = " This function allows an application to override the allow_weak_crypto"]
    #[doc = " setting.  It is primarily for use by aklog."]
    #[doc = ""]
    #[doc = " @retval 0  (always)"]
    pub fn krb5_allow_weak_crypto(context: krb5_context, enable: krb5_boolean) -> krb5_error_code;
}
#[doc = " A wrapper for passing information to a @c krb5_trace_callback."]
#[doc = ""]
#[doc = " Currently, it only contains the formatted message as determined"]
#[doc = " the the format string and arguments of the tracing macro, but it"]
#[doc = " may be extended to contain more fields in the future."]
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _krb5_trace_info {
    pub message: *const ::std::os::raw::c_char,
}
#[test]
fn bindgen_test_layout__krb5_trace_info() {
    assert_eq!(
        ::std::mem::size_of::<_krb5_trace_info>(),
        8usize,
        concat!("Size of: ", stringify!(_krb5_trace_info))
    );
    assert_eq!(
        ::std::mem::align_of::<_krb5_trace_info>(),
        8usize,
        concat!("Alignment of ", stringify!(_krb5_trace_info))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_krb5_trace_info>())).message as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_krb5_trace_info),
            "::",
            stringify!(message)
        )
    );
}
#[doc = " A wrapper for passing information to a @c krb5_trace_callback."]
#[doc = ""]
#[doc = " Currently, it only contains the formatted message as determined"]
#[doc = " the the format string and arguments of the tracing macro, but it"]
#[doc = " may be extended to contain more fields in the future."]
pub type krb5_trace_info = _krb5_trace_info;
pub type krb5_trace_callback = ::std::option::Option<
    unsafe extern "C" fn(
        context: krb5_context,
        info: *const krb5_trace_info,
        cb_data: *mut ::std::os::raw::c_void,
    ),
>;
extern "C" {
    #[doc = " Specify a callback function for trace events."]
    #[doc = ""]
    #[doc = " @param [in] context          Library context"]
    #[doc = " @param [in] fn               Callback function"]
    #[doc = " @param [in] cb_data          Callback data"]
    #[doc = ""]
    #[doc = " Specify a callback for trace events occurring in krb5 operations performed"]
    #[doc = " within @a context.  @a fn will be invoked with @a context as the first"]
    #[doc = " argument, @a cb_data as the last argument, and a pointer to a"]
    #[doc = " krb5_trace_info as the second argument.  If the trace callback is reset via"]
    #[doc = " this function or @a context is destroyed, @a fn will be invoked with a NULL"]
    #[doc = " second argument so it can clean up @a cb_data.  Supply a NULL value for @a"]
    #[doc = " fn to disable trace callbacks within @a context."]
    #[doc = ""]
    #[doc = " @note This function overrides the information passed through the"]
    #[doc = " @a KRB5_TRACE environment variable."]
    #[doc = ""]
    #[doc = " @version New in 1.9"]
    #[doc = ""]
    #[doc = " @return Returns KRB5_TRACE_NOSUPP if tracing is not supported in the library"]
    #[doc = " (unless @a fn is NULL)."]
    pub fn krb5_set_trace_callback(
        context: krb5_context,
        fn_: krb5_trace_callback,
        cb_data: *mut ::std::os::raw::c_void,
    ) -> krb5_error_code;
}
extern "C" {
    #[doc = " Specify a file name for directing trace events."]
    #[doc = ""]
    #[doc = " @param [in] context          Library context"]
    #[doc = " @param [in] filename         File name"]
    #[doc = ""]
    #[doc = " Open @a filename for appending (creating it, if necessary) and set up a"]
    #[doc = " callback to write trace events to it."]
    #[doc = ""]
    #[doc = " @note This function overrides the information passed through the"]
    #[doc = " @a KRB5_TRACE environment variable."]
    #[doc = ""]
    #[doc = " @version New in 1.9"]
    #[doc = ""]
    #[doc = " @retval KRB5_TRACE_NOSUPP Tracing is not supported in the library."]
    pub fn krb5_set_trace_filename(
        context: krb5_context,
        filename: *const ::std::os::raw::c_char,
    ) -> krb5_error_code;
}
#[doc = " Hook function for inspecting or modifying messages sent to KDCs."]
#[doc = ""]
#[doc = " @param [in]  context         Library context"]
#[doc = " @param [in]  data            Callback data"]
#[doc = " @param [in]  realm           The realm the message will be sent to"]
#[doc = " @param [in]  message         The original message to be sent to the KDC"]
#[doc = " @param [out] new_message_out Optional replacement message to be sent"]
#[doc = " @param [out] reply_out       Optional synthetic reply"]
#[doc = ""]
#[doc = " If the hook function returns an error code, the KDC communication will be"]
#[doc = " aborted and the error code will be returned to the library operation which"]
#[doc = " initiated the communication."]
#[doc = ""]
#[doc = " If the hook function sets @a reply_out, @a message will not be sent to the"]
#[doc = " KDC, and the given reply will used instead."]
#[doc = ""]
#[doc = " If the hook function sets @a new_message_out, the given message will be sent"]
#[doc = " to the KDC in place of @a message."]
#[doc = ""]
#[doc = " If the hook function returns successfully without setting either output,"]
#[doc = " @a message will be sent to the KDC normally."]
#[doc = ""]
#[doc = " The hook function should use krb5_copy_data() to construct the value for"]
#[doc = " @a new_message_out or @a reply_out, to ensure that it can be freed correctly"]
#[doc = " by the library."]
#[doc = ""]
#[doc = " @version New in 1.15"]
#[doc = ""]
#[doc = " @retval 0 Success"]
#[doc = " @return A Kerberos error code"]
pub type krb5_pre_send_fn = ::std::option::Option<
    unsafe extern "C" fn(
        context: krb5_context,
        data: *mut ::std::os::raw::c_void,
        realm: *const krb5_data,
        message: *const krb5_data,
        new_message_out: *mut *mut krb5_data,
        new_reply_out: *mut *mut krb5_data,
    ) -> krb5_error_code,
>;
#[doc = " Hook function for inspecting or overriding KDC replies."]
#[doc = ""]
#[doc = " @param [in]  context         Library context"]
#[doc = " @param [in]  data            Callback data"]
#[doc = " @param [in]  code            Status of KDC communication"]
#[doc = " @param [in]  realm           The realm the reply was received from"]
#[doc = " @param [in]  message         The message sent to the realm's KDC"]
#[doc = " @param [in]  reply           The reply received from the KDC"]
#[doc = " @param [out] new_reply_out   Optional replacement reply"]
#[doc = ""]
#[doc = " If @a code is zero, @a reply contains the reply received from the KDC.  The"]
#[doc = " hook function may return an error code to simulate an error, may synthesize"]
#[doc = " a different reply by setting @a new_reply_out, or may simply return"]
#[doc = " successfully to do nothing."]
#[doc = ""]
#[doc = " If @a code is non-zero, KDC communication failed and @a reply should be"]
#[doc = " ignored.  The hook function may return @a code or a different error code, or"]
#[doc = " may synthesize a reply by setting @a new_reply_out and return successfully."]
#[doc = ""]
#[doc = " The hook function should use krb5_copy_data() to construct the value for"]
#[doc = " @a new_reply_out, to ensure that it can be freed correctly by the library."]
#[doc = ""]
#[doc = " @version New in 1.15"]
#[doc = ""]
#[doc = " @retval 0 Success"]
#[doc = " @return A Kerberos error code"]
pub type krb5_post_recv_fn = ::std::option::Option<
    unsafe extern "C" fn(
        context: krb5_context,
        data: *mut ::std::os::raw::c_void,
        code: krb5_error_code,
        realm: *const krb5_data,
        message: *const krb5_data,
        reply: *const krb5_data,
        new_reply_out: *mut *mut krb5_data,
    ) -> krb5_error_code,
>;
extern "C" {
    #[doc = " Set a KDC pre-send hook function."]
    #[doc = ""]
    #[doc = " @param [in] context          Library context"]
    #[doc = " @param [in] send_hook        Hook function (or NULL to disable the hook)"]
    #[doc = " @param [in] data             Callback data to be passed to @a send_hook"]
    #[doc = ""]
    #[doc = " @a send_hook will be called before messages are sent to KDCs by library"]
    #[doc = " functions such as krb5_get_credentials().  The hook function may inspect,"]
    #[doc = " override, or synthesize its own reply to the message."]
    #[doc = ""]
    #[doc = " @version New in 1.15"]
    pub fn krb5_set_kdc_send_hook(
        context: krb5_context,
        send_hook: krb5_pre_send_fn,
        data: *mut ::std::os::raw::c_void,
    );
}
extern "C" {
    #[doc = " Set a KDC post-receive hook function."]
    #[doc = ""]
    #[doc = " @param [in] context          The library context."]
    #[doc = " @param [in] recv_hook        Hook function (or NULL to disable the hook)"]
    #[doc = " @param [in] data             Callback data to be passed to @a recv_hook"]
    #[doc = ""]
    #[doc = " @a recv_hook will be called after a reply is received from a KDC during a"]
    #[doc = " call to a library function such as krb5_get_credentials().  The hook"]
    #[doc = " function may inspect or override the reply.  This hook will not be executed"]
    #[doc = " if the pre-send hook returns a synthetic reply."]
    #[doc = ""]
    #[doc = " @version New in 1.15"]
    pub fn krb5_set_kdc_recv_hook(
        context: krb5_context,
        recv_hook: krb5_post_recv_fn,
        data: *mut ::std::os::raw::c_void,
    );
}
#[repr(C)]
#[repr(align(16))]
#[derive(Debug, Copy, Clone)]
pub struct max_align_t {
    pub __clang_max_align_nonce1: ::std::os::raw::c_longlong,
    pub __bindgen_padding_0: u64,
    pub __clang_max_align_nonce2: u128,
}
#[test]
fn bindgen_test_layout_max_align_t() {
    assert_eq!(
        ::std::mem::size_of::<max_align_t>(),
        32usize,
        concat!("Size of: ", stringify!(max_align_t))
    );
    assert_eq!(
        ::std::mem::align_of::<max_align_t>(),
        16usize,
        concat!("Alignment of ", stringify!(max_align_t))
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<max_align_t>())).__clang_max_align_nonce1 as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(max_align_t),
            "::",
            stringify!(__clang_max_align_nonce1)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<max_align_t>())).__clang_max_align_nonce2 as *const _ as usize
        },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(max_align_t),
            "::",
            stringify!(__clang_max_align_nonce2)
        )
    );
}
pub type errcode_t = ::std::os::raw::c_long;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct error_table {
    pub msgs: *const *const ::std::os::raw::c_char,
    pub base: ::std::os::raw::c_long,
    pub n_msgs: ::std::os::raw::c_int,
}
#[test]
fn bindgen_test_layout_error_table() {
    assert_eq!(
        ::std::mem::size_of::<error_table>(),
        24usize,
        concat!("Size of: ", stringify!(error_table))
    );
    assert_eq!(
        ::std::mem::align_of::<error_table>(),
        8usize,
        concat!("Alignment of ", stringify!(error_table))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<error_table>())).msgs as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(error_table),
            "::",
            stringify!(msgs)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<error_table>())).base as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(error_table),
            "::",
            stringify!(base)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<error_table>())).n_msgs as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(error_table),
            "::",
            stringify!(n_msgs)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct et_list {
    _unused: [u8; 0],
}
extern "C" {
    pub fn com_err(
        arg1: *const ::std::os::raw::c_char,
        arg2: ::std::os::raw::c_long,
        arg3: *const ::std::os::raw::c_char,
        ...
    );
}
extern "C" {
    pub fn com_err_va(
        whoami: *const ::std::os::raw::c_char,
        code: errcode_t,
        fmt: *const ::std::os::raw::c_char,
        args: *mut __va_list_tag,
    );
}
extern "C" {
    pub fn error_message(arg1: ::std::os::raw::c_long) -> *const ::std::os::raw::c_char;
}
extern "C" {
    pub static mut com_err_hook: ::std::option::Option<
        unsafe extern "C" fn(
            arg1: *const ::std::os::raw::c_char,
            arg2: ::std::os::raw::c_long,
            arg3: *const ::std::os::raw::c_char,
            arg4: *mut __va_list_tag,
        ),
    >;
}
extern "C" {
    pub fn set_com_err_hook(
        arg1: ::std::option::Option<
            unsafe extern "C" fn(
                arg1: *const ::std::os::raw::c_char,
                arg2: ::std::os::raw::c_long,
                arg3: *const ::std::os::raw::c_char,
                arg4: *mut __va_list_tag,
            ),
        >,
    ) -> ::std::option::Option<
        unsafe extern "C" fn(
            arg1: *const ::std::os::raw::c_char,
            arg2: ::std::os::raw::c_long,
            arg3: *const ::std::os::raw::c_char,
            arg4: *mut __va_list_tag,
        ),
    >;
}
extern "C" {
    pub fn reset_com_err_hook() -> ::std::option::Option<
        unsafe extern "C" fn(
            arg1: *const ::std::os::raw::c_char,
            arg2: ::std::os::raw::c_long,
            arg3: *const ::std::os::raw::c_char,
            arg4: *mut __va_list_tag,
        ),
    >;
}
extern "C" {
    pub fn init_error_table(
        msgs: *const *const ::std::os::raw::c_char,
        base: ::std::os::raw::c_long,
        count: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn set_com_err_gettext(
        arg1: ::std::option::Option<
            unsafe extern "C" fn(
                arg1: *const ::std::os::raw::c_char,
            ) -> *mut ::std::os::raw::c_char,
        >,
    ) -> ::std::option::Option<
        unsafe extern "C" fn(arg1: *const ::std::os::raw::c_char) -> *mut ::std::os::raw::c_char,
    >;
}
extern "C" {
    pub fn add_error_table(et: *const error_table) -> errcode_t;
}
extern "C" {
    pub fn remove_error_table(et: *const error_table) -> errcode_t;
}
extern "C" {
    pub fn add_to_error_table(new_table: *mut et_list);
}
extern "C" {
    pub fn com_right(
        list: *mut et_list,
        code: ::std::os::raw::c_long,
    ) -> *const ::std::os::raw::c_char;
}
extern "C" {
    pub fn com_right_r(
        list: *mut et_list,
        code: ::std::os::raw::c_long,
        str_: *mut ::std::os::raw::c_char,
        len: size_t,
    ) -> *const ::std::os::raw::c_char;
}
extern "C" {
    pub fn initialize_error_table_r(
        list: *mut *mut et_list,
        messages: *mut *const ::std::os::raw::c_char,
        num_errors: ::std::os::raw::c_int,
        base: ::std::os::raw::c_long,
    );
}
extern "C" {
    pub fn free_error_table(et: *mut et_list);
}
extern "C" {
    pub fn et_list_lock() -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn et_list_unlock() -> ::std::os::raw::c_int;
}
extern "C" {
    pub static et_krb5_error_table: error_table;
}
extern "C" {
    pub fn initialize_krb5_error_table();
}
extern "C" {
    pub fn initialize_krb5_error_table_r(list: *mut *mut et_list);
}
extern "C" {
    pub static et_k5e1_error_table: error_table;
}
extern "C" {
    pub fn initialize_k5e1_error_table();
}
extern "C" {
    pub fn initialize_k5e1_error_table_r(list: *mut *mut et_list);
}
extern "C" {
    pub static et_kdb5_error_table: error_table;
}
extern "C" {
    pub fn initialize_kdb5_error_table();
}
extern "C" {
    pub fn initialize_kdb5_error_table_r(list: *mut *mut et_list);
}
extern "C" {
    pub static et_kv5m_error_table: error_table;
}
extern "C" {
    pub fn initialize_kv5m_error_table();
}
extern "C" {
    pub fn initialize_kv5m_error_table_r(list: *mut *mut et_list);
}
extern "C" {
    pub static et_k524_error_table: error_table;
}
extern "C" {
    pub fn initialize_k524_error_table();
}
extern "C" {
    pub fn initialize_k524_error_table_r(list: *mut *mut et_list);
}
extern "C" {
    pub static et_asn1_error_table: error_table;
}
extern "C" {
    pub fn initialize_asn1_error_table();
}
extern "C" {
    pub fn initialize_asn1_error_table_r(list: *mut *mut et_list);
}
pub type __builtin_va_list = [__va_list_tag; 1usize];
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __va_list_tag {
    pub gp_offset: ::std::os::raw::c_uint,
    pub fp_offset: ::std::os::raw::c_uint,
    pub overflow_arg_area: *mut ::std::os::raw::c_void,
    pub reg_save_area: *mut ::std::os::raw::c_void,
}
#[test]
fn bindgen_test_layout___va_list_tag() {
    assert_eq!(
        ::std::mem::size_of::<__va_list_tag>(),
        24usize,
        concat!("Size of: ", stringify!(__va_list_tag))
    );
    assert_eq!(
        ::std::mem::align_of::<__va_list_tag>(),
        8usize,
        concat!("Alignment of ", stringify!(__va_list_tag))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<__va_list_tag>())).gp_offset as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__va_list_tag),
            "::",
            stringify!(gp_offset)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<__va_list_tag>())).fp_offset as *const _ as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(__va_list_tag),
            "::",
            stringify!(fp_offset)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<__va_list_tag>())).overflow_arg_area as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(__va_list_tag),
            "::",
            stringify!(overflow_arg_area)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<__va_list_tag>())).reg_save_area as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(__va_list_tag),
            "::",
            stringify!(reg_save_area)
        )
    );
}
